<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DomainObjects</name>
    </assembly>
    <members>
        <member name="T:DomainObjects.ISDBSatelliteProvider">
            <summary>
            Initialize a new instance of the ISDBSatelliteProvider class.
            </summary>
        </member>
        <member name="T:DomainObjects.Provider">
            <summary>
            The class that describes a provider.
            </summary>
        </member>
        <member name="M:DomainObjects.Provider.#ctor">
            <summary>
            Initialize a new instance of the Provider class.
            </summary>
        </member>
        <member name="M:DomainObjects.Provider.#ctor(System.String)">
            <summary>
            Initialize a new instance of the Provider class. 
            </summary>
            <param name="name">The name of the provider.</param>
        </member>
        <member name="M:DomainObjects.Provider.loadBase(System.Xml.XmlReader)">
            <summary>
            Load the base properties.
            </summary>
            <param name="reader">The XmlReader to use.</param>
        </member>
        <member name="M:DomainObjects.Provider.unloadBase(System.Xml.XmlWriter)">
            <summary>
            Unload the base properties.
            </summary>
            <param name="writer">The XmlWriter to use.</param>
        </member>
        <member name="M:DomainObjects.Provider.AddFrequency(DomainObjects.TuningFrequency)">
            <summary>
            Add a new frequency.
            </summary>
            <param name="newFrequency">The frequency to be added.</param>
        </member>
        <member name="M:DomainObjects.Provider.FindFrequency(System.Int32)">
            <summary>
            Find a tuning frequency.
            </summary>
            <param name="frequency">The frequency to be searched for.</param>
            <returns>The tuning frequency or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Provider.ToString">
            <summary>
            Get a string representing this instance.
            </summary>
            <returns>The description of this instance.</returns>
        </member>
        <member name="M:DomainObjects.Provider.EqualTo(DomainObjects.Provider,DomainObjects.EqualityLevel)">
            <summary>
            Check this provider for equality with another.
            </summary>
            <param name="provider">The other frequency.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.Provider.LogNetworkInfo">
            <summary>
            Log the network information.
            </summary>
        </member>
        <member name="P:DomainObjects.Provider.Name">
            <summary>
            Get or set the name of the provider.
            </summary>
        </member>
        <member name="P:DomainObjects.Provider.CountryCode">
            <summary>
            Get or set the country code for the provider.
            </summary>
        </member>
        <member name="P:DomainObjects.Provider.Options">
            <summary>
            Get or set the list of options for the provider.
            </summary>
        </member>
        <member name="P:DomainObjects.Provider.Frequencies">
            <summary>
            Get the collection of frequencies from the provider.
            </summary>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ISDBSatelliteProvider class.
            </summary>
            <param name="name">The name of the satellite.</param>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the ISDBSatelliteProvider class.
            </summary>
            <param name="longitude">The longitude in 1/10th's of a degree. Negative for west.</param>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.FindISDBSatellite(System.String)">
            <summary>
            Find a satellite.
            </summary>
            <param name="name">The name of the ISDBSatelliteProvider.</param>
            <returns>The satellite or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.FindISDBSatellite(System.Int32)">
            <summary>
            Find a satellite.
            </summary>
            <param name="longitude">The longitude of the ISDBSatelliteProvider.</param>
            <returns>The satellite or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.Load">
            <summary>
            Load the satellite collection from the tuning files.
            </summary>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.AddFrequency(DomainObjects.ISDBSatelliteFrequency)">
            <summary>
            Add a new frequency.
            </summary>
            <param name="newFrequency">The frequency to be added.</param>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.AddProvider(DomainObjects.ISDBSatelliteProvider)">
            <summary>
            Add a provider to the list.
            </summary>
            <param name="newProvider">The provider to be added.</param>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.FindProvider(System.String)">
            <summary>
            Find a provider.
            </summary>
            <param name="name">The name of the provider.</param>
            <returns>The provider or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.FindProvider(System.Int32,System.Int32,DomainObjects.FECRate,DomainObjects.SignalPolarization)">
            <summary>
            Find a provider given the broadcast parameters.
            </summary>
            <param name="frequency">The frequency of the provider.</param>
            <param name="symbolRate">The symbol rate of the provider.</param>
            <param name="fecRate">The FEC rate of the provider.</param>
            <param name="polarization">The polarization of the provider.</param>
            <returns>The provider or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.FindFrequency(System.Int32,DomainObjects.SignalPolarization)">
            <summary>
            Find a satelllite frequency.
            </summary>
            <param name="frequency">The frequency to be searched for.</param>
            <param name="polarization">The polariz\ation of the frequency to be searched for.</param>
            <returns>The tuning frequency or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.Unload">
            <summary>
            Create an xml file containing the frequency definitions.
            </summary>
            <returns>Null if the file was created successfully; an error message otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteProvider.EqualTo(DomainObjects.Provider,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="provider">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteProvider.Providers">
            <summary>
            Get the collection of providers.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteProvider.Azimuth">
            <summary>
            Get or set the azimuth of the satellite.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteProvider.Elevation">
            <summary>
            Get or set the elevation of the satellite.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteProvider.Longitude">
            <summary>
            Get or set the longitude of the satellite in tenths of a degree.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteProvider.EastWest">
            <summary>
            Get or set the east/west setting.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteProvider.SortKey">
            <summary>
            Get the sort key for the satellite.
            </summary>
        </member>
        <member name="T:DomainObjects.FrequencyParameters">
            <summary>
            The class that holds the run parameters for a frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.FrequencyParameters.#ctor">
            <summary>
            Initialise a new instance of the FrequencyParameters class.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.SelectedTuners">
            <summary>
            Get the selected tuners.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.FrequencyTimeout">
            <summary>
            Get or set the timeout for acquiring data for a frequency.
            </summary>
            <remarks>
            The default of 300 seconds will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.LockTimeout">
            <summary>
            Get or set the timeout for acquiring a signal lock and receiving station information.
            </summary>
            <remarks>
            The default of 10 seconds will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.Repeats">
            <summary>
            Get or set the number of repeats for collections that cannot determine data complete.
            </summary>
            <remarks>
            The default of 5 will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.CountryCode">
            <summary>
            Get or set the country code.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.Region">
            <summary>
            Get or set the region.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.LanguageCode">
            <summary>
            Get or set the language code.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.Options">
            <summary>
            Get the collection of options.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.ChannelBouquet">
            <summary>
            Get or set the channel bouquet.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.ChannelRegion">
            <summary>
            Get or set the channel region.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.CharacterSet">
            <summary>
            Get or set the character set.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.EITPid">
            <summary>
            Get or set the EIT PID number.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.MHW1Pids">
            <summary>
            Get or set the MHW1 PID numbers.
            </summary>
        </member>
        <member name="P:DomainObjects.FrequencyParameters.MHW2Pids">
            <summary>
            Get or set the MHW2 PID numbers.
            </summary>
        </member>
        <member name="T:DomainObjects.DiseqcRunParameters">
            <summary>
            The class that describes the per frequency DiSEqC run parameters.
            </summary>
        </member>
        <member name="M:DomainObjects.DiseqcRunParameters.#ctor">
            <summary>
            Initialize a new instance of the DiseqcRunParameters class.
            </summary>
        </member>
        <member name="M:DomainObjects.DiseqcRunParameters.Clone">
            <summary>
            Clone the current instance.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:DomainObjects.DiseqcRunParameters.EqualTo(DomainObjects.DiseqcRunParameters)">
            <summary>
            Compare this instance with another.
            </summary>
            <param name="otherParameters">The other instance.</param>
            <returns>Truer if they are equal; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.DiseqcSwitch">
            <summary>
            Get or set the switch setting.
            </summary>
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.DiseqcHandler">
            <summary>
            Get or set the switch handler.
            </summary>
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.Options">
            <summary>
            Get or set the list of options.
            </summary>
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.SwitchAfterPlay">
            <summary>
            Get or set the SwitchAfterPlay option.
            </summary>
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.DisableDriverDiseqc">
            <summary>
            Get or set the DisableDriverDiseqc option.
            </summary>
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.RepeatDiseqc">
            <summary>
            Get or set the RepeatDiseqc option.
            </summary>        
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.SwitchAfterTune">
            <summary>
            Get or set the SwitchAfterTune option.
            </summary>        
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.UseDiseqcCommand">
            <summary>
            Get or set the UseDiseqcCommand option.
            </summary>        
        </member>
        <member name="P:DomainObjects.DiseqcRunParameters.UseSafeDiseqc">
            <summary>
            Get or set the UseDiseqcCommand option.
            </summary>
        </member>
        <member name="T:DomainObjects.CableFrequency">
            <summary>
            The class that describes a cable frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.ChannelTuningFrequency">
            <summary>
            The class that describes any frequency that can be referenced by a channel number.
            </summary>
        </member>
        <member name="T:DomainObjects.TuningFrequency">
            <summary>
            The class that describes a tuning frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.TuningFrequency.#ctor">
            <summary>
             Initialize a new instance of the TuningFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.TuningFrequency.#ctor(System.Int32,DomainObjects.CollectionType)">
            <summary>
            Initialize a new instance of the TuningFrequency class for a specified frequency and collection type.
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="collectionType">The collection type.</param>
        </member>
        <member name="M:DomainObjects.TuningFrequency.loadBase(System.Xml.XmlReader)">
            <summary>
            Load the base properties.
            </summary>
            <param name="reader">The XmlReader to use.</param>
        </member>
        <member name="M:DomainObjects.TuningFrequency.unloadBase(System.Xml.XmlWriter)">
            <summary>
            Unload the base properties.
            </summary>
            <param name="writer">The XmlWriter to use.</param>
        </member>
        <member name="M:DomainObjects.TuningFrequency.CompareTo(System.Object)">
            <summary>
            Compare another tuning frequency with this one.
            </summary>
            <param name="compareFrequency">The tuning frequency to be compared to.</param>
            <returns>0 if the frequencies are equal, -1 if this instance is less, +1 otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.ToString">
            <summary>
            Get a string representing this instance.
            </summary>
            <returns>The description of this instance.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.GetValidFileName">
            <summary>
            Generate a valid file name for this frequency.
            </summary>
            <returns>A valid file name.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.Clone(DomainObjects.TuningFrequency)">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check this frequency for equality with another.
            </summary>
            <param name="tuningFrequency">The other frequency.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.Equals(System.Object)">
            <summary>
            Compare another object with this one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the objects are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.GetHashCode">
            <summary>
            Get a hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.FindFrequency(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency},System.Int32)">
            <summary>
            Find a frequency.
            </summary>
            <param name="frequencies">The frequency list to search.</param>
            <param name="frequency">The frequency to be located.</param>
            <returns>The frequency instance or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.HasCollectionType(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency},DomainObjects.CollectionType)">
            <summary>
            Check if a collection type is present in a list of frequencies.
            </summary>
            <param name="frequencies">The list of frequencies.</param>
            <param name="collectionType">The collection type to check for.</param>
            <returns>True if the collection type is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.HasUsedMHEG5Frequency(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency})">
            <summary>
            Check if the MHEG5 collection type has been used in a list of frequencies and the PID is present.
            </summary>
            <param name="frequencies">The list of frequencies.</param>
            <returns>True if MHEG5 is present in the list and the PID is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.HasDVBSatelliteFrequency(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency})">
            <summary>
            Check if a satellite frequency is present in a list of frequencies.
            </summary>
            <param name="frequencies">The list of frequencies.</param>
            <returns>True if a satellite frequency is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.HasDVBTerrestrialFrequency(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency})">
            <summary>
            Check if a terrestrial frequency is present in a list of frequencies.
            </summary>
            <param name="frequencies">The list of frequencies.</param>
            <returns>True if a terrestrial frequency is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.HasDVBCableFrequency(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency})">
            <summary>
            Check if a cable frequency is present in a list of frequencies.
            </summary>
            <param name="frequencies">The list of frequencies.</param>
            <returns>True if a cable frequency is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.HasAtscFrequency(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency})">
            <summary>n ATSC frequency is present in a list of frequencies.
            </summary>
            <param name="frequencies">The list of frequencies.</param>
            <returns>True if an ATSC frequency is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.HasClearQamFrequency(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency})">
            <summary>
            Check if a clear QAM frequency is present in a list of frequencies.
            </summary>
            <param name="frequencies">The list of frequencies.</param>
            <returns>True if a clear QAM frequency is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.TunersNeeded(System.Collections.ObjectModel.Collection{DomainObjects.TuningFrequency})">
            <summary>
            Check if tuners are needed for any frequency in a list of frequencies.
            </summary>
            <param name="frequencies">The list of frequencies.</param>
            <returns>True if a tuner is needed; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TuningFrequency.GetDiseqcSetting(DomainObjects.TuningFrequency)">
            <summary>
            Get the Sat>IP DiSEqC setting if relevant.
            </summary>
            <param name="frequency">The tuning frequency.</param>
            <returns>The Sat>IP setting.</returns>
        </member>
        <member name="P:DomainObjects.TuningFrequency.Frequency">
            <summary>
            Get or set the frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.CollectionType">
            <summary>
            Get or set the type of data collection requested.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.DSMCCPid">
            <summary>
            Get or set the DSMCC PID for this frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.UsageCount">
            <summary>
            Get or set the number of entries for this frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.Provider">
            <summary>
            Get or set the provider for this frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.CountryCode">
            <summary>
            Get or set the country code for this frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.TuningFileOptions">
            <summary>
            Get or set the list of options for this frequency that were loaded from the tuning file.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.Stations">
            <summary>
            Get or set the list of channels for this frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.SatIpFrontend">
            <summary>
            Get or set the Sat>IP front end to use.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.AdvancedRunParamters">
            <summary>
            Get or set the advanced run parameters for this frequency;
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.SelectedTuners">
            <summary>
            Get the selected tuners for this frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningFrequency.TunerType">
            <summary>
            Return the tuner type required by this frequency. This is overridden by derived classes to return a specific type.
            </summary>
        </member>
        <member name="M:DomainObjects.ChannelTuningFrequency.#ctor">
            <summary>
            Create a new instance of the ChannelTuningFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.ChannelTuningFrequency.Clone(DomainObjects.ChannelTuningFrequency)">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="P:DomainObjects.ChannelTuningFrequency.ChannelNumber">
            <summary>
            Get or set the channel number.
            </summary>
        </member>
        <member name="M:DomainObjects.CableFrequency.#ctor">
            <summary>
            Initialize a new instance of the CableFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.CableFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.CableFrequency.ToString">
            <summary>
            Return a string describing the frequency.
            </summary>
            <returns>A string describing the frequency.</returns>
        </member>
        <member name="M:DomainObjects.CableFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.CableFrequency.Unload(System.Xml.XmlWriter,System.String)">
            <summary>
            Create the xml definition for the frequency.
            </summary>
            <param name="writer">An xml writer instance.</param>
            <param name="fullPath">The full path of the file being created.</param>
            <returns>Null if the entry was created successfully; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.CableFrequency.SymbolRate">
            <summary>
            Get or set the symbol rate.
            </summary>
        </member>
        <member name="P:DomainObjects.CableFrequency.FEC">
            <summary>
            Get or set the FEC rate.
            </summary>
        </member>
        <member name="P:DomainObjects.CableFrequency.Modulation">
            <summary>
            Get or set the modulation.
            </summary>
        </member>
        <member name="P:DomainObjects.CableFrequency.DVBModulation">
            <summary>
            Get or set the DVB modulation.
            </summary>
        </member>
        <member name="P:DomainObjects.CableFrequency.TunerType">
            <summary>
            Returns a tuner type of cable.
            </summary>
        </member>
        <member name="T:DomainObjects.Satellite">
            <summary>
            Initialize a new instance of the Satellite class.
            </summary>
        </member>
        <member name="M:DomainObjects.Satellite.#ctor">
            <summary>
            Initialize a new instance of the Satellite class.
            </summary>
        </member>
        <member name="M:DomainObjects.Satellite.#ctor(System.String)">
            <summary>
            Initialize a new instance of the Satellite class.
            </summary>
            <param name="name">The name of the satellite.</param>
        </member>
        <member name="M:DomainObjects.Satellite.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the Satellite class.
            </summary>
            <param name="longitude">The longitude in 1/10th's of a degree. Negative for west.</param>
        </member>
        <member name="M:DomainObjects.Satellite.FindSatellite(System.String)">
            <summary>
            Find a satellite.
            </summary>
            <param name="name">The name of the Satellite.</param>
            <returns>The satellite or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Satellite.FindSatellite(System.Int32)">
            <summary>
            Find a satellite.
            </summary>
            <param name="longitude">The longitude of the Satellite.</param>
            <returns>The satellite or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Satellite.Load">
            <summary>
            Load the satellite collection from the tuning files.
            </summary>
        </member>
        <member name="M:DomainObjects.Satellite.AddFrequency(DomainObjects.SatelliteFrequency)">
            <summary>
            Add a new frequency.
            </summary>
            <param name="newFrequency">The frequency to be added.</param>
        </member>
        <member name="M:DomainObjects.Satellite.AddProvider(DomainObjects.Satellite)">
            <summary>
            Add a provider to the list.
            </summary>
            <param name="newProvider">The provider to be added.</param>
        </member>
        <member name="M:DomainObjects.Satellite.FindProvider(System.String)">
            <summary>
            Find a provider.
            </summary>
            <param name="name">The name of the provider.</param>
            <returns>The provider or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Satellite.FindProvider(System.Int32,System.Int32,DomainObjects.FECRate,DomainObjects.SignalPolarization)">
            <summary>
            Find a provider given the broadcast parameters.
            </summary>
            <param name="frequency">The frequency of the provider.</param>
            <param name="symbolRate">The symbol rate of the provider.</param>
            <param name="fecRate">The FEC rate of the provider.</param>
            <param name="polarization">The polarization of the provider.</param>
            <returns>The provider or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Satellite.FindFrequency(System.Int32,DomainObjects.SignalPolarization)">
            <summary>
            Find a satelllite frequency.
            </summary>
            <param name="frequency">The frequency to be searched for.</param>
            <param name="polarization">The polariz\ation of the frequency to be searched for.</param>
            <returns>The tuning frequency or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Satellite.EqualTo(DomainObjects.Provider,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="provider">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.Satellite.LogNetworkInfo">
            <summary>
            Log the network information
            </summary>
        </member>
        <member name="M:DomainObjects.Satellite.Unload">
            <summary>
            Create an xml file containing the frequency definitions.
            </summary>
            <returns>Null if the file was created successfully; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.Satellite.Providers">
            <summary>
            Get the collection of providers.
            </summary>
        </member>
        <member name="P:DomainObjects.Satellite.Azimuth">
            <summary>
            Get or set the azimuth of the satellite.
            </summary>
        </member>
        <member name="P:DomainObjects.Satellite.Elevation">
            <summary>
            Get or set the elevation of the satellite.
            </summary>
        </member>
        <member name="P:DomainObjects.Satellite.Longitude">
            <summary>
            Get or set the longitude of the satellite in tenths of a degree.
            </summary>
        </member>
        <member name="P:DomainObjects.Satellite.EastWest">
            <summary>
            Get or set the east/west setting.
            </summary>
        </member>
        <member name="P:DomainObjects.Satellite.SortKey">
            <summary>
            Get the sort key for the satellite.
            </summary>
        </member>
        <member name="T:DomainObjects.TunerNode">
            <summary>
            The class that describes a tuner node.
            </summary>
        </member>
        <member name="M:DomainObjects.TunerNode.#ctor(System.Int32,DomainObjects.TunerNodeType)">
            <summary>
            Intialize a new instance of the TunerNode class.
            </summary>
            <param name="nativeNodeType">The native node type.</param>
            <param name="tunerNodeType">The tuner node type.</param>
        </member>
        <member name="P:DomainObjects.TunerNode.NativeNodeType">
            <summary>
            Get the native node type.
            </summary>
        </member>
        <member name="P:DomainObjects.TunerNode.TunerNodeType">
            <summary>
            Get the tuner node type.
            </summary>
        </member>
        <member name="T:DomainObjects.DVBLogicProgramCategory">
            <summary>
            The class that describes a DVBLogic program category.
            </summary>
        </member>
        <member name="M:DomainObjects.DVBLogicProgramCategory.CheckDescription(System.String)">
            <summary>
            Check if a description contains valid DVBLogic program categories.
            </summary>
            <param name="description">The description to check.</param>
            <returns>True if the description is valid; false otherwise.</returns>
        </member>
        <member name="T:DomainObjects.EITCarouselFile">
            <summary>
            The class that describes the carousels containg EIT data.
            </summary>
        </member>
        <member name="M:DomainObjects.EITCarouselFile.#ctor">
            <summary>
            Initialize a new instance of the EITCarouselFile class.
            </summary>
        </member>
        <member name="M:DomainObjects.EITCarouselFile.FindCarousel(System.String)">
            <summary>
            Find a carousel.
            </summary>
            <param name="name">The name of the carousel.</param>
        </member>
        <member name="M:DomainObjects.EITCarouselFile.GetNameList">
            <summary>
            Get a list of all the carousel names.
            </summary>
            <returns>A list of table names.</returns>
        </member>
        <member name="M:DomainObjects.EITCarouselFile.Load">
            <summary>
            Load the carousel definitions.
            </summary>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.EITCarouselFile.Load(System.String)">
            <summary>
            Load the definitions.
            </summary>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.EITCarouselFile.Carousels">
            <summary>
            Get the collection of carousel definitions.
            </summary>
        </member>
        <member name="P:DomainObjects.EITCarouselFile.FileName">
            <summary>
            Get the standard name of the carousel file.
            </summary>
        </member>
        <member name="T:DomainObjects.ParentalRating">
            <summary>
            The class that describes a parental rating.
            </summary>
        </member>
        <member name="M:DomainObjects.ParentalRating.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a new instance of the ParentalRating class.
            </summary>
            <param name="location">The location.</param>
            <param name="system">The name of the rating system.</param>
            <param name="protocol">The collection protocol.</param>
            <param name="code">The broadcasters code for the rating.</param>
            <param name="rating">The rating.</param>
            <param name="mpaaRating">The MPAA equivalent.</param>
        </member>
        <member name="M:DomainObjects.ParentalRating.Load">
            <summary>
            Load the parental rating collection from the configuration file.
            </summary>
        </member>
        <member name="M:DomainObjects.ParentalRating.FindSystem(System.String,System.String,System.String)">
            <summary>
            Find the rating system for a rating.
            </summary>
            <param name="location">The location of the rating.</param>
            <param name="protocol">The collection protocol.</param>
            <param name="code">The broadcasters code for the rating.</param>
            <returns>The system or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ParentalRating.FindRating(System.String,System.String,System.String)">
            <summary>
            Find the rating.
            </summary>
            <param name="location">The location of the rating.</param>
            <param name="protocol">The collection protocol.</param>
            <param name="code">The broadcasters code for the rating.</param>
            <returns>The rating or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ParentalRating.FindMpaaRating(System.String,System.String,System.String)">
            <summary>
            Find the equivalent MPAA rating.
            </summary>
            <param name="location">The location of the rating.</param>
            <param name="protocol">The collection protocol.</param>
            <param name="code">The broadcasters code for the rating.</param>
            <returns>The MPPA rating or null if it cannot be located.</returns>
        </member>
        <member name="T:DomainObjects.OutputFilePlugin">
            <summary>
            The class that describes the xml DVBLogic output file.
            </summary>
        </member>
        <member name="M:DomainObjects.OutputFilePlugin.Process(System.String)">
            <summary>
            Create the file.
            </summary>
            <param name="fileName">The name of the file to be created.</param>
            <returns></returns>
        </member>
        <member name="T:DomainObjects.ISDBSatelliteFrequency">
            <summary>
            The class that describes a satellite frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteFrequency.#ctor">
            <summary>
            Initialize a new instance of the ISDBSatelliteFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteFrequency.CompareTo(System.Object)">
            <summary>
            Compare another satellite frequency with this one.
            </summary>
            <param name="compareFrequency">The tuning frequency to be compared to.</param>
            <returns>0 if the frequencies are equal, -1 if this instance is less, +1 otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteFrequency.ToString">
            <summary>
            Get a description of this satellite frequency.
            </summary>
            <returns>A string describing this frequency.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.ISDBSatelliteFrequency.Unload(System.Xml.XmlWriter,System.String)">
            <summary>
            Create the xml definition for the frequency.
            </summary>
            <param name="writer">An xml writer instance.</param>
            <param name="fullPath">The full path of the file being created.</param>
            <returns>Null if the entry was created successfully; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteFrequency.SymbolRate">
            <summary>
            Get or set the symbol rate.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteFrequency.FEC">
            <summary>
            Get or set the forward error correction system.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteFrequency.Polarization">
            <summary>
            Get or set the signal polarization.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteFrequency.SatelliteDish">
            <summary>
            Get or set the satellite dish for this frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteFrequency.DiseqcRunParamters">
            <summary>
            Get or set the DiSEqC run parameters for this frequency;
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBSatelliteFrequency.TunerType">
            <summary>
            Get the tuner type needed for this type of frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.HistoryRecord">
            <summary>
            The class that describes a history record.
            </summary>
        </member>
        <member name="M:DomainObjects.HistoryRecord.#ctor(System.DateTime)">
            <summary>
            Initialize a new instance of the HistoryRecord class.
            </summary>
            <param name="startDate">The start date and time.</param>
        </member>
        <member name="M:DomainObjects.HistoryRecord.#ctor(System.String)">
            <summary>
            Initialize a new instance of the HistoryRecord class.
            </summary>
            <param name="line">The comma separated data for the new instance.</param>
        </member>
        <member name="P:DomainObjects.HistoryRecord.Current">
            <summary>
            Get or set the current history record.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.StartDate">
            <summary>
            Get or set the start date and time of the event.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.CollectionResult">
            <summary>
            Get or set the collection result.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.CollectionCount">
            <summary>
            Get or set the collection EPG count.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.CollectionDuration">
            <summary>
            Get or set the collection time.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.LookupResult">
            <summary>
            Get or set the metadata lookup result.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.LookupRate">
            <summary>
            Get or set the metadata lookup rate. 
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.LookupDuration">
            <summary>
            Get or set the metadata lookup time.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.UpdateResult">
            <summary>
            Get or set the update result.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.UpdateAdded">
            <summary>
            Get or set the number of updates added.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.UpdateChanged">
            <summary>
            Get or set the number of updates changed.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.UpdateDuration">
            <summary>
            Get or set the update time.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.SoftwareVersion">
            <summary>
            Get the software verasion number.
            </summary>
        </member>
        <member name="P:DomainObjects.HistoryRecord.Contents">
            <summary>
            Get the fields of the record as a comma separated string.
            </summary>
        </member>
        <member name="T:DomainObjects.ConditionalAccessEntry">
            <summary>
            The class that describes conditional access data.
            </summary>
        </member>
        <member name="M:DomainObjects.ConditionalAccessEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the ConditionalAccessEntry class.
            </summary>
            <param name="systemID">The system ID.</param>
            <param name="pid">The PID.</param>
        </member>
        <member name="P:DomainObjects.ConditionalAccessEntry.SystemID">
            <summary>
            Get or set the system ID.
            </summary>
        </member>
        <member name="P:DomainObjects.ConditionalAccessEntry.PID">
            <summary>
            Get or set the PID.
            </summary>
        </member>
        <member name="T:DomainObjects.SatelliteFrequency">
            <summary>
            The class that describes a satellite frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.SatelliteFrequency.#ctor">
            <summary>
            Initialize a new instance of the SatelliteFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.SatelliteFrequency.CompareTo(System.Object)">
            <summary>
            Compare another satellite frequency with this one.
            </summary>
            <param name="compareFrequency">The tuning frequency to be compared to.</param>
            <returns>0 if the frequencies are equal, -1 if this instance is less, +1 otherwise.</returns>
        </member>
        <member name="M:DomainObjects.SatelliteFrequency.ToString">
            <summary>
            Get a description of this satellite frequency.
            </summary>
            <returns>A string describing this frequency.</returns>
        </member>
        <member name="M:DomainObjects.SatelliteFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.SatelliteFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.SatelliteFrequency.Unload(System.Xml.XmlWriter,System.String)">
            <summary>
            Create the xml definition for the frequency.
            </summary>
            <param name="writer">An xml writer instance.</param>
            <param name="fullPath">The full path of the file being created.</param>
            <returns>Null if the entry was created successfully; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.SymbolRate">
            <summary>
            Get or set the symbol rate.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.FEC">
            <summary>
            Get or set the forward error correction system.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.Polarization">
            <summary>
            Get or set the signal polarization.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.DVBPolarization">
            <summary>
            Get or set the DVB signal polarization.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.Pilot">
            <summary>
            Get or set the DVB-S2 pilot value.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.RollOff">
            <summary>
            Get or set the DVB-S2 roll-off value.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.Modulation">
            <summary>
            Get or set the modulation.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.DVBModulation">
            <summary>
            Get or set the DVB modulation.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.LNBConversion">
            <summary>
            Get or set the LNB conversion flag.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.SatelliteDish">
            <summary>
            Get or set the satellite dish for this frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.ModulationSystem">
            <summary>
            Get or set the modulation system.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.DiseqcRunParamters">
            <summary>
            Get or set the DiSEqC run parameters for this frequency;
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.IsS2">
            <summary>
            Return true if the modulation system is S2; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.IsDishNetwork">
            <summary>
            Return true if the frequency is Dish Network
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteFrequency.TunerType">
            <summary>
            Get the tuner type needed for this type of frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.TVStationType">
            <summary>
            TV Station types.
            </summary>
        </member>
        <member name="F:DomainObjects.TVStationType.Dvb">
            <summary>
            The type is DVB.
            </summary>
        </member>
        <member name="F:DomainObjects.TVStationType.Atsc">
            <summary>
            The type is ATSC.
            </summary>
        </member>
        <member name="F:DomainObjects.TVStationType.Undefined">
            <summary>
            The type is undefined.
            </summary>
        </member>
        <member name="T:DomainObjects.TunerNodeType">
            <summary>
            Tuner node types.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerNodeType.Satellite">
            <summary>
            The tuner node type for satellite.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerNodeType.Terrestrial">
            <summary>
            The tuner node type for terrestrial.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerNodeType.Cable">
            <summary>
            The tuner node type for cable.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerNodeType.ATSC">
            <summary>
            The tuner node type for ATSC.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerNodeType.ISDBS">
            <summary>
            The tuner node type for ISDB satellite.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerNodeType.ISDBT">
            <summary>
            The tuner node type for ISDB terrestrial.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerNodeType.Other">
            <summary>
            The tuner node type for undefined types.
            </summary>
        </member>
        <member name="T:DomainObjects.TunerType">
            <summary>
            Tuner types.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.Satellite">
            <summary>
            The tuner type for satellite.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.Terrestrial">
            <summary>
            The tuner type for terrestrial.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.Cable">
            <summary>
            The tuner type for cable.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.ATSC">
            <summary>
            The tuner type for ATSC terrestrial.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.ATSCCable">
            <summary>
            The tuner type for ATSC cable.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.ClearQAM">
            <summary>
            The tuner type for Clear QAM.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.ISDBS">
            <summary>
            The tuner type for ISDB-S.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.ISDBT">
            <summary>
            The tuner type for ISDB-T.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.SATIP">
            <summary>
            The tuner type for SAT>IP servers.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.File">
            <summary>
            The tuner type for file types.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.Stream">
            <summary>
            The tuner type for stream types.
            </summary>
        </member>
        <member name="F:DomainObjects.TunerType.Other">
            <summary>
            The tuner type for undefined types.
            </summary>
        </member>
        <member name="T:DomainObjects.EPGSource">
            <summary>
            EPG sources.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.MHEG5">
            <summary>
            The EPG originated from the MHEG5 protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.EIT">
            <summary>
            The EPG originated from the DVB EIT protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.OpenTV">
            <summary>
            The EPG originated from the OpenTV protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.FreeSat">
            <summary>
            The EPG originated from the FreeSat protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.MediaHighway1">
            <summary>
            The EPG originated from the MediaHighway1 protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.MediaHighway2">
            <summary>
            The EPG originated from the MediaHighway2 protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.PSIP">
            <summary>
            The EPG originated from the ATSC PSIP protocol.
            </summary>        
        </member>
        <member name="F:DomainObjects.EPGSource.DishNetwork">
            <summary>
            The EPG originated from the Dish Network EEPG protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.BellTV">
            <summary>
            The EPG originated from the Bell TV EEPG protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.EPGSource.SiehfernInfo">
            <summary>
            The EPG originated from the Siehfern Info protocol.
            </summary>
        </member>
        <member name="T:DomainObjects.CollectionType">
            <summary>
            The types of EPG collection.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.MHEG5">
            <summary>
            The collection is for the MHEG5 protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.EIT">
            <summary>
            The collection is for the DVB EIT protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.OpenTV">
            <summary>
            The collection is for the OpenTV protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.FreeSat">
            <summary>
            The collection is for the FreeSat protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.MediaHighway1">
            <summary>
            The collection is for the MediaHighway1 protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.MediaHighway2">
            <summary>
            The collection is for the MediaHighway2 protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.PSIP">
            <summary>
            The collection is for the ATSC PSIP protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.DishNetwork">
            <summary>
            The collection is for the Dish Network EEPG protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.BellTV">
            <summary>
            The collection is for the Bell TV EEPG protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.SiehfernInfo">
            <summary>
            The collection is for the Siehfern Info protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionType.NDS">
            <summary>
            The collection is for the NDS protocol.
            </summary>
        </member>
        <member name="T:DomainObjects.DiseqcSettings">
            <summary>
            The values that a diseqc switch can have.
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.None">
            <summary>
            The switch is not used
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.A">
            <summary>
            Simple A.
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.B">
            <summary>
            Simple B.
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.AA">
            <summary>
            Use satellite A port A (Disqec 1.0 committed switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.AB">
            <summary>
            Use satellite A port B (Disqec 1.0 committed switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BA">
            <summary>
            Use satellite B port A (Disqec 1.0 committed switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BB">
            <summary>
            Use satellite B port B (Disqec 1.0 committed switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT1">
            <summary>
            Use port 1 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT2">
            <summary>
            Use port 2 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT3">
            <summary>
            Use port 3 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT4">
            <summary>
            Use port 4 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT5">
            <summary>
            Use port 5 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT6">
            <summary>
            Use port 6 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT7">
            <summary>
            Use port 7 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT8">
            <summary>
            Use port 8 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT9">
            <summary>
            Use port 9 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT10">
            <summary>
            Use port 10 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT11">
            <summary>
            Use port 11 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT12">
            <summary>
            Use port 12 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT13">
            <summary>
            Use port 13 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT14">
            <summary>
            Use port 14 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT15">
            <summary>
            Use port 15 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.PORT16">
            <summary>
            Use port 16 (Disqec 1.1 uncommitted switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.AAPORT1">
            <summary>
            Use committed port AA uncommitted port 1 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.ABPORT1">
            <summary>
            Use committed port AB uncommitted port 1 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BAPORT1">
            <summary>
            Use committed port BA uncommitted port 1 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BBPORT1">
            <summary>
            Use committed port BB uncommitted port 1 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.AAPORT2">
            <summary>
            Use committed port AA uncommitted port 2 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.ABPORT2">
            <summary>
            Use committed port AB uncommitted port 2 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BAPORT2">
            <summary>
            Use committed port BA uncommitted port 2 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BBPORT2">
            <summary>
            Use committed port BB uncommitted port 2 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.AAPORT3">
            <summary>
            Use committed port AA uncommitted port 3 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.ABPORT3">
            <summary>
            Use committed port AB uncommitted port 3 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BAPORT3">
            <summary>
            Use committed port BA uncommitted port 3 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BBPORT3">
            <summary>
            Use committed port BB uncommitted port 3 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.AAPORT4">
            <summary>
            Use committed port AA uncommitted port 4 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.ABPORT4">
            <summary>
            Use committed port AB uncommitted port 4 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BAPORT4">
            <summary>
            Use committed port BA uncommitted port 4 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="F:DomainObjects.DiseqcSettings.BBPORT4">
            <summary>
            Use committed port BB uncommitted port 4 (Combination committed/uncommited switch)
            </summary>
        </member>
        <member name="T:DomainObjects.DataState">
            <summary>
            The state of a data update control.
            </summary>
        </member>
        <member name="F:DomainObjects.DataState.HasErrors">
            <summary>
            There are unresolved errors.
            </summary>
        </member>
        <member name="F:DomainObjects.DataState.NotChanged">
            <summary>
            The data does not need saving.
            </summary>
        </member>
        <member name="F:DomainObjects.DataState.Changed">
            <summary>
            The data needs saving.
            </summary>
        </member>
        <member name="T:DomainObjects.ParameterSet">
            <summary>
            The function of the parameters.
            </summary>
        </member>
        <member name="F:DomainObjects.ParameterSet.Collector">
            <summary>
            The parameters are used by the Collector.
            </summary>
        </member>
        <member name="F:DomainObjects.ParameterSet.Plugin">
            <summary>
            The parameters are used by the DVBLogic plugin.
            </summary>
        </member>
        <member name="T:DomainObjects.RunType">
            <summary>
            The type of run.
            </summary>
        </member>
        <member name="F:DomainObjects.RunType.Collection">
            <summary>
            The parameters are being loaded to run a collection.
            </summary>
        </member>
        <member name="F:DomainObjects.RunType.Centre">
            <summary>
            The parameters are being loaded into EPG Centre.
            </summary>
        </member>
        <member name="T:DomainObjects.MatchMethod">
            <summary>
            The matching method for lookups.
            </summary>
        </member>
        <member name="F:DomainObjects.MatchMethod.Exact">
            <summary>
            The title must match exactly.
            </summary>
        </member>
        <member name="F:DomainObjects.MatchMethod.Contains">
            <summary>
            The title must contain the string.
            </summary>
        </member>
        <member name="F:DomainObjects.MatchMethod.Nearest">
            <summary>
            The title must be the nearest match to the string.
            </summary>
        </member>
        <member name="T:DomainObjects.EpisodeSearchPriority">
            <summary>
            The search priority for TV series episodes.
            </summary>
        </member>
        <member name="F:DomainObjects.EpisodeSearchPriority.SeasonEpisode">
            <summary>
            The season and episode numbers are the priority when searching for an episode.
            </summary>
        </member>
        <member name="F:DomainObjects.EpisodeSearchPriority.Subtitle">
            <summary>
            The subtitle is the priority when searching for an episode.
            </summary>
        </member>
        <member name="T:DomainObjects.ChannelMergeMethod">
            <summary>
            The merge method for channel update.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelMergeMethod.None">
            <summary>
            No matching.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelMergeMethod.Name">
            <summary>
            Match on station name.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelMergeMethod.Number">
            <summary>
            Match on channel number.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelMergeMethod.NameNumber">
            <summary>
            Match on channel name and number.
            </summary>
        </member>
        <member name="T:DomainObjects.ChannelEPGScanner">
            <summary>
            The EPG scan method for channel update.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelEPGScanner.None">
            <summary>
            No scanning.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelEPGScanner.Default">
            <summary>
            Default scanning.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelEPGScanner.EPGCollector">
            <summary>
            Scan using EPG Collector.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelEPGScanner.EITScanner">
            <summary>
            Scan using EIT scanner.
            </summary>
        </member>
        <member name="F:DomainObjects.ChannelEPGScanner.Xmltv">
            <summary>
            XMLTV epg.
            </summary> 
        </member>
        <member name="T:DomainObjects.ExitCode">
            <summary>
            Program exit codes.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.OK">
            <summary>
            The run finished normally.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.NoDVBTuners">
            <summary>
            There are no suitable tuners installed.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.ParameterFileNotFound">
            <summary>
            The ini file cannot be opened.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.ParameterError">
            <summary>
            There is an error in the ini file.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.CommandLineWrong">
            <summary>
            The command line is incorrect.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.SoftwareException">
            <summary>
            A software exception has occurred.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.EPGDataIncomplete">
            <summary>
            Not all EPG data has been collected.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.AbandonedByUser">
            <summary>
            The user abandoned the run.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.ParameterTunerMismatch">
            <summary>
            The ini file does not match the hardware configuration.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.LogFileNotAvailable">
            <summary>
            The log file cannot be written.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.SomeFrequenciesNotProcessed">
            <summary>
            Some frequencies could not be processed.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.OutputFileNotCreated">
            <summary>
            The output file could not be created.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.SimulationFileError">
            <summary>
            The simulation file could not be located or failed to load.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.NoDataCollected">
            <summary>
            No data was collected.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.NoBDATunerFilter">
            <summary>
            The tuner filter could not be loaded.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.HardwareFilterChainNotBuilt">
            <summary>
            The hardware filter chain could not be created.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.PluginNotStarted">
            <summary>
            The DVBLogic plugin could not start.
            </summary>
        </member>
        <member name="F:DomainObjects.ExitCode.WMCUtilityFailed">
            <summary>
            The WMCUtility program has failed.
            </summary>
        </member>
        <member name="T:DomainObjects.DataPrecedence">
            <summary>
            The precedence of data for an import files.
            </summary>
        </member>
        <member name="F:DomainObjects.DataPrecedence.File">
            <summary>
            The file data takes precedence over the broadcast data.
            </summary>
        </member>
        <member name="F:DomainObjects.DataPrecedence.Broadcast">
            <summary>
            The broadcast data takes precedence over the file data.
            </summary>
        </member>
        <member name="F:DomainObjects.DataPrecedence.ImportAppend">
            <summary>
            The imported data is appended to the broadcast data.
            </summary>
        </member>
        <member name="F:DomainObjects.DataPrecedence.ImportReplace">
            <summary>
            The imported data replaces broadcast data.
            </summary>
        </member>
        <member name="T:DomainObjects.XmltvIdFormat">
            <summary>
            The format of the ID attribute in an xmltv import file.
            </summary>
        </member>
        <member name="F:DomainObjects.XmltvIdFormat.Undefined">
            <summary>
            The id attribute has no specific format.
            </summary>
        </member>
        <member name="F:DomainObjects.XmltvIdFormat.ServiceId">
            <summary>
            The id attribue is the service id.
            </summary>
        </member>
        <member name="F:DomainObjects.XmltvIdFormat.UserChannelNumber">
            <summary>
            The id attribute is the user channel number.
            </summary>
        </member>
        <member name="F:DomainObjects.XmltvIdFormat.FullChannelId">
            <summary>
            The id attribute contains the full channel identification (ie nid:tid:sid:name).
            </summary>
        </member>
        <member name="F:DomainObjects.XmltvIdFormat.Name">
            <summary>
            The id attribute contains the name of the channel.
            </summary>
        </member>
        <member name="F:DomainObjects.XmltvIdFormat.Zap2ItAtsc">
            <summary>
            The id attribute contains the Zap2it ATSC string.
            </summary>
        </member>
        <member name="T:DomainObjects.CollectionSpan">
            <summary>
            The amount of data a collection controller collects.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionSpan.AllData">
            <summary>
            The controller collects all possible data.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionSpan.StationsOnly">
            <summary>
            The controller collects only the station data.
            </summary>
        </member>
        <member name="F:DomainObjects.CollectionSpan.ChannelsOnly">
            <summary>
            The controller collects only the station and/or channel data.
            </summary>
        </member>
        <member name="T:DomainObjects.TextLocation">
            <summary>
            The location of a text substring.
            </summary>
        </member>
        <member name="F:DomainObjects.TextLocation.Start">
            <summary>
            The substring is at the start of the text.
            </summary>
        </member>
        <member name="F:DomainObjects.TextLocation.End">
            <summary>
            The substring is at the end of the text.
            </summary>
        </member>
        <member name="F:DomainObjects.TextLocation.Anywhere">
            <summary>
            The substring can occur anywhere.
            </summary>
        </member>
        <member name="T:DomainObjects.TextReplacementMode">
            <summary>
            The method used to replace text.
            </summary>
        </member>
        <member name="F:DomainObjects.TextReplacementMode.TextOnly">
            <summary>
            Replace only the specified text.
            </summary>
        </member>
        <member name="F:DomainObjects.TextReplacementMode.TextAndFollowing">
            <summary>
            Replace the specified text plus everything that follows.
            </summary>
        </member>
        <member name="F:DomainObjects.TextReplacementMode.TextAndPreceeding">
            <summary>
            Replace the specified text plus everything that preceeded it.
            </summary>
        </member>
        <member name="F:DomainObjects.TextReplacementMode.Everything">
            <summary>
            Replace the specified text plus everything else.
            </summary>
        </member>
        <member name="T:DomainObjects.LookupImageType">
            <summary>
            The metadata lookup image type.
            </summary>
        </member>
        <member name="F:DomainObjects.LookupImageType.Thumbnail">
            <summary>
            Type is thumbnail.
            </summary>
        </member>
        <member name="F:DomainObjects.LookupImageType.Poster">
            <summary>
            Type is poster.
            </summary>
        </member>
        <member name="F:DomainObjects.LookupImageType.Banner">
            <summary>
            Type is banner.
            </summary>
        </member>
        <member name="F:DomainObjects.LookupImageType.Fanart">
            <summary>
            Type is fanart.
            </summary>
        </member>
        <member name="F:DomainObjects.LookupImageType.SmallPoster">
            <summary>
            Type is small poster.
            </summary>
        </member>
        <member name="F:DomainObjects.LookupImageType.SmallFanart">
            <summary>
            Type is small banner.
            </summary>
        </member>
        <member name="F:DomainObjects.LookupImageType.None">
            <summary>
            No image downloaded.
            </summary>
        </member>
        <member name="T:DomainObjects.ServiceType">
            <summary>
            The service type of a service.
            </summary>
        </member>
        <member name="F:DomainObjects.ServiceType.Satellite">
            <summary>
            Type is satellite.
            </summary>
        </member>
        <member name="F:DomainObjects.ServiceType.Terrestrial">
            <summary>
            Type is terrestrial.
            </summary>
        </member>
        <member name="F:DomainObjects.ServiceType.Cable">
            <summary>
            Type is cable.
            </summary>
        </member>
        <member name="T:DomainObjects.StreamProtocol">
            <summary>
            The protocols supported by stream collections.
            </summary>
        </member>
        <member name="F:DomainObjects.StreamProtocol.Rtsp">
            <summary>
            The protocol is RTSP.
            </summary>
        </member>
        <member name="F:DomainObjects.StreamProtocol.Rtp">
            <summary>
            The protocol is RTP/RTCP.
            </summary>
        </member>
        <member name="F:DomainObjects.StreamProtocol.Udp">
            <summary>
            The protocol is UDP.
            </summary>
        </member>
        <member name="F:DomainObjects.StreamProtocol.Http">
            <summary>
            The protocol is HTTP.
            </summary>
        </member>
        <member name="T:DomainObjects.CharacterSetUsage">
            <summary>
            The methods used to select a character set
            </summary>
        </member>
        <member name="F:DomainObjects.CharacterSetUsage.NotUsed">
            <summary>
            The character set has not been used.
            </summary>
        </member>
        <member name="F:DomainObjects.CharacterSetUsage.Default">
            <summary>
            The default method was used.
            </summary>
        </member>
        <member name="F:DomainObjects.CharacterSetUsage.Broadcast">
            <summary>
            The character set was determined by the data broadcast.
            </summary>
        </member>
        <member name="F:DomainObjects.CharacterSetUsage.User">
            <summary>
            The character set was determined by a user parameter.
            </summary>
        </member>
        <member name="T:DomainObjects.OptionName">
            <summary>
            The identifiers used with the Option parameter.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.AcceptBreaks">
            <summary>
            Don't log breaks in the data.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.AddSeasonEpisodeToDesc">
            <summary>
            Add season/episode numbers to description.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.AutoMapEpg">
            <summary>
            Autmatically map the data to the channels.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.ChannelIdFullName">
            <summary>
            Output the full name as the identity.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.ChannelIdSeqNo">
            <summary>
            Output a sequential number as the identity.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.ChannelIdSid">
            <summary>
            Output the service ID as the identity.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.CheckForRepeats">
            <summary>
            Check for programme repeats.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.CreateAdTag">
            <summary>
            Create an audio description tag.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.CreateArChannels">
            <summary>
            Create rhe area/region cross reference file.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.CreateBrChannels">
            <summary>
            Create the Bladerunner file.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.CreateMissingChannels">
            <summary>
            Create channels that don't appear in the SDT.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.CreatePlexEpisodeNumTag">
            <summary>
            Create a Plex compatible episode-num tag in XMLTV files.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.CreateSageTvFrq">
            <summary>
            Create the SageTV frequency file.
            </summary>        
        </member>
        <member name="F:DomainObjects.OptionName.CustomCategoryOverride">
            <summary>
            Custom categories override the broadcasters categories.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.DisableDriverDiseqc">
            <summary>
            Disable the drivers DiSEqc commands.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.DisableInbandLoader">
            <summary>
            Disable the WMC guide loader.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.DuplicateSameChannels">
            <summary>
            Duplicate data for channels with the same name.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.DvbViewerClear">
            <summary>
            Clear the DVBViewer before loading.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.DvbViewerImport">
            <summary>
            Import the data to DVBViewer.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.DvbViewerRecSvcImport">
            <summary>
            Import the data to the DVBViewer Recording Service.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.DvbViewerSubtitleVisible">
            <summary>
            Make subtitles visible in the DVBViewer EPG.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.EitDoneOnCount">
            <summary>
            EIT collections finish on record count.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.ElementPerTag">
            <summary>
            Ouput each element of a category in a separate xmltv tag.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.FormatConvert">
            <summary>
            Convert EIT format bytes.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.FormatConvertTable">
            <summary>
            Convert EIT format bytes using a conversion table.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.FormatRemove">
            <summary>
            Remove EIT format bytes.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.FormatReplace">
            <summary>
            Replace EIT format bytes with a space.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.IgnoreWmcRecordings">
            <summary>
            Ignore WMC recordings when checking for repeats.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.NoDataNoFile">
            <summary>
            Ensure no output file if no data collected.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.NoEpisodeTag">
            <summary>
            Don't create an episode tag.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.NoLogExcluded">
            <summary>
            Don't use the keyboard during the collection process.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.NoRemoveData">
            <summary>
            Don't remove data from descriptions.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.NoSimulcastRepeats">
            <summary>
            Dont check simulcast channels for repeats.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.NoWmcDummyAffiliates">
            <summary>
            Don't create dummy WMC affiliates.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.OmitPartNumber">
            <summary>
            Omit the part number from the xmltv episode tag.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.PluginImport">
            <summary>
            Import the data to DVBLogic.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.PrefixDescriptionWithAirDate">
            <summary>
            Prepend air date to description.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.PrefixSubtitleWithSeasonEpisode">
            <summary>
            Prepend season and episode number to subtitle.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.ProcessAllStations">
            <summary>
            Process all channels irrespective of type.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.RepeatDiseqc">
            <summary>
            Repeat DiSEqC commands if they fail.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.RoundTime">
            <summary>
            Round programme times.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.RunFromService">
            <summary>
            Run the collection process as a Windows service.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.RunWmcTasks">
            <summary>
            Run the WMC tasks for reindexing and PVR scheduling after import.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.SageTvOmitNoEpg">
            <summary>
            Don't output to the SageTV file if a channel has no EPG data.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.SetXmltvPreviouslyShownDefault">
            <summary>
            Set the previously shown XMLTV tag to a default date if it is present but empty.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.SidMatchOnly">
            <summary>
            Use SID only to match EPG data with channel.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.StoreStationInfo">
            <summary>
            Save the channel information.
            </summary>        
        </member>
        <member name="F:DomainObjects.OptionName.SwitchAfterPlay">
            <summary>
            Change the DiSEqC switch after starting the DirectShow graph.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.SwitchAfterTune">
            <summary>
            Change the DiSEqC switch after tuning the frequency.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.TcRelevantOnly">
            <summary>
            Only terrestrial channels are relevant.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseBroadcastCp">
            <summary>
            Use the codepage from the broadcast.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseBsepg">
            <summary>
            Create an XMLTV file suitable for BSEPG.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseChannelId">
            <summary>
            Use the channel ID as the idfentity.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseContentSubtype">
            <summary>
            Use the content subtype when processing content type.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseDescAsCategory">
            <summary>
            Use the programme description as the category.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseDescAsSubtitle">
            <summary>
            Use the programme description as the subtitle.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseDiseqcCommand">
            <summary>
            Use DiSEqC commands to change the switch.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseDvbViewer">
            <summary>
            Export to DVBViewer.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseFreeSatTables">
            <summary>
            Use FreeSat tables to decode compressed EIT data.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseImage">
            <summary>
            Download station images.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseLcn">
            <summary>
            Use the logical channel number as the identity.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseNoDesc">
            <summary>
            Ignore the programme description.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseNumericCrid">
            <summary>
            Use the numeric part of the CRID as the eisode identifier.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseRawCrid">
            <summary>
            Use the whole CRID as the episode identifier.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseSafeDiseqc">
            <summary>
            Only change the DiSEqC switch if the tuner is not in use.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseStoredStationInfo">
            <summary>
            Use the stored channel information in place of the broadcast data.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseWmcRepeatCheck">
            <summary>
            Use the in-built WMC repeat checking with the programme titles.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.UseWmcRepeatCheckBroadcast">
            <summary>
            Use the in-built WMC repeat checking with broadcaster references.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.ValidEpisodeTag">
            <summary>
            Only create valid episode tags.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.VBoxEpisodeTag">
            <summary>
            Only a VBox compatible episode tags.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.WmcImport">
            <summary>
            Import the data to WMC.
            </summary>
        </member>
        <member name="F:DomainObjects.OptionName.WmcStarSpecial">
            <summary>
            Mark 4 star programmes as special for WMC.
            </summary>
        </member>
        <member name="T:DomainObjects.TraceName">
            <summary>
            The identifiers used with the TraceId parameter.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.AddChannel">
            <summary>
            Log new channels.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.Bda">
            <summary>
            Log BDA information.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.BdaPidMap">
            <summary>
            Log BDA pid mapping.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.BdaSigStats">
            <summary>
            Log BDA signal statistics.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.BellTvSections">
            <summary>
            Dump BellTV sections.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.BouquetSections">
            <summary>
            Log the bouquet data.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.ContinuityErrors">
            <summary>
            Log continuity errors.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DescriptorD3">
            <summary>
            Log the D3 descriptor.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DishNetworkSections">
            <summary>
            Log Dish Network data.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DsmccComplete">
            <summary>
            Log the completion status of DSMCC blocks.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DsmccDirLayout">
            <summary>
            Log the DSMCC directory layout.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DsmccDumpFiles">
            <summary>
            Log the contents of DSMCC files.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DsmccFile">
            <summary>
            Log the contents of the DSMCC EPG files.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DsmccModules">
            <summary>
            Log the DSMCC modules.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DsmccRecLayout">
            <summary>
            Log the DSMCC EPG fields.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DsmccRecord">
            <summary>
            Log the DSMCC records.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DumpCategorySections">
            <summary>
            Dump the MHW1/2 category data.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DumpChannelSections">
            <summary>
            Dump the MHW1/2 channel data.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DumpSummarySections">
            <summary>
            Dump the MHW1/2 summary sections.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DumpTitleSections">
            <summary>
            Dump the MHW1/2 title sections.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.DuplicatesFlagged">
            <summary>
            Log programme repeats.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.EitControlBytes">
            <summary>
            Log the EIT format control bytes.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.FreeSatSections">
            <summary>
            Dump the FreeSat data.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.GenericDescriptor">
            <summary>
            Log generic descriptors.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.GenericDescriptorOnly">
            <summary>
            Log only generic descriptors.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.GenericOpenTvRecord">
            <summary>
            Only log the protocol for OpenTV.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.LookupName">
            <summary>
            Log metadata lookup results.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.Lookups">
            <summary>
            Log metadata lookup results for specified name.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.LookupsDetail">
            <summary>
            Log metadata lookup details.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.LookupsError">
            <summary>
            Log metadata lookup errors.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.Mpeg2Packets">
            <summary>
            Dump the MPEG2 data packets.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.Mpeg2SectionsStored">
            <summary>
            Log the MPEG2 sections stored and ignored.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.PidHandler">
            <summary>
            Log the PID's used.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.PidHandlerBlocks">
            <summary>
            Log the data blocks created by the PID handlers.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.PidHandlerSi">
            <summary>
            Log the PID activity for service information.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.PidNumbers">
            <summary>
            Log the PID numbers used.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.PngNames">
            <summary>
            Log the names of DSMCC PNG files.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.Protocol">
            <summary>
            Dump the protocol.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.PsiFilter">
            <summary>
            Set the PSIFilter up for logging.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.ServiceEntries">
            <summary>
            Log the service entries in Australian MHEG5 data.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.TransportPackets">
            <summary>
            Log the transport packets.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.TsFilePackets">
            <summary>
            Log the packets from a transport stream file.
            </summary>
        </member>
        <member name="F:DomainObjects.TraceName.TsPidPackets">
            <summary>
            Log the packets if they are relevant.
            </summary>
        </member>
        <member name="T:DomainObjects.DebugName">
            <summary>
            The identifiers used with the DebugId parameter.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.AdjustStartTimes">
            <summary>
            Adjust programme start times.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.BitPattern">
            <summary>
            Dump OpenTV data as a bit pattern.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.CanalSatEpg">
            <summary>
            Extract the CanalSat zip files from the DSMCC carousel.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.Carousels">
            <summary>
            Process unknown carousels.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.CatXref">
            <summary>
            Generate a category cross-reference.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.CreateSatIni">
            <summary>
            Create a satellite reference file.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.DontLogGaps">
            <summary>
            Create channels if they don't exist.
            </summary>        
        </member>
        <member name="F:DomainObjects.DebugName.DontLogOverlaps">
            <summary>
            Don't log programme start time overlaps.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.DsmccIgnoreIncomplete">
            <summary>
            Finish MHEG5 collections even if the data is incomplete.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.DumpAitSections">
            <summary>
            Dump AIT sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.DumpEitSections">
            <summary>
            Dump EIT sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.DumpOpenTvSummarySections">
            <summary>
            Dump OpenTV summary sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.DumpSdtBlock">
            <summary>
            Dump the service description data blocks.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.EitZipContents">
            <summary>
            Log the contents of an EIT Zip file.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.EpisodeResult">
            <summary>
            Log the result of an episode metadata lookup.
            </summary>        
        </member>
        <member name="F:DomainObjects.DebugName.EventInformationTable">
            <summary>
            Dump the ATSC event information table.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.ExtendedLogFile">
            <summary>
            Create an extended log file (up to 64mb).
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.ExtendedTextTable">
            <summary>
            Dump the ATSC extended text table.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.GetOtherSections">
            <summary>
            Dump unspecified FeeSat sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.IgnoreXmlChars">
            <summary>
            Switch off the xml character checking.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogBrokenTitles">
            <summary>
            Log titles and descriptions that should be combined.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogCaData">
            <summary>
            Log the CA data blocks.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogCatEvent">
            <summary>
            Log an OpenTV category.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogChannels">
            <summary>
            Log all channels.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogChannelData">
            <summary>
            Log the channel information in detail.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogChannelGroups">
            <summary>
            Log the channel groups (OpenTV only).
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogCodepages">
            <summary>
            Log the codepages used.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogDescriptions">
            <summary>
            Log the programme descriptions.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogDescriptorData">
            <summary>
            Log descriptors.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogDvbViewerImport">
            <summary>
            Log the progress of the DVBViewer import process.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogEpgLinkage">
            <summary>
            Log EPG linkage information.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogEpisodeInfo">
            <summary>
            Log episode information.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogExtendedDescriptions">
            <summary>
            Log OpenTV extended descriptions.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogHuffman">
            <summary>
            Log escaped Huffman strings.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogJsonStructure">
            <summary>
            Log a JSON structure.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogJsonText">
            <summary>
            Log JSON text.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogLevel">
            <summary>
            Set the Sat>IP log level.
            </summary>        
        </member>
        <member name="F:DomainObjects.DebugName.LogIncompleteEit">
            <summary>
            Log incomplete EIT entries.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogMergedChannels">
            <summary>
            Log merged channels.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogMxfSeries">
            <summary>
            Log the series information from an MXF file.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogMxfWarnings">
            <summary>
            Log the warninga when creating an MXF file.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogNetwork">
            <summary>
            Log the network data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogNetworkMap">
            <summary>
            Log the network map.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogOriginal">
            <summary>
            Log the BellTV or Dish Network original description.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogOutOfScope">
            <summary>
            Log descriptors that are out of scope.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogPmt">
            <summary>
            Log the program map table.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogPsipExtendedText">
            <summary>
            Dump the ATSC extended text data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogResponseKeys">
            <summary>
            Log the response keys from lookup requests.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogSdGenres">
            <summary>
            Log the use of Schedules Direct genres.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogSdPrefixes">
            <summary>
            Log the use of Schedules Direct prefixes.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogSeIds">
            <summary>
            Log the use of season/episode Id's.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogSeCrids">
            <summary>
            Log the use of season/episode CRId's.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogStationType">
            <summary>
            Log the station type.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogStreamInfo">
            <summary>
            Log the stream data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogTitles">
            <summary>
            Log the programme titles.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogUndefinedRecords">
            <summary>
            Log undefined OpenTV records.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.LogUnknownRecords">
            <summary>
            Log unknown OpenTV records.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.MasterGuideTable">
            <summary>
            Dump the ATSC master guide table.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.Mheg5Pid">
            <summary>
            Set the MHEG5 PID.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.Mhw1CategorySections">
            <summary>
            Dump MHW1 category sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.Mhw2SummaryMissing">
            <summary>
            Log missing MHW2 summary sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.Mhw2Unknown">
            <summary>
            Log unknown MHW2 sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.MxfNoDefAirDate">
            <summary>
            Don't output a default original air date of the programme start time.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.MxfNoNewProgEntry">
            <summary>
            Don't output a separate program entry if a program is flagged as new.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NagraBlocks">
            <summary>
            Dump NagraGuide data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NDS">
            <summary>
            Process NDS data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NDSBinXml">
            <summary>
            Log NDS binXml data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NDSBinXmlBlocks">
            <summary>
            Log NDS binXml block data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NDSSqlEvents">
            <summary>
            Log NDS SQL event data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NDSSqlGroups">
            <summary>
            Log NDS SQL group data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NDSSqlServices">
            <summary>
            Log NDS SQL service data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NDSSqlStrings">
            <summary>
            Log NDS SQL string data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NitSections">
            <summary>
            Dump network information table sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NotQuiet">
            <summary>
            Don't output log messages to the console window.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.NoWmc">
            <summary>
            WMC is not present.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.OtherSections">
            <summary>
            Dump the data from other sections.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.RatingRegionTable">
            <summary>
            Dump the ATSC rating region data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.Replays">
            <summary>
            Log replays.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.RetainZipData">
            <summary>
            Don't delete the EIT carousel zip data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.SchedulesDirect">
            <summary>
            Schedules Direct testing.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.ShowColons">
            <summary>
            Log multiple colons in OpenTV data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.SiehfernBlocks">
            <summary>
            Dump SiehFern data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.SiehfernChannelBlocks">
            <summary>
            Dump SiehFern channel data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.SiehfernEpgBlocks">
            <summary>
            Dump SiehFern EPG blocks.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.SiehfernEpgDetail">
            <summary>
            Dump SiehFern EPG details.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.StackTrace">
            <summary>
            Log the contents of the stack.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.TitleSection">
            <summary>
            Dump the OpenTV title data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.UnknownDescriptors">
            <summary>
            Log unknown descriptors.
            </summary>        
        </member>
        <member name="F:DomainObjects.DebugName.UpdateChannels">
            <summary>
            Update the channel information.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.UpdateStation">
            <summary>
            Update the station information.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.UseDvbLink">
            <summary>
            Use DVBLink virtual tuners.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.UseSpecificNp">
            <summary>
            Use the specific network provider.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.VirtualChannelTable">
            <summary>
            Dump the ATSC virtual channel data.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.WmcNewChannels">
            <summary>
            Create new WMC channels if they don't exist.
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.WmcUniqueProgramme">
            <summary>
            Create one MXF programme for each unique programme
            </summary>
        </member>
        <member name="F:DomainObjects.DebugName.XmltvNoDefPlayDate">
            <summary>
            Don't set a default date if previously-shown has no value
            </summary>
        </member>
        <member name="T:DomainObjects.EqualityLevel">
            <summary>
            The level to be used in equality testing.
            </summary>
        </member>
        <member name="F:DomainObjects.EqualityLevel.Entirely">
            <summary>
            All properties must be checked.
            </summary>
        </member>
        <member name="F:DomainObjects.EqualityLevel.Identity">
            <summary>
            Only identification fields are checked.
            </summary>
        </member>
        <member name="T:DomainObjects.StreamServerType">
            <summary>
            The streaming server type.
            </summary>
        </member>
        <member name="F:DomainObjects.StreamServerType.Any">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:DomainObjects.StreamServerType.SatIP">
            <summary>
            Sat>IP.
            </summary>
        </member>
        <member name="F:DomainObjects.StreamServerType.VBox">
            <summary>
            VBox.
            </summary>
        </member>
        <member name="T:DomainObjects.EventCategoryMode">
            <summary>
            The mode used to extract the correct event category depending on the output.
            </summary>
        </member>
        <member name="F:DomainObjects.EventCategoryMode.Xmltv">
            <summary>
            The category is for an XMLTV file
            </summary>
        </member>
        <member name="F:DomainObjects.EventCategoryMode.Wmc">
            <summary>
            The category is for Windows Media Centre 
            </summary>
        </member>
        <member name="F:DomainObjects.EventCategoryMode.DvbLogic">
            <summary>
            The category is for the DVBLogic plugin
            </summary>
        </member>
        <member name="F:DomainObjects.EventCategoryMode.DvbViewer">
            <summary>
            The category is for DVBViewer
            </summary>
        </member>
        <member name="T:DomainObjects.ImportImageMode">
            <summary>
            The mode used to extract the correct event category depending on the output.
            </summary>
        </member>
        <member name="F:DomainObjects.ImportImageMode.None">
            <summary>
            Do not download images
            </summary>
        </member>
        <member name="F:DomainObjects.ImportImageMode.Channels">
            <summary>
            Download just channel images.
            </summary>
        </member>
        <member name="F:DomainObjects.ImportImageMode.Programmes">
            <summary>
            Download just programme images.
            </summary>
        </member>
        <member name="F:DomainObjects.ImportImageMode.Both">
            <summary>
            Download both channel and programme images.
            </summary>
        </member>
        <member name="T:DomainObjects.RunParameters">
            <summary>
            The class that processes the initialization file.
            </summary>
        </member>
        <member name="M:DomainObjects.RunParameters.#ctor(DomainObjects.ParameterSet,DomainObjects.RunType)">
            <summary>
            Initialise a new instance of the RunParameters class.
            </summary>
            <param name="parameterSet">The type of parameters this instance will hold.</param>
            <param name="runType">The type of run processing the parameters ie collection or EPG Centre.</param>
        </member>
        <member name="M:DomainObjects.RunParameters.Process(System.String)">
            <summary>
            Process a parameter file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>True if the parameters are valid; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.RunParameters.Save(System.String)">
            <summary>
            Write the current parameter set to a file.
            </summary>
            <param name="fileName">The full name of the file.</param>
            <returns>Null if output was successful; a message identifying the error otherwise.</returns>
        </member>
        <member name="M:DomainObjects.RunParameters.Clone">
            <summary>
            Create a copy of this instance.
            </summary>
            <returns>A new instance with the same properties as the current instance.</returns>
        </member>
        <member name="M:DomainObjects.RunParameters.HasDataChanged(DomainObjects.RunParameters)">
            <summary>
            Check if there have been and data changes.
            </summary>
            <param name="oldParameters">The original parameter values.</param>
            <returns>HasChanged if the data has changed; NotChanged otherwise.</returns>
        </member>
        <member name="M:DomainObjects.RunParameters.GetLegalFileName(System.String,System.Char)">
            <summary>
            Get a legal filename string.
            </summary>
            <param name="fileName">The original file name.</param>
            <param name="replacer">The character to replace illegal characters.</param>
            <returns>The legal file name.</returns>
        </member>
        <member name="M:DomainObjects.RunParameters.CloseHttpProxy">
            <summary>
            Close the HTTP proxy process.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.IsWindows">
            <summary>
            Return true if running under any version of Windows.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.IsWinXp">
            <summary>
            Return true if running on Windows XP; otherwise false.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.IsWin7OrLater">
            <summary>
            Return true if Win7 or later; otherwise false. 
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.Is64Bit">
            <summary>
            Return true if running under 64-bit Windows
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.IsMono">
            <summary>
            Return true if running under Mono or the command line requests compatability.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.MonoVersion">
            <summary>
            Get the Mono version number.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.IsWine">
            <summary>
            Return true if running under Wine.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.SystemVersion">
            <summary>
            Get the system version number.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.AssemblyVersion">
            <summary>
            Get the full assembly version number.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.Fixpack">
            <summary>
            Get the current fixpack number.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.Role">
            <summary>
            Get the privilege level.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.Instance">
            <summary>
            Get or set the current run parameters instance.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.BaseDirectory">
            <summary>
            Get or set the application base directory.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.DataDirectory">
            <summary>
            Get the application data directory.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ConfigDirectory">
            <summary>
            Get the application configuration directory.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ImagePath">
            <summary>
            Get othe base path for lookup images.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.StreamLogFileName">
            <summary>
            Get the full name of the stream logging file. 
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.SatIpUniqueIdentifiers">
            <summary>
            Get the list of Sat>IP unique identifiers.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.HttpProxy">
            <summary>
            Get the HTTP proxy instance.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.OutputFileName">
            <summary>
            Get or set the output file name.
            </summary>
            <remarks>
            The default name will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.RunParameters.IniFileName">
            <summary>
            Get the INI file name.
            </summary>
            <remarks>
            The default name will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.RunParameters.FrequencyTimeout">
            <summary>
            Get or set the timeout for acquiring data for a frequency.
            </summary>
            <remarks>
            The default of 300 seconds will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.RunParameters.LockTimeout">
            <summary>
            Get or set the timeout for acquiring a signal lock and receiving station information.
            </summary>
            <remarks>
            The default of 10 seconds will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.RunParameters.Repeats">
            <summary>
            Get or set the number of repeats for collections that cannot determine data complete.
            </summary>
            <remarks>
            The default of 5 will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.RunParameters.BufferSize">
            <summary>
            Get or set the size of the sample buffer in megabytes.
            </summary>
            <remarks>
            The default of 50 will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.RunParameters.BufferFills">
            <summary>
            Get or set the number of times buffer is filled for collections that cannot determine data complete.
            </summary>
            <remarks>
            The default of 1 will be returned if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.RunParameters.TimeZone">
            <summary>
            Get or set the timezone.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.NextTimeZone">
            <summary>
            Get or set the next timezone.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.NextTimeZoneChange">
            <summary>
            Get or set the date/time of the next timezone change.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.TimeZoneSet">
            <summary>
            Get or set an indication of whether the timezone has been set.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.Options">
            <summary>
            Get the collection of options.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.TraceIDs">
            <summary>
            Get the collection of trace ID's.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.DebugIDs">
            <summary>
            Get the collection of debug ID's.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.MaxService">
            <summary>
            Get or set the maximum service ID.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.WMCImportName">
            <summary>
            Get or set the WMC import name used in the MXF file.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.MovieLookupEnabled">
            <summary>
            Get or set the flag for movie lookups.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.DownloadMovieThumbnail">
            <summary>
            Get or set the flag for downloading movie thumbnail.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.MovieLowTime">
            <summary>
            Get or set the minimum length of time for a program to be considered a movie.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.MovieHighTime">
            <summary>
            Get or set the maximum length of time for a program to be considered a movie.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.TVLookupEnabled">
            <summary>
            Get or set the flag for TV lookups.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.DownloadTVThumbnail">
            <summary>
            Get or set the flag for downloading TV thumbnail.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupTimeLimit">
            <summary>
            Get or set the time limit (minutes) for lookup processing.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupErrorLimit">
            <summary>
            Get or set the error limit) for lookup processing.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupMatching">
            <summary>
            Get or set the type of matching for lookups.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupMatchThreshold">
            <summary>
            Get or set the type of threshold for nearest matching.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupReload">
            <summary>
            Get or set the flag for lookup reload.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupNotFound">
            <summary>
            Get or set the flag for always looking up not found entries.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupIgnoreCategories">
            <summary>
            Get or set the flag for ignoring boradcast categories.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupProcessAsTVSeries">
            <summary>
            Get or set the flag for processing as TV series if not movie.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupIgnoredPhrases">
            <summary>
            Get or set the user entered list of phrases to be ignored in the lookup title.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupIgnoredPhraseSeparator">
            <summary>
            Get or set the separator  for ignored phrases in the lookup title.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupMoviePhrases">
            <summary>
            Get or set the user entered list of phrases to be used to identify a movie.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.MoviePhraseSeparator">
            <summary>
            Get or set the separator  for movie phrases in the lookup title.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupImagePath">
            <summary>
            Get or set the base path for lookup images.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupNotMovie">
            <summary>
            Get the list of programme names that are not movies.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupOutputLanguageCode">
            <summary>
            Get or set the output language code for lookups.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupImageNameTitle">
            <summary>
            Get or set the flag for naming images with the programme title.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupImagesInBase">
            <summary>
            Get or set the flag for storing images in the base directory.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupOverwrite">
            <summary>
            Get or set the flag for lookup data overwrites broadcast data.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LookupEpisodeSearchPriority">
            <summary>
            Get or set the episode search priority for lookups.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelUpdateEnabled">
            <summary>
            Get or set the flag for channel updates.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelMergeMethod">
            <summary>
            Get or set the type of channel merging.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelEPGScanner">
            <summary>
            Get or set the type of channel EPG.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelChildLock">
            <summary>
            Get or set the channel update child lock for additions.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelLogNetworkMap">
            <summary>
            Get or set the flag for not logging the network map.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelEPGScanInterval">
            <summary>
            Get or set the EPG scan interval.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelReloadData">
            <summary>
            Get or set the reload data flag.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelUpdateNumber">
            <summary>
            Get or set the channel number update flag.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelExcludeNew">
            <summary>
            Get or set the auto exclude channels flag.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ImportFiles">
            <summary>
            Get or set the list of import files.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ImportChannelChanges">
            <summary>
            Get or set the import file channel changes.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.EditSpecs">
            <summary>
            Get or set the text edit list.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.DVBViewerIPAddress">
            <summary>
            Get or set the DVBViewer IP address list.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.BladeRunnerFileName">
            <summary>
            Get or set the BladeRunner file name.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.AreaRegionFileName">
            <summary>
            Get or set the Area/Region file name.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.SageTVFileName">
            <summary>
            Get or set the SageTV file name.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.SageTVSatelliteNumber">
            <summary>
            Get or set the SageTV satellite number.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.OutputFileSet">
            <summary>
            Get an indication of whether the output file name has been set.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.AbandonRequested">
            <summary>
            Get or set the flag for an abandon run request.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelDataNeeded">
            <summary>
            Return true if the run parameters indicate channel data is needed; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.NetworkDataNeeded">
            <summary>
            Return true if the run parameters indicate network data is needed; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ImportingToDvbViewer">
            <summary>
            Return true if parameters specify import to DvbViewer; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.PluginParameters">
            <summary>
            Return true if the parameter set if for the plugin.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.Exclusions">
            <summary>
            Get the collection of exclusions.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.PhrasesToIgnore">
            <summary>
            Get the phrases to ignore in program titles and descriptions.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelFilters">
            <summary>
            Get the collection of channel filters.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.TimeOffsetChannels">
            <summary>
            Get the collection of time offset channels.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ChannelLogoPath">
            <summary>
            Get or set the xmltv channel logo path 
            </summary>
            <remarks>
            The default of the data directory plus Images will be used if it is not overridden by the initialization file.
            </remarks>
        </member>
        <member name="P:DomainObjects.RunParameters.FrequencyCollection">
            <summary>
            Get or set the collection of frequencies defined for this run.
            </summary>       
        </member>
        <member name="P:DomainObjects.RunParameters.StationCollection">
            <summary>
            Get the collection of stations processed in this run.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.CurrentFrequency">
            <summary>
            Get or set the current tuning frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.LastError">
            <summary>
            Get the last error message.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.ScannedChannels">
            <summary>
            True if a scan list has been loaded; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.NoProgrammeDescription">
            <summary>
            Get the text for no programme description available. 
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.TranslationApiKey">
            <summary>
            Get or set the Yandex API key for text translation.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.TranslationLanguage">
            <summary>
            Get or set the destination language for text translation.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.TranslationSpecs">
            <summary>
            Get or set the list of channels and options for text translations.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.XmltvIconTagPathPrefix">
            <summary>
            Get or set the path prefix for XMLTV icon tags.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.SdChannels">
            <summary>
            Get or set the Schedules Direct channels.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.SdStoreImagesLocally">
            <summary>
            Get or set the flag that controls the local storage of Schedules Direct images.
            </summary>
        </member>
        <member name="P:DomainObjects.RunParameters.SdUseLongDescriptions">
            <summary>
            Get or set the flag that controls the description length Schedules Direct program descriptions.
            </summary>
        </member>
        <member name="T:DomainObjects.ChannelFilterEntry">
            <summary>
            The class that describes a channel filter entry.
            </summary>
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new instance of the ChannelFilterEntry class for a station.
            </summary>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <param name="startServiceID">The start service ID.</param>
            <param name="endServiceID">The end service ID.</param>
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new instance of the ChannelFilterEntry class for a station.
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <param name="startServiceID">The start service ID.</param>
            <param name="endServiceID">The end service ID.</param>        
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.IsFrequencyPresent(System.Collections.ObjectModel.Collection{DomainObjects.ChannelFilterEntry})">
            <summary>
            Check if a frequency filter is present.
            </summary>
            <param name="channelFilters">The list of filters to check.</param>
            <returns>Treu if a frequency filter is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.FindEntry(System.Collections.ObjectModel.Collection{DomainObjects.ChannelFilterEntry},System.Int32)">
            <summary>
            Find a filter entry for an original network ID.
            </summary>
            <param name="channelFilters">The list of filters.</param>
            <param name="originalNetworkID">The original network ID.</param>
            <returns>The filter entry or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.FindEntry(System.Collections.ObjectModel.Collection{DomainObjects.ChannelFilterEntry},System.Int32,System.Int32)">
            <summary>
            Find a filter entry for an original network ID and transport stream ID.
            </summary>
            <param name="channelFilters">The list of filters.</param>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <returns>The filter entry or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.FindEntry(System.Collections.ObjectModel.Collection{DomainObjects.ChannelFilterEntry},System.Int32,System.Int32,System.Int32)">
            <summary>
            Find a filter entry for an original network ID, transport stream ID and serviceID within range.
            </summary>
            <param name="channelFilters">The list of filters.</param>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <param name="serviceID">The service ID.</param>
            <returns>The filter entry or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.FindFrequencyEntry(System.Collections.ObjectModel.Collection{DomainObjects.ChannelFilterEntry},System.Int32,System.Int32)">
            <summary>
            Find a filter entry for an original network ID on a specified frequency.
            </summary>
            <param name="channelFilters">The list of filters.</param>
            <param name="frequency">The frequency.</param>
            <param name="originalNetworkID">The original network ID.</param>
            <returns>The filter entry or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.FindFrequencyEntry(System.Collections.ObjectModel.Collection{DomainObjects.ChannelFilterEntry},System.Int32,System.Int32,System.Int32)">
            <summary>
            Find a filter entry for an original network ID and transport stream ID on a specified frequency.
            </summary>
            <param name="channelFilters">The list of filters.</param>
            <param name="frequency">The frequency.</param>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <returns>The filter entry or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ChannelFilterEntry.FindFrequencyEntry(System.Collections.ObjectModel.Collection{DomainObjects.ChannelFilterEntry},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find a filter entry for an original network ID, transport stream ID and serviceID within range on a specified frequency.
            </summary>
            <param name="channelFilters">The list of filters.</param>
            <param name="frequency">The frequency.</param>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <param name="serviceID">The service ID.</param>        
            <returns>The filter entry or null if it cannot be located.</returns>
        </member>
        <member name="P:DomainObjects.ChannelFilterEntry.OriginalNetworkID">
            <summary>
            Get the original network ID.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelFilterEntry.TransportStreamID">
            <summary>
            Get the transport stream ID.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelFilterEntry.StartServiceID">
            <summary>
            Get the start of the excluded service ID range.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelFilterEntry.EndServiceID">
            <summary>
            Get the end of the excluded service ID range.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelFilterEntry.Frequency">
            <summary>
            Get the frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.CustomProgramCategory">
            <summary>
            The class that describes a users custom program category.
            </summary>
        </member>
        <member name="T:DomainObjects.ProgramCategory">
            <summary>
            The class that describes an XMLTV program category.
            </summary>
        </member>
        <member name="T:DomainObjects.IEventCategory">
            <summary>
            The interface for one of the collection type event categories.
            </summary>
        </member>
        <member name="P:DomainObjects.IEventCategory.XmltvDescription">
            <summary>
            Get the XMLTV description.
            </summary>
        </member>
        <member name="P:DomainObjects.IEventCategory.WMCDescription">
            <summary>
            Get the WMC description.
            </summary>
        </member>
        <member name="P:DomainObjects.IEventCategory.DVBLogicDescription">
            <summary>
            Get the DVBLogic description.
            </summary>
        </member>
        <member name="P:DomainObjects.IEventCategory.DVBViewerDescription">
            <summary>
            Get the DVBViewer description.
            </summary>
        </member>
        <member name="M:DomainObjects.ProgramCategory.#ctor">
            <summary>
            Initialize a new instance of the ProgramCategory class.
            </summary>
        </member>
        <member name="M:DomainObjects.ProgramCategory.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ProgramCategory class.
            </summary>
            <param name="categoryTag">The category tag.</param>
        </member>
        <member name="M:DomainObjects.ProgramCategory.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the ProgramCategory class.
            </summary>
            <param name="categoryNumber">The category number.</param>
        </member>
        <member name="M:DomainObjects.ProgramCategory.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the ProgramCategory class.
            </summary>
            <param name="categoryNumber">The category number.</param>
            /// <param name="categorySubnumber">The category subnumber.</param>
        </member>
        <member name="M:DomainObjects.ProgramCategory.FindCategory(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categories">The collection of categories to search.</param>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.FindCategory(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.Int32)">
            <summary>
            Find a category.
            </summary>
            <param name="categories">The collection of categories to search.</param>
            <param name="categoryNumber">The category number.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.FindCategory(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.Int32,System.Int32)">
            <summary>
            Find a category.
            </summary>
            <param name="categories">The collection of categories to search.</param>
            <param name="categoryNumber">The category number.</param>
            <param name="subnumber">The category subnumber.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.AddCategory(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.String,System.String)">
            <summary>
            Add a category to the collection.
            </summary>
            <param name="categories">The collection of categories to update.</param>
            <param name="categoryTag">The category tag.</param>
            <param name="description">The category description.</param>
        </member>
        <member name="M:DomainObjects.ProgramCategory.AddCategory(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.Int32,System.String)">
            <summary>
            Add a category to the collection.
            </summary>
            <param name="categories">The collection of categies to update.</param>
            <param name="categoryNumber">The category number.</param>
            <param name="description">The category description.</param>
        </member>
        <member name="M:DomainObjects.ProgramCategory.AddCategory(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.Int32,System.Int32,System.String)">
            <summary>
            Add a category to the collection.
            </summary>
            <param name="categories">The collection of categories to update..</param>
            <param name="categoryNumber">The category number.</param>
            <param name="subnumber">The category subnumber.</param>
            <param name="description">The category description.</param>
        </member>
        <member name="M:DomainObjects.ProgramCategory.Load(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.String)">
            <summary>
            Load the category definitions.
            </summary>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.Save(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.String)">
            <summary>
            Save the categories to a file.
            </summary>
            <param name="categories">The collection of categories to save.</param>
            <param name="fileName">The name of the file.</param>
            <returns>Null if the operation succeeded; otherwise an error message.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.CompareForSorting(DomainObjects.ProgramCategory,DomainObjects.ProgramCategory.SortKey)">
            <summary>
            Compare this instance with another for sorting purposes.
            </summary>
            <param name="category">The other instance.</param>
            <param name="sortKey">The name of the key to compare on.</param>
            <returns>Zero if the instances are equal, Greater than 0 if this instance is greater; less than zero otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.Combine(DomainObjects.ProgramCategory)">
            <summary>
            Combine another category with the current instance.
            </summary>
            <param name="otherCategory">The other category.</param>
            <returns>An update category instance.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.AddToDescriptions(System.Collections.ObjectModel.Collection{System.String},System.Int32)">
            <summary>
            Update the descriptions.
            </summary>
            <param name="newCategories">The list of new categories.</param>
            <param name="startIndex">The index to start at.</param>
            <returns>An updated XMLTV category.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.Clone">
            <summary>
            Copy this instance.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.IsDifferent(DomainObjects.ProgramCategory)">
            <summary>
            Compare this instance with another.
            </summary>
            <param name="otherCategory">The other instance.</param>
            <returns>True if the values are the same; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ProgramCategory.LogUsage(System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.Collections.ObjectModel.Collection{DomainObjects.ProgramCategory},System.String)">
            <summary>
            Log the category usage.
            </summary>
        </member>
        <member name="P:DomainObjects.ProgramCategory.CategoryTag">
            <summary>
            Get or set the category tag.
            </summary>
        </member>
        <member name="P:DomainObjects.ProgramCategory.XmltvDescription">
            <summary>
            Get the XMLTV description.
            </summary>
        </member>
        <member name="P:DomainObjects.ProgramCategory.WMCDescription">
            <summary>
            Get the WMC description.
            </summary>
        </member>
        <member name="P:DomainObjects.ProgramCategory.DVBLogicDescription">
            <summary>
            Get the DVBLogic description.
            </summary>
        </member>
        <member name="P:DomainObjects.ProgramCategory.DVBViewerDescription">
            <summary>
            Get the DVBViewer description.
            </summary>
        </member>
        <member name="P:DomainObjects.ProgramCategory.SampleEvent">
            <summary>
            Get or set a description of the sample event for the category.
            </summary>
        </member>
        <member name="P:DomainObjects.ProgramCategory.UsedCount">
            <summary>
            Get or set the usage count for the content.
            </summary>
        </member>
        <member name="P:DomainObjects.ProgramCategory.IsEmpty">
            <summary>
            Return true if the instance is empty; false otherwise.
            </summary>
        </member>
        <member name="T:DomainObjects.ProgramCategory.SortKey">
            <summary>
            The available sort fields.
            </summary>
        </member>
        <member name="F:DomainObjects.ProgramCategory.SortKey.CategoryTag">
            <summary>
            Order on the tag.
            </summary>
        </member>
        <member name="F:DomainObjects.ProgramCategory.SortKey.XmltvDescription">
            <summary>
            Order on the XMLTV description.
            </summary>
        </member>
        <member name="F:DomainObjects.ProgramCategory.SortKey.WmcDescription">
            <summary>
            Order on the WMC description.
            </summary>
        </member>
        <member name="F:DomainObjects.ProgramCategory.SortKey.DvbLogicDescription">
            <summary>
            Order on the DVBLogic description.
            </summary>
        </member>
        <member name="F:DomainObjects.ProgramCategory.SortKey.DvbViewerDescription">
            <summary>
            Order on the DVBViewer description.
            </summary>
        </member>
        <member name="M:DomainObjects.CustomProgramCategory.#ctor">
            <summary>
            Initialize a new instance of the CustomProgramCategory class.
            </summary>
        </member>
        <member name="M:DomainObjects.CustomProgramCategory.FindCategory(System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DomainObjects.CustomProgramCategory.AddCategory(System.String,System.String)">
            <summary>
            Add a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <param name="description">The full category description.</param>
        </member>
        <member name="M:DomainObjects.CustomProgramCategory.Load">
            <summary>
            Load the categories from the standard file.
            </summary>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.CustomProgramCategory.Load(System.String)">
            <summary>
            Load the categories from a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.CustomProgramCategory.Save(System.String)">
            <summary>
            Save the categories to a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>Error message if it failed; null otherwise.</returns>
        </member>
        <member name="P:DomainObjects.CustomProgramCategory.Categories">
            <summary>
            Get the collection of XMLTV categories.
            </summary>
        </member>
        <member name="P:DomainObjects.CustomProgramCategory.FileName">
            <summary>
            Get the standard filename.
            </summary>
        </member>
        <member name="T:DomainObjects.CommandLine">
            <summary>
            The class that processes and stores command line parameters.
            </summary>
        </member>
        <member name="M:DomainObjects.CommandLine.Process(System.String[])">
            <summary>
            Process the command line.
            </summary>
            <param name="args">The command line parameters.</param>
            <returns>True if the command line parameters are valid; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.CommandLine.GetCompletionCodeDescription(DomainObjects.ExitCode)">
            <summary>
            Get a description of the program exit code.
            </summary>
            <param name="exitCode">The exit code.</param>
            <returns>A description of the exit code.</returns>
        </member>
        <member name="M:DomainObjects.CommandLine.GetCompletionCodeShortDescription(DomainObjects.ExitCode)">
            <summary>
            Get a description of the program exit code.
            </summary>
            <param name="exitCode">The exit code.</param>
            <returns>A description of the exit code.</returns>
        </member>
        <member name="P:DomainObjects.CommandLine.TunerQueryOnly">
            <summary>
            Returns true if the run is to query the tuners; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.CommandLine.IniFileName">
            <summary>
            Get the initialization file name.
            </summary>
        </member>
        <member name="P:DomainObjects.CommandLine.BackgroundMode">
            <summary>
            Get the background mode.
            </summary>
        </member>
        <member name="P:DomainObjects.CommandLine.PluginMode">
            <summary>
            Get the plugin mode.
            </summary>
        </member>
        <member name="P:DomainObjects.CommandLine.RunReference">
            <summary>
            Get the run reference number.
            </summary>
        </member>
        <member name="P:DomainObjects.CommandLine.MonoCompatible">
            <summary>
            Returns true if compatability with the Mono environment requested.
            </summary>
        </member>
        <member name="P:DomainObjects.CommandLine.WineCompatible">
            <summary>
            Returns true if compatability with the Wine environment requested.
            </summary>
        </member>
        <member name="P:DomainObjects.CommandLine.DummyTuners">
            <summary>
            Returns true if dummy test tuners are to be created.
            </summary>
        </member>
        <member name="P:DomainObjects.CommandLine.WmcPresent">
            <summary>
            Returns true if WMC is assumed to be present.
            </summary>
        </member>
        <member name="T:DomainObjects.Bouquet">
            <summary>
            The class that describes a bouquet.
            </summary>
        </member>
        <member name="M:DomainObjects.Bouquet.#ctor(System.Int32,System.String)">
            <summary>
            Initialize a new instance of the Bouquet class.
            </summary>
            <param name="bouquetID">The bouquet ID.</param>
            <param name="name">The name of the bouquet.</param>
        </member>
        <member name="M:DomainObjects.Bouquet.AddBouquet(DomainObjects.Bouquet)">
            <summary>
            Add a bouquet to the collection.
            </summary>
            <param name="newBouquet">The bouquet to be added.</param>
        </member>
        <member name="M:DomainObjects.Bouquet.FindBouquet(System.Int32)">
            <summary>
            Find a bouquet.
            </summary>
            <param name="bouquetId">The bouquet ID.</param>
            <returns>A bouqet instance or null if the bouquet ID/region does not exist.</returns>
        </member>
        <member name="M:DomainObjects.Bouquet.AddRegion(DomainObjects.Region)">
            <summary>
            Add a region to the collection.
            </summary>
            <param name="newRegion">The region to be added.</param>
        </member>
        <member name="M:DomainObjects.Bouquet.FindRegion(System.Int32)">
            <summary>
            Find a region.
            </summary>
            <param name="regionCode">The region code.</param>
            <returns>A region instance or null if the region does not exist.</returns>
        </member>
        <member name="M:DomainObjects.Bouquet.GetBouquetsInNameOrder">
            <summary>
            Get the bouquets in name sequence.
            </summary>
            <returns>The bouquets sorted in name order.</returns>
        </member>
        <member name="M:DomainObjects.Bouquet.GetBouquetsInIdentityOrder">
            <summary>
            Get the bouquets in identity sequence.
            </summary>
            <returns>The bouquets sorted in identity order.</returns>
        </member>
        <member name="P:DomainObjects.Bouquet.Bouquets">
            <summary>
            Get the collection of bouquets.
            </summary>
        </member>
        <member name="P:DomainObjects.Bouquet.BouquetID">
            <summary>
            Get or set the bouquet ID.
            </summary>
        </member>
        <member name="P:DomainObjects.Bouquet.Name">
            <summary>
            Get or set the bouquet name.
            </summary>
        </member>
        <member name="P:DomainObjects.Bouquet.Regions">
            <summary>
            Get the collection of regions for the bouquet.
            </summary>
        </member>
        <member name="T:DomainObjects.AdvancedRunParameters">
            <summary>
            The class that describes the per frequency advanced parameters.
            </summary>
        </member>
        <member name="M:DomainObjects.AdvancedRunParameters.#ctor">
            <summary>
            Initialize a new instance of the AdvancedRunParameters class.
            </summary>
        </member>
        <member name="M:DomainObjects.AdvancedRunParameters.EqualTo(DomainObjects.AdvancedRunParameters)">
            <summary>
            Check these parameters for equality with another.
            </summary>
            <param name="oldParameters">The other set of parameters.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.AdvancedRunParameters.OutputParameters(System.IO.StreamWriter)">
            <summary>
            Output the advanced parameters.
            </summary>
            <param name="streamWriter">The stream writer to use.</param>
        </member>
        <member name="M:DomainObjects.AdvancedRunParameters.Clone">
            <summary>
            Clone this instance.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.ByteConvertTable">
            <summary>
            Get or set the name of the byte conversion table.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.EITCarousel">
            <summary>
            Get or set the name of the EIT carousel.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.EPGDays">
            <summary>
            Get or set the number of days EPG to collect.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.CountryCode">
            <summary>
            Get or set the country code.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.ChannelBouquet">
            <summary>
            Get or set the bouquet (ie area).
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.ChannelRegion">
            <summary>
            Get or set the region.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.CharacterSet">
            <summary>
            Get or set the character set.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.InputLanguage">
            <summary>
            Get or set the EPG input language.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.SDTPid">
            <summary>
            Get or set the SDT pid to use.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.EITPid">
            <summary>
            Get or set the EIT pid to use.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.MHW1Pids">
            <summary>
            Get or set the MHW1 pids to use.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.MHW2Pids">
            <summary>
            Get or set the MHW2 pids to use. 
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.DishNetworkPid">
            <summary>
            Get or set the Dish Network pid to use.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.Options">
            <summary>
            Get or set the list of options.
            </summary>
        </member>
        <member name="P:DomainObjects.AdvancedRunParameters.Region">
            <summary>
            Get or set the region.
            </summary>
        </member>
        <member name="T:DomainObjects.ImportChannelChange">
            <summary>
            The class that describes XMLTV user channel changes.
            </summary>
        </member>
        <member name="M:DomainObjects.ImportChannelChange.#ctor(System.String)">
            <summary>
            Initialize a new instance of the XmltvChannelChange class.
            </summary>
            <param name="displayName">The channels display name.</param>
        </member>
        <member name="M:DomainObjects.ImportChannelChange.CompareForSorting(DomainObjects.ImportChannelChange,System.String)">
            <summary>
            Compare this instance with another for sorting purposes.
            </summary>
            <param name="channelChange">The other instance.</param>
            <param name="keyName">The name of the key to compare on.</param>
            <returns>Zero if the instances are equal, Greater than 0 if this instance is greater; less than zero otherwise.</returns>
        </member>
        <member name="P:DomainObjects.ImportChannelChange.DisplayName">
            <summary>
            Get the display name.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportChannelChange.NewName">
            <summary>
            Get or set the new name.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportChannelChange.CallSign">
            <summary>
            Get or set the call sign.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportChannelChange.ChannelNumber">
            <summary>
            Get or set the channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportChannelChange.Excluded">
            <summary>
            Get or set the excluded flag.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportChannelChange.DisplayedChannelNumber">
            <summary>
            Get or set the displayed channel number. 
            </summary>
        </member>
        <member name="T:DomainObjects.EPGEntry">
            <summary>
            The class the describes an EPG record.
            </summary>
        </member>
        <member name="M:DomainObjects.EPGEntry.#ctor">
            <summary>
            Initialize a new instance of the EPGEntry class.
            </summary>
        </member>
        <member name="M:DomainObjects.EPGEntry.ToString">
            <summary>
            Get a string representing this instance.
            </summary>
            <returns>A string description of this instance.</returns>
        </member>
        <member name="M:DomainObjects.EPGEntry.Clone">
            <summary>
            Create a copy of this instance.
            </summary>
            <returns>The replicated instance.</returns>
        </member>
        <member name="M:DomainObjects.EPGEntry.AddSeriesEpisodeToDescription">
            <summary>
            Append the series/episode numbers to the short description if option set and numbers available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.EPGEntry.SetIdentitySuffix">
            <summary>
            Create the unique identity suffix;
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.OriginalNetworkID">
            <summary>
            Get or set the ONID.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.TransportStreamID">
            <summary>
            Get or set the TSID.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.ServiceID">
            <summary>
            Get or set the SID.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.VersionNumber">
            <summary>
            Get or set the version number.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EventID">
            <summary>
            Get or set the event ID.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EventName">
            <summary>
            Get or set the program title.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EventSubTitle">
            <summary>
            Get or set the program sub-title.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.StartTime">
            <summary>
            Get or set the start time of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Duration">
            <summary>
            Get or set the length of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.RunningStatus">
            <summary>
            Get or set the running status of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Scrambled">
            <summary>
            Return true if the program is encrypted; false otherwise. 
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.ShortDescription">
            <summary>
            Get or set the short description of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.ExtendedDescription">
            <summary>
            Get or set the full description of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.VideoQuality">
            <summary>
            Get or set the video quality of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.AudioQuality">
            <summary>
            Get or set the audio quality of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.AspectRatio">
            <summary>
            Get or set the aspect ratio of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.SubTitles">
            <summary>
            Get or set the presence of subtitles for the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.ParentalRating">
            <summary>
            Get or set the parental rating of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.MpaaParentalRating">
            <summary>
            Get or set the MPAA parental rating of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.ParentalRatingSystem">
            <summary>
            Get or set the parental rating system in use.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EventCategory">
            <summary>
            Get or set the program category.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Directors">
            <summary>
            Get or set the directors of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Producers">
            <summary>
            Get or set the producers of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Cast">
            <summary>
            Get or set the cast of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Writers">
            <summary>
            Get or set the writers of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.GuestStars">
            <summary>
            Get or set the guest stars of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Presenters">
            <summary>
            Get or set the presenters of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.SeriesId">
            <summary>
            Get or set the series reference of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EpisodeId">
            <summary>
            Get or set the episode of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IdPrefix">
            <summary>
            Get or set the program ID prefix.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.PartNumber">
            <summary>
            Get or set the part number within the episode of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.SeasonNumber">
            <summary>
            Get or set the season number of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EpisodeNumber">
            <summary>
            Get or set the episode number of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.SeasonCrid">
            <summary>
            Get or set the season CRID of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EpisodeCrid">
            <summary>
            Get or set the episode CRID of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EpisodeSystemType">
            <summary>
            Get or set the episode system type contents (xmltv merge data only).
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EpisodeTag">
            <summary>
            Get or set the episode tag contents (xmltv merge data only).
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Date">
            <summary>
            Get or set the date of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.PreviousPlayDate">
            <summary>
            Get or set the previous play date of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Country">
            <summary>
            Get or set the country of origin.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.StarRating">
            <summary>
            Get or set the star rating of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EPGSource">
            <summary>
            Get or set the source of the EPG.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.HasGraphicViolence">
            <summary>
            Get or set the flag for graphic violence.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.HasGraphicLanguage">
            <summary>
            Get or set the flag for graphic language.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.HasStrongSexualContent">
            <summary>
            Get or set the flag for strong sexual content.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.HasAdult">
            <summary>
            Get or set the flag for adult material.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.HasNudity">
            <summary>
            Get or set the flag for nudity.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsNew">
            <summary>
            Get or set the flag indicating a new programme.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsLive">
            <summary>
            Get or set the flag indicating a live programme.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsRepeat">
            <summary>
            Get or set the flag indicating a repat of a programme (possibly only sporting events).
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsPremiere">
            <summary>
            Get or set the flag indicating a premiere showing.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsMovie">
            <summary>
            Get or set the flag indicating a movie.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsSports">
            <summary>
            Get or set the flag indicating a sports program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsSeries">
            <summary>
            Get or set the flag indicating a program is part of a series.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsGeneric">
            <summary>
            Get or set the flag indicating a program as generic.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IsMiniseries">
            <summary>
            Get or set the flag indicating a program as a miniseries.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.LiveTapeDelay">
            <summary>
            Get or set the description indicating a type of live programme.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.PremiereOrFinale">
            <summary>
            Get or set the description indicating a premiere or finale.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Poster">
            <summary>
            Get or set the poster identity.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.PosterPath">
            <summary>
            Get or set the poster path (xmltv merge data only).
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.PosterHeight">
            <summary>
            Get or set the poster height (xmltv merge data only).
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.PosterWidth">
            <summary>
            Get or set the poster width (xmltv merge data only).
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.LanguageCode">
            <summary>
            Get or set the language code of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.MetaDataTitle">
            <summary>
            Get or set the metadata title of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.UniqueIdentifier">
            <summary>
            Get or set the unique identifier of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.SeriesDescription">
            <summary>
            Get or set the series description of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.SeriesStartDate">
            <summary>
            Get or set the series start date of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.SeriesEndDate">
            <summary>
            Get or set the series end date of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.HasAudioDescription">
            <summary>
            Get or set the flag for audio description.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.NoLookup">
            <summary>
            Get or set the flag that inhinits metadata lookup for this entry.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.UseBase64Crids">
            <summary>
            Get or set the flag that inhinits metadata lookup for this entry.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.IdentitySuffix">
            <summary>
            Get or set the string to be used to ensure identity uniqueness.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.PID">
            <summary>
            Get or set the PID the program was received on.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.Table">
            <summary>
            Get or set the DVB table the program was received on.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.TimeStamp">
            <summary>
            Get or set the time the program was received.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.UnknownData">
            <summary>
            Get or set the undefined data associated with the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.ScheduleDescription">
            <summary>
            Get a description of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.FullScheduleDescription">
            <summary>
            Get a full description of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.DurationString">
            <summary>
            Get a string describing the duration of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.StartsAtMidnight">
            <summary>
            Return true if the program starts at midnight; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGEntry.EndsAtMidnight">
            <summary>
            Returns true if the program ends at midnight; false otherwise.
            </summary>
        </member>
        <member name="T:DomainObjects.LanguageCode">
            <summary>
            The class that describes a language code.
            </summary>
        </member>
        <member name="M:DomainObjects.LanguageCode.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the LanguageCode class.
            </summary>
            <param name="code"></param>
            <param name="description"></param>
        </member>
        <member name="M:DomainObjects.LanguageCode.ToString">
            <summary>
            Return a description of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.LanguageCode.Load">
            <summary>
            Load the language code collection from the configuration file.
            </summary>
        </member>
        <member name="M:DomainObjects.LanguageCode.addLanguageCode(DomainObjects.LanguageCode)">
            <summary>
            Add a language code to the collection.
            </summary>
            <param name="newLanguageCode">The language code to be added.</param>
        </member>
        <member name="M:DomainObjects.LanguageCode.FindLanguageCode(System.String)">
            <summary>
            Find a language code the code.
            </summary>
            <param name="code">The language code.</param>
            <returns>The language code or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.LanguageCode.RegisterUsage(System.String)">
            <summary>
            Flag a language code as used.
            </summary>
            <param name="code">The code that has been used</param>
        </member>
        <member name="M:DomainObjects.LanguageCode.LogUsage">
            <summary>
            Log the usage.
            </summary>
        </member>
        <member name="M:DomainObjects.LanguageCode.Validate(System.String,DomainObjects.LanguageCode.Usage)">
            <summary>
            Validate a language code.
            </summary>
            <param name="code">The code.</param>
            <param name="usage">The usage ie input or output.</param>
            <returns></returns>
        </member>
        <member name="P:DomainObjects.LanguageCode.LanguageCodes">
            <summary>
            Get the collection of language codes.
            </summary>
        </member>
        <member name="P:DomainObjects.LanguageCode.LanguageCodeList">
            <summary>
            Get a copy of the collection of language codes.
            </summary>
        </member>
        <member name="P:DomainObjects.LanguageCode.UndefinedCodes">
            <summary>
            Get the collection of undefined language codes.
            </summary>
        </member>
        <member name="P:DomainObjects.LanguageCode.Code">
            <summary>
            Get or set the language code.
            </summary>
        </member>
        <member name="P:DomainObjects.LanguageCode.Description">
            <summary>
            Get or set the description.
            </summary>
        </member>
        <member name="P:DomainObjects.LanguageCode.TranslationCode">
            <summary>
            Get or set the translation language code.
            </summary>
        </member>
        <member name="P:DomainObjects.LanguageCode.LookupCode">
            <summary>
            Lookup code.
            </summary>
        </member>
        <member name="P:DomainObjects.LanguageCode.Used">
            <summary>
            Get or set the used flag.
            </summary>
        </member>
        <member name="T:DomainObjects.LanguageCode.Usage">
            <summary>
            The usage of the code.
            </summary>
        </member>
        <member name="F:DomainObjects.LanguageCode.Usage.Input">
            <summary>
            The language code is used for input.
            </summary>
        </member>
        <member name="F:DomainObjects.LanguageCode.Usage.Output">
            <summary>
            The language code is used for output.
            </summary>
        </member>
        <member name="T:DomainObjects.TraceEntry">
            <summary>
            The class that describes a trace parameter entry.
            </summary>
        </member>
        <member name="M:DomainObjects.TraceEntry.#ctor(DomainObjects.TraceName)">
            <summary>
            Initialize a new instance of the TraceEntry class with a name.
            </summary>
            <param name="name">The name of the entry.</param>
        </member>
        <member name="M:DomainObjects.TraceEntry.#ctor(DomainObjects.TraceName,System.Int32)">
            <summary>
            Initialize a new entry of the TraceEntry class with a name and number parameter.
            </summary>
            <param name="name"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:DomainObjects.TraceEntry.#ctor(DomainObjects.TraceName,System.String)">
            <summary>
            Initialize a new entry of the TraceEntry class with a name and string parameter.
            </summary>
            <param name="name"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:DomainObjects.TraceEntry.ToString">
            <summary>
            Get a string representation of the instance.
            </summary>
            <returns>A string representing the instance.</returns>
        </member>
        <member name="M:DomainObjects.TraceEntry.Clone">
            <summary>
            Copy the instance.
            </summary>
            <returns>A new instance of the TraceEntry class with the same values as this instance.</returns>
        </member>
        <member name="M:DomainObjects.TraceEntry.GetInstance(System.String)">
            <summary>
            Get an instance of the TraceEntry from a parameter file entry.
            </summary>
            <param name="parameter">The parameter file entry.</param>
            <returns>A new instance of the class.</returns>
        </member>
        <member name="M:DomainObjects.TraceEntry.IsDefined(DomainObjects.TraceName)">
            <summary>
            Check if a trace name is present.
            </summary>
            <param name="traceName">The name of the trace entry.</param>
            <returns>True if the trace name is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TraceEntry.FindEntry(DomainObjects.TraceName)">
            <summary>
            Find a trace entry.
            </summary>
            <param name="traceName">The name of the trace entry.</param>
            <returns>The trace entry if it is found; otherwise null</returns>
        </member>
        <member name="M:DomainObjects.TraceEntry.FindEntry(DomainObjects.TraceName,System.Boolean)">
            <summary>
            Find a trace entry.
            </summary>
            <param name="traceName">The name of the trace entry.</param>
            <param name="withParameter">True if a parameter must be present; false otherwise.</param>
            <returns>The trace entry if it is found; otherwise null</returns>
        </member>
        <member name="M:DomainObjects.TraceEntry.FindEntry(System.Collections.ObjectModel.Collection{DomainObjects.TraceEntry},System.String)">
            <summary>
            Find a trace entry.
            </summary>
            <param name="traceEntries">The list of trace entries to search.</param>
            <param name="identifier">The string representation of the debug entry.</param>
            <returns>The trace entry if it is found; otherwise null</returns>
        </member>
        <member name="P:DomainObjects.TraceEntry.LastError">
            <summary>
            Get the last error message.
            </summary>
        </member>
        <member name="P:DomainObjects.TraceEntry.Name">
            <summary>
            Get the entry name.
            </summary>
        </member>
        <member name="P:DomainObjects.TraceEntry.NumberParameter">
            <summary>
            Get or set the number entry parameter.
            </summary>
        </member>
        <member name="P:DomainObjects.TraceEntry.StringParameter">
            <summary>
            Get or set the string entry parameter.
            </summary>
        </member>
        <member name="P:DomainObjects.TraceEntry.NumberParameterSet">
            <summary>
            Return true if the entry number parameter has been set; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.TraceEntry.StringParameterSet">
            <summary>
            Return true if the entry string parameter has been set; false otherwise.
            </summary>
        </member>
        <member name="T:DomainObjects.OptionEntry">
            <summary>
            The class that describes an option parameter entry.
            </summary>
        </member>
        <member name="M:DomainObjects.OptionEntry.#ctor(DomainObjects.OptionName)">
            <summary>
            Initialize a new instance of the OptionEntry class with a name.
            </summary>
            <param name="name">The name of the entry.</param>
        </member>
        <member name="M:DomainObjects.OptionEntry.#ctor(DomainObjects.OptionName,System.Int32)">
            <summary>
            Initialize a new entry of the OptionEntry class with a name and parameter.
            </summary>
            <param name="name"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:DomainObjects.OptionEntry.ToString">
            <summary>
            Get a string representation of the instance.
            </summary>
            <returns>A string representing the instance.</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.Clone">
            <summary>
            Copy the instance.
            </summary>
            <returns>A new instance of the OptionEntry class with the same values as this instance.</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.GetInstance(System.String)">
            <summary>
            Get an instance of the OptionEntry from a parameter file entry.
            </summary>
            <param name="parameter">The parameter file entry.</param>
            <returns>A new instance of the class.</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.IsDefined(DomainObjects.OptionName)">
            <summary>
            Check if a option name is present.
            </summary>
            <param name="optionName">The name of the option entry.</param>
            <returns>True if the option name is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.IsDefined(System.Collections.ObjectModel.Collection{DomainObjects.OptionEntry},DomainObjects.OptionName)">
            <summary>
            Check if a option name is present.
            </summary>
            <param name="options">The list of options to search.</param>
            <param name="optionName">The name of the option entry.</param>
            <returns>True if the option name is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.FindEntry(DomainObjects.OptionName)">
            <summary>
            Find an option entry.
            </summary>
            <param name="optionName">The name of the option entry.</param>
            <returns>The option entry if it is found; otherwise null</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.FindEntry(DomainObjects.OptionName,System.Boolean)">
            <summary>
            Find an option entry.
            </summary>
            <param name="optionName">The name of the option entry.</param>
            <param name="withParameter">True if a parameter must be present; false otherwise.</param>
            <returns>The option entry if it is found; otherwise null</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.FindEntry(System.Collections.ObjectModel.Collection{DomainObjects.OptionEntry},System.String)">
            <summary>
            Find an option entry.
            </summary>
            <param name="optionEntries">The list of option entries to search.</param>
            <param name="identifier">The string representation of the option entry.</param>
            <returns>The option entry if it is found; otherwise null</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.FindEntry(System.Collections.ObjectModel.Collection{DomainObjects.OptionEntry},DomainObjects.OptionName,System.Boolean)">
            <summary>
            Find an option entry.
            </summary>
            <param name="optionEntries">The list of option entries to search.</param>
            <param name="optionName">The name of the option entry.</param>
            <param name="withParameter">True if a parameter must be present; false otherwise.</param>
            <returns>The option entry if it is found; otherwise null</returns>
        </member>
        <member name="M:DomainObjects.OptionEntry.Remove(System.Collections.ObjectModel.Collection{DomainObjects.OptionEntry},DomainObjects.OptionName)">
            <summary>
            Remove an entry.
            </summary>
            <param name="optionEntries">The list of entries.</param>
            <param name="optionName">The name of the entry to remove.</param>
        </member>
        <member name="P:DomainObjects.OptionEntry.Name">
            <summary>
            Get the entry name.
            </summary>
        </member>
        <member name="P:DomainObjects.OptionEntry.Parameter">
            <summary>
            Get or set the entry parameter.
            </summary>
        </member>
        <member name="P:DomainObjects.OptionEntry.ParameterSet">
            <summary>
            Return true if the entry parameter has been set; false otherwise.
            </summary>
        </member>
        <member name="T:DomainObjects.Area">
            <summary>
            The class that describes an area.
            </summary>
        </member>
        <member name="M:DomainObjects.Area.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new instance of the Area class.
            </summary>
            <param name="name">The name of the area.</param>
            <param name="code">The code of the area.</param>
        </member>
        <member name="M:DomainObjects.Area.AddRegion(DomainObjects.Region)">
            <summary>
            Add a region to the area.
            </summary>
            <param name="newRegion">The new region.</param>
        </member>
        <member name="M:DomainObjects.Area.FindRegion(System.Int32)">
            <summary>
            Find an region defined for the area.
            </summary>
            <param name="regionCode">The region code.</param>
            <returns>The region or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Area.ToString">
            <summary>
            Return a description of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DomainObjects.Area.Name">
            <summary>
            Get the name of the area.
            </summary>
        </member>
        <member name="P:DomainObjects.Area.Code">
            <summary>
            Get the code of the area.
            </summary>
        </member>
        <member name="P:DomainObjects.Area.Regions">
            <summary>
            Get the collection of regions in the area.
            </summary>
        </member>
        <member name="T:DomainObjects.WMCRecording">
            <summary>
            The class that describes a Windows Media Center recording.
            </summary>
        </member>
        <member name="M:DomainObjects.WMCRecording.#ctor">
            <summary>
            Initialize a new instance of the WMCRecording class.
            </summary>
        </member>
        <member name="M:DomainObjects.WMCRecording.Load(System.Xml.XmlReader)">
            <summary>
            Load the xml data.
            </summary>
            <param name="reader">The xml reader for the file.</param>
        </member>
        <member name="P:DomainObjects.WMCRecording.Recordings">
            <summary>
            Get or set the collection of recordings.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCRecording.Title">
            <summary>
            Get the title.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCRecording.Description">
            <summary>
            Get the description.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCRecording.StartTime">
            <summary>
            Get the start time.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCRecording.SeasonNumber">
            <summary>
            Get the season number.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCRecording.EpisodeNumber">
            <summary>
            Get the episode number.
            </summary>
        </member>
        <member name="T:DomainObjects.Region">
            <summary>
            The class that describes a region.
            </summary>
        </member>
        <member name="M:DomainObjects.Region.#ctor(System.String,System.Int32)">
            <summary>
            Initialize a new instance of the Region class.
            </summary>
            <param name="name">The name of the region.</param>
            <param name="code">The code of the region.</param> 
        </member>
        <member name="M:DomainObjects.Region.ToString">
            <summary>
            Return a description of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.Region.AddChannel(DomainObjects.Channel)">
            <summary>
            Add a channel to the region.
            </summary>
            <param name="newChannel">The channel to be added.</param>
        </member>
        <member name="M:DomainObjects.Region.GetChannelsInNameOrder">
            <summary>
            Get the channels in name order.
            </summary>
            <returns>The channels sorted in name order.</returns>
        </member>
        <member name="M:DomainObjects.Region.GetChannelsInChannelNumberOrder">
            <summary>
            Get the channels in user channel number order.
            </summary>
            <returns>The channels sorted in channel number order.</returns>
        </member>
        <member name="M:DomainObjects.Region.FindChannel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Find a channel.
            </summary>
            <param name="originalNetworkID">The ONID of the channel.</param>
            <param name="transportStreamID">The TSID of the channel.</param>
            <param name="serviceID">The SID of the channel.</param>
            <returns>A Channel instance if the channel can be located; null otherwise.</returns>
        </member>
        <member name="P:DomainObjects.Region.Name">
            <summary>
            Get the name of the region.
            </summary>
        </member>
        <member name="P:DomainObjects.Region.Code">
            <summary>
            Get the code of the region.
            </summary>
        </member>
        <member name="P:DomainObjects.Region.Channels">
            <summary>
            Get the collection of channels for the region.
            </summary>
        </member>
        <member name="T:DomainObjects.ProtectedResource">
            <summary>
            The class that describes a protected resource.
            </summary>
        </member>
        <member name="M:DomainObjects.ProtectedResource.#ctor">
            <summary>
            Initialize a new instance of the ProtectedResource class.
            </summary>
        </member>
        <member name="M:DomainObjects.ProtectedResource.Lock(System.String)">
            <summary>
            Lock the resource.
            </summary>
            <param name="identity">The identity of the function locking the resource.</param>
        </member>
        <member name="M:DomainObjects.ProtectedResource.Release(System.String)">
            <summary>
            Release the resource.
            </summary>
            <param name="identity">The identity of the function releasing the resource.</param>
        </member>
        <member name="M:DomainObjects.ProtectedResource.CheckOwnership">
            <summary>
            Check ownersip of the resource.
            </summary>
        </member>
        <member name="P:DomainObjects.ProtectedResource.OwnerThreadID">
            <summary>
            Get the thread ID that owns the resource.
            </summary>
        </member>
        <member name="P:DomainObjects.ProtectedResource.OwnerThreadName">
            <summary>
            Get the name of the thread that owns the resource.
            </summary>
        </member>
        <member name="P:DomainObjects.ProtectedResource.IsLocked">
            <summary>
            Return true if the resource is currently locked; false otherwise.
            </summary>
        </member>
        <member name="T:DomainObjects.OutputFile">
            <summary>
            The class that controls creation of the output file.
            </summary>
        </member>
        <member name="M:DomainObjects.OutputFile.Process">
            <summary>
            Generate the output for normal collections.
            </summary>
            <returns>Null if successful; an error message otherwise.</returns>
        </member>
        <member name="M:DomainObjects.OutputFile.ProcessPlugin">
            <summary>
            Generate the output for plugin collections.
            </summary>
            <returns>Null if successful; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.OutputFile.UseUnicodeEncoding">
            <summary>
            Get or set the flag that forces the output to use Unicode encoding. The default is UTF-8.
            </summary>
        </member>
        <member name="T:DomainObjects.DVBViewerProgramCategory">
            <summary>
            The class that describes a DVBViewer program category.
            </summary>
        </member>
        <member name="M:DomainObjects.DVBViewerProgramCategory.CheckDescription(System.String)">
            <summary>
            Check if a description contains a valid DVBViewer program category.
            </summary>
            <param name="description">The description to check.</param>
            <returns>True if the description is valid; false otherwise.</returns>
        </member>
        <member name="T:DomainObjects.NetworkSpec">
            <summary>
            The class that defines a network.
            </summary>
        </member>
        <member name="M:DomainObjects.NetworkSpec.#ctor(System.String,System.Net.IPAddress)">
            <summary>
            Initialize a new instance of the NetworkSpec class.
            </summary>
            <param name="name">The name of the network.</param>
            <param name="address">The IP address of the network.</param>
        </member>
        <member name="P:DomainObjects.NetworkSpec.Name">
            <summary>
            Get the name of the network.
            </summary>
        </member>
        <member name="P:DomainObjects.NetworkSpec.Address">
            <summary>
            Get the IP address of the network.
            </summary>
        </member>
        <member name="T:DomainObjects.ImportFileBase">
            <summary>
            The base class for XMLTV or MXF imports.
            </summary>
        </member>
        <member name="M:DomainObjects.ImportFileBase.Process(System.String,DomainObjects.ImportFileSpec)">
            <summary>
            Process an MXF file.
            </summary>
            <param name="fileName">The actual file path.</param>
            <param name="fileSpec">The file definition.</param>
            <returns>An error message or null if the file is processed successfully.</returns>
        </member>
        <member name="M:DomainObjects.ImportFileBase.ProcessChannels(System.String,DomainObjects.ImportFileSpec)">
            <summary>
            Process the channel information from an MXF file.
            </summary>
            <param name="fileName">The actual file path.</param>
            <param name="fileSpec">The file definition.</param>
            <returns>An error message or null if the file was processed successfully.</returns>
        </member>
        <member name="M:DomainObjects.ImportFileBase.LogStats">
            <summary>
            Log the import statistics.
            </summary>
        </member>
        <member name="M:DomainObjects.ImportFileBase.GetActualFileName(System.String)">
            <summary>
            Get the real name of the import file.
            </summary>
            <param name="fileName">The top level name of the file.</param>
            <returns>The target name of the file.</returns>
        </member>
        <member name="M:DomainObjects.ImportFileBase.DeleteTemporaryFile">
            <summary>
            Delete any temporary file.
            </summary>
        </member>
        <member name="M:DomainObjects.ImportFileBase.GetNumber(System.String,System.String)">
            <summary>
            Extract a number from a string.
            </summary>
            <param name="prefix">The prefix to be ignored. Can be null.</param>
            <param name="parameter">The string to be processed.</param>
            <returns>The extracted number.</returns>
        </member>
        <member name="M:DomainObjects.ImportFileBase.MergeChannels(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},DomainObjects.DataPrecedence)">
            <summary>
            Merge the XMLTV data with the broadcast data.
            </summary>
            <param name="newChannels">The collection of XMLTV channels.</param>
            <param name="precedence">The data precedence.</param>
        </member>
        <member name="T:DomainObjects.CableProvider">
            <summary>
            The class that describes a cable provider.
            </summary>
        </member>
        <member name="M:DomainObjects.CableProvider.#ctor(System.String)">
            <summary>
            Initialize a new instance of the CableProvider class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DomainObjects.CableProvider.Load">
            <summary>
            Load the cable collection from the tuning files.
            </summary>
        </member>
        <member name="M:DomainObjects.CableProvider.AddProvider(DomainObjects.CableProvider)">
            <summary>
            Add a provider to the list.
            </summary>
            <param name="newProvider">The provider to be added.</param>
        </member>
        <member name="M:DomainObjects.CableProvider.FindProvider(System.String)">
            <summary>
            Find a provider.
            </summary>
            <param name="name">The name of the provider.</param>
            <returns>The provider or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.CableProvider.FindProvider(System.Int32,System.Int32,DomainObjects.FECRate,DomainObjects.SignalModulation.Modulation)">
            <summary>
            Find a provider given the broadcast parameters.
            </summary>
            <param name="frequency">The frequency of the provider.</param>
            <param name="symbolRate">The symbol rate of the provider.</param>
            <param name="fecRate">The FEC rate of the provider.</param>
            <param name="modulation">The modulation of the provider.</param>
            <returns>The provider or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.CableProvider.LogNetworkInfo">
            <summary>
            Log the network information
            </summary>
        </member>
        <member name="M:DomainObjects.CableProvider.Unload">
            <summary>
            Create an xml file containing the frequency definitions.
            </summary>
            <returns>Null if the file was created successfully; an error message otherwise.</returns>
        </member>
        <member name="M:DomainObjects.CableProvider.EqualTo(DomainObjects.Provider,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="provider">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.CableProvider.Providers">
            <summary>
            Get the collection of providers.
            </summary>
        </member>
        <member name="T:DomainObjects.ISDBTerrestrialFrequency">
            <summary>
            The class that describes a terrestrial frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialFrequency.#ctor">
            <summary>
            Initialize a new instance of the ISDBTerrestrialFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialFrequency.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialFrequency.Unload(System.Xml.XmlWriter,System.String)">
            <summary>
            Create the xml definition for the frequency.
            </summary>
            <param name="writer">An xml writer instance.</param>
            <param name="fullPath">The full path of the file being created.</param>
            <returns>Null if the entry was created successfully; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.ISDBTerrestrialFrequency.Bandwidth">
            <summary>
            Get or set the bandwidth.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBTerrestrialFrequency.TunerType">
            <summary>
            Get the tuner type for this type of frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.WebReply">
            <summary>
            The reply class for web replies.
            </summary>
        </member>
        <member name="T:DomainObjects.ReplyBase">
            <summary>
            The base class for reply data.
            </summary>
        </member>
        <member name="M:DomainObjects.ReplyBase.#ctor(System.String,System.Object)">
            <summary>
            Iniotialize a new instance of the ReplyBase class.
            </summary>
            <param name="message">The message.</param>
            <param name="responseData">The response data.</param>
        </member>
        <member name="M:DomainObjects.ReplyBase.NoReply">
            <summary>
            Create an instance of the ReplyBase class with no message or response data.
            </summary>
            <returns>An empty ReplyBase instance.</returns>
        </member>
        <member name="M:DomainObjects.ReplyBase.ErrorReply(System.String)">
            <summary>
            Create an instance of the ReplyBase class with an error message.
            </summary>
            <param name="message">The error message.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.ReplyBase.DataReply(System.Object)">
            <summary>
            Create an instance of the ReplyBase class with a data response.
            </summary>
            <param name="responseData">The data response.</param>
            <returns></returns>
        </member>
        <member name="P:DomainObjects.ReplyBase.Message">
            <summary>
            Get or set the message.
            </summary>
        </member>
        <member name="P:DomainObjects.ReplyBase.ResponseData">
            <summary>
            Get or set the response data.
            </summary>
        </member>
        <member name="M:DomainObjects.WebReply.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the WebReply class.
            </summary>
            <param name="message">The message.</param>
            <param name="responseData">The response data.</param>
        </member>
        <member name="M:DomainObjects.WebReply.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initialize a new instance of the WebReply class.
            </summary>
            <param name="message">The message.</param>
            <param name="responseData">The response data.</param>
            <param name="location">The HTTP location.</param>
        </member>
        <member name="M:DomainObjects.WebReply.LocationReply(System.String)">
            <summary>
            Initialize a new instance of the WebReply class.
            </summary>
            <param name="location">The location.</param>
            <returns></returns>
        </member>
        <member name="P:DomainObjects.WebReply.Location">
            <summary>
            Get or set the HTTP location.
            </summary>
        </member>
        <member name="T:DomainObjects.SchedulesDirectLineup">
            <summary>
            The class that defines a Schedules Direct lineup.
            </summary>
        </member>
        <member name="M:DomainObjects.SchedulesDirectLineup.#ctor">
            <summary>
            Create a new instance of the SdLineup class.
            </summary>
        </member>
        <member name="M:DomainObjects.SchedulesDirectLineup.Clone">
            <summary>
            Create a copy of the current instance.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="M:DomainObjects.SchedulesDirectLineup.CompareTo(DomainObjects.SchedulesDirectLineup)">
            <summary>
            Compare this instance with another.
            </summary>
            <param name="otherLineup">The other lineup.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.SchedulesDirectLineup.ToString">
            <summary>
            Get a string representation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.Identity">
            <summary>
            Get or set the internal identity of the lineup.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.LineupID">
            <summary>
            Get or set the internal identity of the lineup.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.Name">
            <summary>
            Get or set the name of the lineup.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.Modified">
            <summary>
            Get or set the last modified date.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.Location">
            <summary>
            Get or set the location of the lineup.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.Transport">
            <summary>
            Get or set the transport type of the lineup.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.Uri">
            <summary>
            Get or ser the URI associated with the lineup.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.IsDeleted">
            <summary>
            Get or set the flag indicating that the lineup has been deleted.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectLineup.FullName">
            <summary>
            Get the full name of the lineup.
            </summary>
        </member>
        <member name="T:DomainObjects.ByteConvertTable">
            <summary>
            The class that describes a byte conversion table.
            </summary>
        </member>
        <member name="M:DomainObjects.ByteConvertTable.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ByteConvertTable class.
            </summary>
            <param name="tableName">The name of the table.</param>
        </member>
        <member name="M:DomainObjects.ByteConvertTable.FindEntry(System.Byte,System.Byte)">
            <summary>
            Find a conversion entry.
            </summary>
            <param name="controlCode">The control code for the byte.</param>
            <param name="originalValue">The original value of the byte.</param>
            <returns></returns>
        </member>
        <member name="P:DomainObjects.ByteConvertTable.TableName">
            <summary>
            Get the name of the table.
            </summary>
        </member>
        <member name="P:DomainObjects.ByteConvertTable.Entries">
            <summary>
            Get the collection of table entries.
            </summary>
        </member>
        <member name="T:DomainObjects.ImportFileSpec">
            <summary>
            The class that defines an import file.
            </summary>
        </member>
        <member name="M:DomainObjects.ImportFileSpec.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ImportFileSpec class.
            </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.FileName">
            <summary>
            Get the name of the file.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.Language">
            <summary>
            Get or set the language code of the file (XMLTV only).
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.Precedence">
            <summary>
            Get or set the precedence the data takes.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.NoLookup">
            <summary>
            Get or set the flag which inhibits metadatalookup on import data.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.AppendOnly">
            <summary>
            Get or set the flag which controls the appending of import data.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.IdFormat">
            <summary>
            Get or set the format of the ID attribute.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.TimeZone">
            <summary>
            Get the timezone of the data.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.IgnoreEpisodeTags">
            <summary>
            Get or set the flag which ignores non-standard episode tags.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.StoreImagesLocally">
            <summary>
            Get or set the mode which controls the local caching of images.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.ProcessNewTag">
            <summary>
            Get or set the flag which controls the processing of the New tag
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.SetPreviouslyShownDefault">
            <summary>
            Get or set the flag determines if empty previously showen tags get a default date.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.IdFormatDecode">
            <summary>
            Get the decode for the ID format property.
            </summary>
        </member>
        <member name="P:DomainObjects.ImportFileSpec.PrecedenceDecode">
            <summary>
            Get the decode for the Precedence property.
            </summary>
        </member>
        <member name="T:DomainObjects.Tuner">
            <summary>
            The class that describes a DVB tuner.
            </summary>
        </member>
        <member name="M:DomainObjects.Tuner.#ctor(System.String)">
            <summary>
            Initialise a new instance of the Tuner class.
            </summary>
            <param name="path">The Windows path for the tuner.</param>
        </member>
        <member name="M:DomainObjects.Tuner.Supports(DomainObjects.TunerNodeType)">
            <summary>
            Check if the tuner has a particular tuner node type.
            </summary>
            <param name="checkTunerNodeType">The tuner node type.</param>
            <returns>True if the node type is supported; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.Tuner.Supports(DomainObjects.TunerType)">
            <summary>
            Check if the tuner is a particular tuner type.
            </summary>
            <param name="checkTunerType">The tuner type.</param>
            <returns>True if the tuner type is supported; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.Tuner.GetNode(DomainObjects.TunerNodeType)">
            <summary>
            Get a specific tuner node.
            </summary>
            <param name="checkTunerNodeType">The tuner node type requested.</param>
            <returns>The tuner node of the specified type or null if not supported.</returns>
        </member>
        <member name="M:DomainObjects.Tuner.ToString">
            <summary>
            Get a description of this tuner.
            </summary>
            <returns>A string describing the tuner.</returns>
        </member>
        <member name="P:DomainObjects.Tuner.CurrentTuner">
            <summary>
            Get the current tuner.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.TunerCollection">
            <summary>
            Get all the tuners with drivers on this machine.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.TunerPresent">
            <summary>
            Return true if there is at least one tuner installed; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.Path">
            <summary>
            Get the Windows path for the tuner.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.Name">
            <summary>
            Get the name of the tuner.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.TunerNodes">
            <summary>
            Get or set the collection of nodes defined by the tuner.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.Frequency">
            <summary>
            Get or set the frequency being used by the tuner.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.Tag">
            <summary>
            Get or set the tuner tag.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.InUse">
            <summary>
            Return true if the tuner is in use; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.DVBSatelliteNode">
            <summary>
            Get the tuner node that supports DVB-S. 
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.DVBTerrestrialNode">
            <summary>
            Get the tuner node that supports DVB-T.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.DVBCableNode">
            <summary>
            Get the tuner node that supports DVB-C.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.AtscNode">
            <summary>
            Get the tuner node that supports ATSC.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.ClearQamNode">
            <summary>
            Get the tuner node that supports Clear QAM.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.ISDBSatellite">
            <summary>
            Get the tuner node that supports ISDB satellite.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.ISDBTerrestrial">
            <summary>
            Get the tuner node that supports ISDB terrestrial.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.SatelliteTuner">
            <summary>
            Get the tuner that supports DVB-S.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.TerrestrialTuner">
            <summary>
            Get the tuner that supports DVB-T.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.CableTuner">
            <summary>
            Get the tuner that supports DVB-C.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.AtscTuner">
            <summary>
            Get the tuner that supports ATSC.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.ClearQamTuner">
            <summary>
            Get the tuner that supports Clear QAM.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.ISDBSatelliteTuner">
            <summary>
            Get the tuner that supports ISDB satellite.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.ISDBTerrestrialTuner">
            <summary>
            Get the tuner that supports ISDB terrestrial.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.IsServerTuner">
            <summary>
            Returns false. Overridden in derived classes.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.IsSatIpTuner">
            <summary>
            Returns false. Overridden in derived classes.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.IsVBoxTuner">
            <summary>
            Returns false. Overridden in derived classes.
            </summary>
        </member>
        <member name="P:DomainObjects.Tuner.UniqueIdentity">
            <summary>
            Get the unique identity of the tuner.
            </summary>
        </member>
        <member name="T:DomainObjects.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DomainObjects.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DomainObjects.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:DomainObjects.Logger">
            <summary>
            The class that describes the system logger.
            </summary>
        </member>
        <member name="T:DomainObjects.ILogger">
            <summary>
            The interface for an event logger.
            </summary>
        </member>
        <member name="M:DomainObjects.ILogger.Write(System.String)">
            <summary>
            Write a log record.
            </summary>
            <param name="logData">The data to be written.</param>
        </member>
        <member name="M:DomainObjects.Logger.#ctor(System.String)">
            <summary>
            Initialize a new instance of the Logger class with a given log file name.
            </summary>
            <param name="fileName">The name of the log file.</param>
        </member>
        <member name="M:DomainObjects.Logger.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the Logger class with a given log file name and an option to clear.
            </summary>
            <param name="fileName">The name of the log file.</param>
            <param name="clear">True to clear the log; false otherwise.</param>
        </member>
        <member name="M:DomainObjects.Logger.#ctor(System.Boolean)">
            <summary>
            Initialize a new instance of the Logger class for reading.
            </summary>
            <param name="noCreateInput">True if file not to be created; false otherwise.</param>
        </member>
        <member name="M:DomainObjects.Logger.Clear">
            <summary>
            Clear the default log file.
            </summary>
        </member>
        <member name="M:DomainObjects.Logger.Clear(System.String)">
            <summary>
            Clear a log file.
            </summary>
            <param name="logFileName">The name of the log file.</param>
            <returns>Null if the log has been cleared; an error message otherwise.</returns>
        </member>
        <member name="M:DomainObjects.Logger.Reset">
            <summary>
            Clear the log instance.
            </summary>
        </member>
        <member name="M:DomainObjects.Logger.SetFileName(System.String)">
            <summary>
            Set a file name as the default name.
            </summary>
            <param name="name">The name of the file.</param>
        </member>
        <member name="M:DomainObjects.Logger.Write(System.String)">
            <summary>
            Write a log record.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:DomainObjects.Logger.Write(System.String,System.Boolean,System.Boolean)">
            <summary>
            Write a log record.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="addNewLine">True if the record requires a newline; false otherwise.</param>
            <param name="addHeader">True if the record should have the standard header; false otherwise.</param>
        </member>
        <member name="M:DomainObjects.Logger.WriteSeparator(System.String)">
            <summary>
            Write a log separator line.
            </summary>
            <param name="identity">The text of the separator.</param>
        </member>
        <member name="M:DomainObjects.Logger.Dump(System.String,System.Byte[],System.Int32)">
            <summary>
            Log a block of non-ascii data.
            </summary>
            <param name="identity">The heading for the data.</param>
            <param name="buffer">The data to be logged.</param>
            <param name="length">The length of the data to be logged.</param>
        </member>
        <member name="M:DomainObjects.Logger.Dump(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Log a block of non-ascii data.
            </summary>
            <param name="identity">The heading for the data.</param>
            <param name="buffer">The data to be logged.</param>
            <param name="offset">The index of the byte within the data to begin logging.</param>
            <param name="length">The length of the data to be logged.</param>
        </member>
        <member name="M:DomainObjects.Logger.Write(DomainObjects.HistoryRecord)">
            <summary>
            Write a history record.
            </summary>
            <param name="historyRecord">The history record to be logged.</param>
        </member>
        <member name="M:DomainObjects.Logger.IncrementProtocolIndent">
            <summary>
            Increase the protocol logging identation.
            </summary>
        </member>
        <member name="M:DomainObjects.Logger.DecrementProtocolIndent">
            <summary>
            Reduce the protocol logging indentation.
            </summary>
        </member>
        <member name="M:DomainObjects.Logger.Open">
            <summary>
            Open the default log file for reading.
            </summary>
            <returns>True if the file can be opened; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.Logger.Open(System.String)">
            <summary>
            Open a log file for reading.
            </summary>
            <param name="fileName">The full name of the file.</param>
            <returns>True if the file can be opened; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.Logger.Read">
            <summary>
            Read a log record.
            </summary>
            <returns>The log record or null if there are no more records.</returns>
        </member>
        <member name="M:DomainObjects.Logger.Close">
            <summary>
            Close the log file.
            </summary>
        </member>
        <member name="M:DomainObjects.Logger.LogReply(System.String,System.Byte[],System.Int32)">
            <summary>
            Log an array of Ascii bytes.
            </summary>
            <param name="title">The title of the array.</param>
            <param name="buffer">The block of bytes to log.</param>
            <param name="count">The number of bytes to log.</param>
        </member>
        <member name="M:DomainObjects.Logger.LogReply(System.String,System.IO.StreamReader)">
            <summary>
            Log a stream of Ascii bytes.
            </summary>
            <param name="title">The title of the array.</param>
            <param name="streamReader">A reader for the stream.</param>
        </member>
        <member name="P:DomainObjects.Logger.Instance">
            <summary>
            Get an instance of a logger.
            </summary>
        </member>
        <member name="P:DomainObjects.Logger.ProtocolLogger">
            <summary>
            Get the protocol logger instance.
            </summary>
        </member>
        <member name="P:DomainObjects.Logger.ProtocolIndent">
            <summary>
            Get the identation for protocol logging.
            </summary>
        </member>
        <member name="P:DomainObjects.Logger.QuietMode">
            <summary>
            Get or set quiet mode.
            </summary>
        </member>
        <member name="P:DomainObjects.Logger.HistoryFilePath">
            <summary>
            Get the full path to the history file.
            </summary>
        </member>
        <member name="P:DomainObjects.Logger.NetworkFilePath">
            <summary>
            Get the full path to the Network file.
            </summary>
        </member>
        <member name="P:DomainObjects.Logger.StreamFilePath">
            <summary>
            Get the full path to the Stream file.
            </summary>
        </member>
        <member name="T:DomainObjects.TextTranslation">
            <summary>
            The class that handles foreign language translations.
            </summary>
        </member>
        <member name="M:DomainObjects.TextTranslation.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Create an instance of the TextTranslation class.
            </summary>
            <param name="originalText">The original text to be translated.</param>
            <param name="language">The language code to translate to.</param>
            <param name="translation">The translated text.</param>
            <param name="dateLastUsed">The date the original text was last translated.</param>
        </member>
        <member name="M:DomainObjects.TextTranslation.GetLanguages">
            <summary>
            Get a list of supported languages.
            </summary>
            <returns>The list of supported languages.</returns>
        </member>
        <member name="M:DomainObjects.TextTranslation.GetLanguages(System.String)">
            <summary>
            Get a list of supported languages.
            </summary>
            <param name="apiKey">The API key to use.</param>
            <returns>A list of supported languages.</returns>
        </member>
        <member name="M:DomainObjects.TextTranslation.GetLanguageDecode(System.String)">
            <summary>
            Get a description of a language code.
            </summary>
            <param name="languageCode">The language code.</param>
            <returns>A description of the language code.</returns>
        </member>
        <member name="M:DomainObjects.TextTranslation.Process(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Collections.ObjectModel.Collection{DomainObjects.TextTranslationSpec})">
            <summary>
            Process the EPG data for text translation.
            </summary>
            <param name="stations">The collection of channels.</param>
            <param name="translationSpecs">The collection of translation specs.</param>
        </member>
        <member name="T:DomainObjects.TerrestrialProvider">
            <summary>
            The class that describes a terrestrial provider.
            </summary>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.#ctor(System.String)">
            <summary>
            Initialize a new instance of the TerrestrialProvider class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.Load">
            <summary>
            Load the terrestrial collection from the tuning files.
            </summary>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.AddProvider(DomainObjects.TerrestrialProvider)">
            <summary>
            Add a new provider.
            </summary>
            <param name="newProvider">The new provider instance.</param>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.FindProvider(System.String)">
            <summary>
            Find the provider for a name.
            </summary>
            <param name="name">The provider name.</param>
            <returns>The provider or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.FindProvider(System.String,System.String)">
            <summary>
            Find the provider for a country and area.
            </summary>
            <param name="country">The country.</param>
            <param name="area">The area.</param>
            <returns>The provider or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.FindProvider(System.Int32,System.Int32)">
            <summary>
            Find a provider given the broadcast parameters.
            </summary>
            <param name="frequency">The frequency of the provider.</param>
            <param name="bandWidth">The band width of the provider.</param>
            <returns>The provider or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.LogNetworkInfo">
            <summary>
            Log the network information
            </summary>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.Unload">
            <summary>
            Create an xml file containing the frequency definitions.
            </summary>
            <returns>Null if the file was created successfully; an error message otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TerrestrialProvider.EqualTo(DomainObjects.Provider,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="provider">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.TerrestrialProvider.Providers">
            <summary>
            Get the collection of providers.
            </summary>
        </member>
        <member name="P:DomainObjects.TerrestrialProvider.Country">
            <summary>
            Get the country the provider is part of.
            </summary>
        </member>
        <member name="P:DomainObjects.TerrestrialProvider.Area">
            <summary>
            Get the area the provider is part of.
            </summary>
        </member>
        <member name="P:DomainObjects.TerrestrialProvider.Countries">
            <summary>
            Get the collection of provider countries.
            </summary>
        </member>
        <member name="T:DomainObjects.SignalPilot">
            <summary>
            The class that describes the DVB pilot.
            </summary>
        </member>
        <member name="M:DomainObjects.SignalPilot.GetPilots">
            <summary>
            Get a list of the pilot values.
            </summary>
            <returns>A list of the pilot values.</returns>
        </member>
        <member name="M:DomainObjects.SignalPilot.GetIndex(DomainObjects.SignalPilot.Pilot)">
            <summary>
            Get the index number of a pilot value.
            </summary>
            <param name="pilot">The pilot value.</param>
            <returns>The index number.</returns>
        </member>
        <member name="M:DomainObjects.SignalPilot.GetDescription(DomainObjects.SignalPilot.Pilot)">
            <summary>
            Get the descriptionr of a pilot value.
            </summary>
            <param name="pilot">The pilot value.</param>
            <returns>The description.</returns>
        </member>
        <member name="T:DomainObjects.SignalPilot.Pilot">
            <summary>
            The DVB-S2 pilot values.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalPilot.Pilot.NotSet">
            <summary>
            The value is not set.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalPilot.Pilot.NotDefined">
            <summary>
            The value is not defined.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalPilot.Pilot.Off">
            <summary>
            The pilot is off.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalPilot.Pilot.On">
            <summary>
            The pilot is on.
            </summary>
        </member>
        <member name="T:DomainObjects.EPGLink">
            <summary>
            The class that describes an EPG link descriptor.
            </summary>
        </member>
        <member name="M:DomainObjects.EPGLink.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the EPGLink class.
            </summary>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <param name="serviceID">The service ID.</param>
            <param name="timeOffset">The program time offset.</param>
        </member>
        <member name="P:DomainObjects.EPGLink.OriginalNetworkID">
            <summary>
            Get the network ID.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGLink.TransportStreamID">
            <summary>
            Get the transport stream ID.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGLink.ServiceID">
            <summary>
            Get the service ID.
            </summary>
        </member>
        <member name="P:DomainObjects.EPGLink.TimeOffset">
            <summary>
            Get the program time offset.
            </summary>
        </member>
        <member name="T:DomainObjects.EITCarousel">
            <summary>
            The class that describes an EIT carousel.
            </summary>
        </member>
        <member name="M:DomainObjects.EITCarousel.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new instance of the EITCarousel class.
            </summary>
            <param name="name">The name of the carousel.</param>
            <param name="format">The format of the files in the carousel.</param>
            <param name="suffix">The suffix of the files in the carousel.</param>
        </member>
        <member name="P:DomainObjects.EITCarousel.Name">
            <summary>
            Get the name of the carousel.
            </summary>
        </member>
        <member name="P:DomainObjects.EITCarousel.Format">
            <summary>
            Get the format of the files in the carousel.
            </summary>
        </member>
        <member name="P:DomainObjects.EITCarousel.Suffix">
            <summary>
            Get the suffix of the files in the carousel.
            </summary>
        </member>
        <member name="P:DomainObjects.EITCarousel.PidSpecs">
            <summary>
            Get the list of pid specs.
            </summary>
        </member>
        <member name="P:DomainObjects.EITCarousel.ZipExePath">
            <summary>
            Get the path to the Zip executable.
            </summary>
        </member>
        <member name="T:DomainObjects.WMCChannel">
            <summary>
            The class that describes a WMC merged channel.
            </summary>
        </member>
        <member name="M:DomainObjects.WMCChannel.#ctor">
            <summary>
            Initialize a new instance of the WMCChannel class.
            </summary>
        </member>
        <member name="M:DomainObjects.WMCChannel.Load(System.Xml.XmlReader)">
            <summary>
            Load the xml data.
            </summary>
            <param name="reader">The xml reader for the file.</param>
        </member>
        <member name="M:DomainObjects.WMCChannel.LoadDVBTuningInfo(System.Xml.XmlReader)">
            <summary>
            Load the DVB tuning information.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:DomainObjects.WMCChannel.LoadATSCTuningInfo(System.Xml.XmlReader)">
            <summary>
            Load the ATSC tuning information.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:DomainObjects.WMCChannel.LoadDigitalCableTuningInfo(System.Xml.XmlReader)">
            <summary>
            Load the Digital Cable tuning information.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:DomainObjects.WMCChannel.Channels">
            <summary>
            Get the collection of channels.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCChannel.ChannelNumber">
            <summary>
            Get the channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCChannel.CallSign">
            <summary>
            Get the channel call sign.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCChannel.MatchName">
            <summary>
            Get the match name.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCChannel.Uid">
            <summary>
            Get the universal ID.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCChannel.TuningInfos">
            <summary>
            Get the collection of tuning infos.
            </summary>
        </member>
        <member name="T:DomainObjects.TuningSpec">
            <summary>
            The class that describes a tuning spec.
            </summary>
        </member>
        <member name="M:DomainObjects.TuningSpec.#ctor">
            <summary>
            Initialize a new instance of the TuningSpec class.
            </summary>
        </member>
        <member name="M:DomainObjects.TuningSpec.#ctor(DomainObjects.TerrestrialFrequency)">
            <summary>
            Initialize a new instance of the TuningSpec class for a DVB errestrial frequency.
            </summary>
            <param name="frequency">The terrestrial frequency to tune to.</param>
        </member>
        <member name="M:DomainObjects.TuningSpec.#ctor(DomainObjects.Satellite,DomainObjects.SatelliteFrequency)">
            <summary>
            Initialize a new instance of the TuningSpec class for a DVB satellite frequency.
            </summary>
            <param name="satellite">The satellite to tune to.</param>
            <param name="frequency">The frequency to tune to.</param>
        </member>
        <member name="M:DomainObjects.TuningSpec.#ctor(DomainObjects.CableFrequency)">
            <summary>
            Initialize a new instance of the TuningSpec class for a DVB cable frequency.
            </summary>
            <param name="frequency">The frequency to tune to.</param>
        </member>
        <member name="M:DomainObjects.TuningSpec.#ctor(DomainObjects.AtscFrequency)">
            <summary>
            Initialize a new instance of the TuningSpec class for an ATSC frequency.
            </summary>
            <param name="frequency">The frequency to tune to.</param>
        </member>
        <member name="M:DomainObjects.TuningSpec.#ctor(DomainObjects.ClearQamFrequency)">
            <summary>
            Initialize a new instance of the TuningSpec class for a Clear QAM frequency.
            </summary>
            <param name="frequency">The frequency to tune to.</param>
        </member>
        <member name="M:DomainObjects.TuningSpec.#ctor(DomainObjects.Satellite,DomainObjects.ISDBSatelliteFrequency)">
            <summary>
            Initialize a new instance of the TuningSpec class for a ISDB satellite frequency.
            </summary>
            <param name="satellite">The satellite to tune to.</param>
            <param name="frequency">The frequency to tune to.</param>
        </member>
        <member name="M:DomainObjects.TuningSpec.#ctor(DomainObjects.ISDBTerrestrialFrequency)">
            <summary>
            Initialize a new instance of the TuningSpec class for a ISDB errestrial frequency.
            </summary>
            <param name="frequency">The terrestrial frequency to tune to.</param>
        </member>
        <member name="P:DomainObjects.TuningSpec.Frequency">
            <summary>
            Get or set the frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningSpec.Satellite">
            <summary>
            Get or set the satellite.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningSpec.SymbolRate">
            <summary>
            Get or set the symbol rate.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningSpec.FECRate">
            <summary>
            Get or set the FEC rate.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningSpec.SignalPolarization">
            <summary>
            Get or set the signal polarization.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningSpec.Bandwidth">
            <summary>
            Get or set the bandwidth.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningSpec.ChannelNumber">
            <summary>
            Get or set the physical channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.TuningSpec.Modulation">
            <summary>
            Get or set the Modulation.
            </summary>
        </member>
        <member name="T:DomainObjects.AtscProvider">
            <summary>
            The class that describes an ATSC provider.
            </summary>
        </member>
        <member name="M:DomainObjects.AtscProvider.#ctor(System.String)">
            <summary>
            Initialize a new instance of the AtscProvider class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DomainObjects.AtscProvider.Load">
            <summary>
            Load the ATSC collection from the tuning files.
            </summary>
        </member>
        <member name="M:DomainObjects.AtscProvider.AddProvider(DomainObjects.AtscProvider)">
            <summary>
            Add a provider to the list.
            </summary>
            <param name="newProvider">The provider to be added.</param>
        </member>
        <member name="M:DomainObjects.AtscProvider.FindProvider(System.String)">
            <summary>
            Find a provider.
            </summary>
            <param name="name">The name of the provider.</param>
            <returns>The provider or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.AtscProvider.FindProvider(System.Int32,System.Int32,System.Int32,DomainObjects.FECRate,DomainObjects.SignalModulation.Modulation)">
            <summary>
            Find a provider given the broadcast parameters.
            </summary>
            <param name="channelNumber">The channel number of the provider.</param>
            <param name="frequency">The frequency of the provider.</param>
            <param name="symbolRate">The symbol rate of the provider.</param>
            <param name="fecRate">The FEC rate of the provider.</param>
            <param name="modulation">The modulation of the provider.</param>
            <returns>The provider or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.AtscProvider.Unload">
            <summary>
            Create an xml file containing the frequency definitions.
            </summary>
            <returns>Null if the file was created successfully; an error message otherwise.</returns>
        </member>
        <member name="M:DomainObjects.AtscProvider.EqualTo(DomainObjects.Provider,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="provider">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.AtscProvider.Providers">
            <summary>
            Get the collection of providers.
            </summary>
        </member>
        <member name="P:DomainObjects.AtscProvider.Channels">
            <summary>
            Get the collection of channels from the provider.
            </summary>
        </member>
        <member name="T:DomainObjects.WMCUtility">
            <summary>
            The class that describes the WMC utility function.
            </summary>
        </member>
        <member name="M:DomainObjects.WMCUtility.Run(System.String,System.String)">
            <summary>
            Run the utility functions.
            </summary>
            <param name="description">The description of the function.</param>
            <param name="arguments">The parameters to the function.</param>
            <returns></returns>
        </member>
        <member name="T:DomainObjects.WMCATSCTuningInfo">
            <summary>
            The class that describes Windows Media Center ATSC tuning information. 
            </summary>
        </member>
        <member name="T:DomainObjects.WMCTuningInfo">
            <summary>
            The base class for Windows Media Center tuning information.
            </summary>
        </member>
        <member name="M:DomainObjects.WMCTuningInfo.#ctor">
            <summary>
            Initialize a new instance of the WMCTuningInfo class.
            </summary>
        </member>
        <member name="M:DomainObjects.WMCTuningInfo.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the WMCTuningInfo class.
            </summary>
            <param name="frequency">The transponder frequency.</param>
        </member>
        <member name="P:DomainObjects.WMCTuningInfo.Frequency">
            <summary>
            Get the frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.WMCATSCTuningInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the WMCATSCTuningInfo class.
            </summary>
            <param name="majorChannel">The major channel number.</param>
            <param name="minorChannel">The minor channel number.</param>
        </member>
        <member name="P:DomainObjects.WMCATSCTuningInfo.MajorChannel">
            <summary>
            Get the major channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCATSCTuningInfo.MinorChannel">
            <summary>
            Get the minor channel number.
            </summary>
        </member>
        <member name="T:DomainObjects.EventCategorySpec">
            <summary>
            The class the encapsulates the different sources of an event category.
            </summary>
        </member>
        <member name="M:DomainObjects.EventCategorySpec.#ctor(System.String)">
            <summary>
            Creates a new instance of the EventCategorySpec class from a description.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:DomainObjects.EventCategorySpec.#ctor(DomainObjects.IEventCategory)">
            <summary>
            Creates a new instance of the EventCategorySpec class from the category interface.
            </summary>
            <param name="eventCategory">The category interface.</param>
        </member>
        <member name="M:DomainObjects.EventCategorySpec.GetDescription(DomainObjects.EventCategoryMode)">
            <summary>
            Get the category description based on the target output.
            </summary>
            <param name="mode">The output target.</param>
            <returns></returns>
        </member>
        <member name="P:DomainObjects.EventCategorySpec.Description">
            <summary>
            Get the event description.
            </summary>
        </member>
        <member name="P:DomainObjects.EventCategorySpec.EventCategory">
            <summary>
            Get the event category interface.
            </summary>
        </member>
        <member name="T:DomainObjects.Channel">
            <summary>
            The class that describes a program channel.
            </summary>
        </member>
        <member name="M:DomainObjects.Channel.#ctor">
            <summary>
            Initialize a new instance of the Channel class.
            </summary>
        </member>
        <member name="M:DomainObjects.Channel.AddChannel(DomainObjects.Channel)">
            <summary>
            Add a channel to the collection.
            </summary>
            <param name="newChannel">The channel to be added.</param>
        </member>
        <member name="M:DomainObjects.Channel.CreateChannelMapping(DomainObjects.TVStation)">
            <summary>
            Map the channel to a TV station.
            </summary>
            <param name="station">The TV station to be mapped.</param>
        </member>
        <member name="M:DomainObjects.Channel.LogChannelMapping(DomainObjects.Logger)">
            <summary>
            Log all the channel mappings.
            </summary>
            <param name="logger">The logger instance to be used.</param>
        </member>
        <member name="M:DomainObjects.Channel.FindChannel(System.Int32)">
            <summary>
            Find a channel.
            </summary>
            <param name="channelID">The channel ID.</param>
            <returns>A channel instance or null if the channel cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Channel.FindChannel(System.Int32,System.Int32,System.Int32)">
            <summary>
            Find a channel.
            </summary>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <param name="serviceID">The service ID.</param>
            <returns>A channel instance or null if the channel cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Channel.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="M:DomainObjects.Channel.GetChannelsInUserNumberOrder">
            <summary>
            Get the channels in user channel number order.
            </summary>
            <returns>The channels sorted in channel number order.</returns>
        </member>
        <member name="M:DomainObjects.Channel.LogChannels">
            <summary>
            Log all the channels stored.
            </summary>
        </member>
        <member name="M:DomainObjects.Channel.LogChannelsInChannelIDOrder">
            <summary>
            Log all the channels stored in channel number order.
            </summary>
        </member>
        <member name="M:DomainObjects.Channel.LogChannelsInChannelNetworkOrder">
            <summary>
            Log all the channels stored in network order.
            </summary>
        </member>
        <member name="M:DomainObjects.Channel.LogChannelsInServiceIdOrder">
            <summary>
            Log all the channels stored in service order.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.Channels">
            <summary>
            Get the collection of channels.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.OriginalNetworkID">
            <summary>
            Get or set the ONID.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.TransportStreamID">
            <summary>
            Get or set the TSID.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.ServiceID">
            <summary>
            Get or set the SID.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.ChannelID">
            <summary>
            Get or set the channel ID.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.UserChannel">
            <summary>
            Get or set the user channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.BouquetID">
            <summary>
            Get or set the bouquet ID of the bouquet containing the channel.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.Region">
            <summary>
            Get or set the region containing the channel.
            </summary>
        </member>
        <member name="P:DomainObjects.Channel.Flags">
            <summary>
            Get or set the channel flag bytes.
            </summary>
        </member>
        <member name="T:DomainObjects.OutputFileMXF">
            <summary>
            The class that creates an MXF file for import to 7MC.
            </summary>
        </member>
        <member name="M:DomainObjects.OutputFileMXF.Process">
            <summary>
            Create the MXF file.
            </summary>
            <returns>An error message if the process fails; null otherwise.</returns>
        </member>
        <member name="T:DomainObjects.ITunerDataProvider">
            <summary>
            The interface for obtaining samples from the input stream.
            </summary>
        </member>
        <member name="M:DomainObjects.ITunerDataProvider.Dispose">
            <summary>
            Dispose of the data provider.
            </summary>
        </member>
        <member name="P:DomainObjects.ITunerDataProvider.SignalPresent">
            <summary>
            Return true if signal present; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.ITunerDataProvider.SignalLocked">
            <summary>
            Return true if the signal is locked; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.ITunerDataProvider.SignalQuality">
            <summary>
            Get the signal quality.
            </summary>
        </member>
        <member name="P:DomainObjects.ITunerDataProvider.SignalStrength">
            <summary>
            Get the signal strength.
            </summary>
        </member>
        <member name="P:DomainObjects.ITunerDataProvider.Tuner">
            <summary>
            Get the current tuner object.
            </summary>
        </member>
        <member name="T:DomainObjects.ISampleDataProvider">
            <summary>
            The interface for obtaining samples from the input stream.
            </summary>
        </member>
        <member name="M:DomainObjects.ISampleDataProvider.ChangePidMapping(System.Int32)">
            <summary>
            Change the PID mapping.
            </summary>
            <param name="pid">The PID to be mapped.</param>
        </member>
        <member name="M:DomainObjects.ISampleDataProvider.ChangePidMapping(System.Int32[])">
            <summary>
            Change the PID mapping.
            </summary>
            <param name="pids">A list of PID's to be mapped.</param>
        </member>
        <member name="P:DomainObjects.ISampleDataProvider.BufferSpaceUsed">
            <summary>
            Get the amount of buffer space used in bytes
            </summary>
        </member>
        <member name="P:DomainObjects.ISampleDataProvider.BufferAddress">
            <summary>
            Get the address of the buffer.
            </summary>
        </member>
        <member name="P:DomainObjects.ISampleDataProvider.Frequency">
            <summary>
            Get the current frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.ISampleDataProvider.SyncByteSearches">
            <summary>
            Get the number of sync byte searches
            </summary>
        </member>
        <member name="P:DomainObjects.ISampleDataProvider.SamplesDropped">
            <summary>
            Get the number of samples dropped
            </summary>
        </member>
        <member name="P:DomainObjects.ISampleDataProvider.MaximumSampleSize">
            <summary>
            Get the maximum sample size
            </summary>
        </member>
        <member name="P:DomainObjects.ISampleDataProvider.DumpFileSize">
            <summary>
            Get the dump file size
            </summary>
        </member>
        <member name="T:DomainObjects.EastWestFlag">
            <summary>
            The class that converts the DVB east flag.
            </summary>
        </member>
        <member name="M:DomainObjects.EastWestFlag.ConvertDVBEastFlagToChar(System.Boolean)">
            <summary>
            Convert the DVB east flag to a single character string.
            </summary>
            <param name="eastFlag">The DVB east flag.</param>
            <returns>The converted character.</returns>
        </member>
        <member name="M:DomainObjects.EastWestFlag.ConvertDVBEastFlagTostring(System.Boolean)">
            <summary>
            Convert the DVB east flag to a text string.
            </summary>
            <param name="eastFlag">The DVB east flag.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:DomainObjects.Person">
            <summary>
            The class that describes a cast or crew member.
            </summary>
        </member>
        <member name="M:DomainObjects.Person.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the Person class.
            </summary>
            <param name="name">The name of the person.</param>
            <param name="role">The role the person plays.</param>
        </member>
        <member name="M:DomainObjects.Person.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initialize a new instance of the Person class.
            </summary>
            <param name="name">The name of the person.</param>
            <param name="role">The role the person plays.</param>
            <param name="character">The character the person plays.</param>
            <param name="rank">The billing order for the person.</param>
        </member>
        <member name="M:DomainObjects.Person.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>The name of the person.</returns>
        </member>
        <member name="P:DomainObjects.Person.Name">
            <summary>
            Get the name of the person.
            </summary>
        </member>
        <member name="P:DomainObjects.Person.Role">
            <summary>
            Get the role the person plays eg director.
            </summary>
        </member>
        <member name="P:DomainObjects.Person.Character">
            <summary>
            Get the character the person plays.
            </summary>
        </member>
        <member name="P:DomainObjects.Person.Rank">
            <summary>
            Get the billing order for the person.
            </summary>
        </member>
        <member name="T:DomainObjects.TimeOffsetChannel">
            <summary>
            The class that describes a time offset channel.
            </summary>
        </member>
        <member name="M:DomainObjects.TimeOffsetChannel.#ctor(DomainObjects.TVStation,DomainObjects.TVStation,System.Int32)">
            <summary>
            Initialize a new instance of the TimeOffsetChannel.
            </summary>
            <param name="sourceChannel">The source channel.</param>
            <param name="destinationChannel">The destination channel.</param>
            <param name="offset">The time offset in hours.</param>
        </member>
        <member name="P:DomainObjects.TimeOffsetChannel.SourceChannel">
            <summary>
            Get the source channel.
            </summary>
        </member>
        <member name="P:DomainObjects.TimeOffsetChannel.DestinationChannel">
            <summary>
            Get the destination channel.
            </summary>
        </member>
        <member name="P:DomainObjects.TimeOffsetChannel.Offset">
            <summary>
            Get the offset in hours.
            </summary>
        </member>
        <member name="T:DomainObjects.Polarization">
            <summary>
            The class that provides polarization conversions.
            </summary>
        </member>
        <member name="M:DomainObjects.Polarization.ConvertDVBPolarizationToChar(System.Int32)">
            <summary>
            Convert the DVB polarization to a single character string.
            </summary>
            <param name="polarization">The DVB polarization.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DomainObjects.Polarization.ConvertDVBPolarizationToString(System.Int32)">
            <summary>
            Convert the DVB polarization to a text string.
            </summary>
            <param name="polarization">The DVB polarization.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DomainObjects.Polarization.ConvertDVBPolarizationDVBLogic(System.Int32)">
            <summary>
            Convert the DVB polarization to the DVBLink polarization.
            </summary>
            <param name="polarization">The DVB polarization.</param>
            <returns>The DVBLink polarization.</returns>
        </member>
        <member name="T:DomainObjects.EditSpec">
            <summary>
            The class that describes a programme title or description text string.
            </summary>
        </member>
        <member name="M:DomainObjects.EditSpec.#ctor(System.String,DomainObjects.TextLocation)">
            <summary>
            Initialize a new instance of the EditSpec class.
            </summary>
            <param name="text">The substring text.</param>
            <param name="location">The position of the substring.</param>
        </member>
        <member name="M:DomainObjects.EditSpec.#ctor(System.String,DomainObjects.TextLocation,System.String)">
            <summary>
            Initialize a new instance of the EditSpec class.
            </summary>
            <param name="text">The substring text.</param>
            <param name="location">The position of the substring.</param>
            <param name="replacementText">The new text.</param>
        </member>
        <member name="M:DomainObjects.EditSpec.ToString">
            <summary>
            Return a description of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.EditSpec.ProcessTitle(System.String)">
            <summary>
            Process a programme title to remove or replace text.
            </summary>
            <param name="title">The title to process.</param>
            <returns>The edited string.</returns>
        </member>
        <member name="M:DomainObjects.EditSpec.ProcessDescription(System.String)">
            <summary>
            Process a programme description to remove or replace text.
            </summary>
            <param name="description">The description to process.</param>
            <returns>The edited string.</returns>
        </member>
        <member name="P:DomainObjects.EditSpec.Text">
            <summary>
            Get or set the text.
            </summary>
        </member>
        <member name="P:DomainObjects.EditSpec.Location">
            <summary>
            Get or set the description.
            </summary>
        </member>
        <member name="P:DomainObjects.EditSpec.ReplacementMode">
            <summary>
            Get or set the text replacement mode.
            </summary>
        </member>
        <member name="P:DomainObjects.EditSpec.ReplacementText">
            <summary>
            Get or set the replacement text.
            </summary>
        </member>
        <member name="P:DomainObjects.EditSpec.ApplyToTitles">
            <summary>
            Get or set whether to apply to titles.
            </summary>
        </member>
        <member name="P:DomainObjects.EditSpec.ApplyToDescriptions">
            <summary>
            Get or set whether to apply to descriptions.
            </summary>
        </member>
        <member name="P:DomainObjects.EditSpec.ActualText">
            <summary>
            Get or set the actual search text.
            </summary>
        </member>
        <member name="P:DomainObjects.EditSpec.ActualReplacementText">
            <summary>
            Get or set the actual replacement text.
            </summary>
        </member>
        <member name="T:DomainObjects.NetworkMap">
            <summary>
            The class that represents a network map.
            </summary>
        </member>
        <member name="M:DomainObjects.NetworkMap.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the NetworkMap class.
            </summary>
            <param name="originalNetworkId">The original network ID.</param>
        </member>
        <member name="M:DomainObjects.NetworkMap.FindMap(System.Int32)">
            <summary>
            Find a network map.
            </summary>
            <param name="originalNetworkId">The original network ID.</param>
            <returns>The network map or null if it cannot be found.</returns>
        </member>
        <member name="M:DomainObjects.NetworkMap.CheckForService(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check if a service is present.
            </summary>
            <param name="originalNetworkId">The original network ID.</param>
            <param name="transportStreamId">The transport stream ID</param>
            <param name="serviceId">The service ID</param>
            <returns>True if the service is present; false otherwsir.</returns>
        </member>
        <member name="M:DomainObjects.NetworkMap.FindFrequency(System.Int32,System.Int32)">
            <summary>
            Find a frequency.
            </summary>
            <param name="originalNetworkId">The original network ID.</param>
            <param name="transportStreamId">The transport stream ID</param>
            <returns>The tuning frequency or null if it cannot be found.</returns>
        </member>
        <member name="M:DomainObjects.NetworkMap.FindMapEntry(System.Int32)">
            <summary>
            Find a map entry.
            </summary>
            <param name="transportStreamId">The transport stream ID.</param>
            <returns>The network map entry or null if it cannot be found.</returns>
        </member>
        <member name="M:DomainObjects.NetworkMap.LogMapEntry">
            <summary>
            Log map entries.
            </summary>
        </member>
        <member name="M:DomainObjects.NetworkMap.LogMapEntries">
            <summary>
            Log the collection of map entries.
            </summary>
        </member>
        <member name="P:DomainObjects.NetworkMap.NetworkMaps">
            <summary>
            Get the collection of network maps.
            </summary>
        </member>
        <member name="P:DomainObjects.NetworkMap.OriginalNetworkId">
            <summary>
            Get the original network ID.
            </summary>
        </member>
        <member name="P:DomainObjects.NetworkMap.MapEntries">
            <summary>
            Get the collection of network map entries.
            </summary>
        </member>
        <member name="T:DomainObjects.EITCarouselPidSpec">
            <summary>
            The class that defines the details for an EIT carousel pid.
            </summary>
        </member>
        <member name="M:DomainObjects.EITCarouselPidSpec.#ctor">
            <summary>
            Initialize a new instance of the EITCarouselPidSpec class. 
            </summary>
        </member>
        <member name="P:DomainObjects.EITCarouselPidSpec.Pid">
            <summary>
            Get the pid number.
            </summary>
        </member>
        <member name="P:DomainObjects.EITCarouselPidSpec.CarouselDirectories">
            <summary>
            Get the list of carousel directories.
            </summary>
        </member>
        <member name="P:DomainObjects.EITCarouselPidSpec.ZipDirectories">
            <summary>
            Get the list of zip directories.
            </summary>
        </member>
        <member name="T:DomainObjects.ClearQamFrequency">
            <summary>
            The class that describes an Clear QAM frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.ClearQamFrequency.#ctor">
            <summary>
            Initialize a new instance of the ClearQamFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.ClearQamFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.ClearQamFrequency.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="M:DomainObjects.ClearQamFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.ClearQamFrequency.Unload(System.Xml.XmlWriter,System.String)">
            <summary>
            Create the xml definition for the frequency.
            </summary>
            <param name="writer">An xml writer instance.</param>
            <param name="fullPath">The full path of the file being created.</param>
            <returns>Null if the entry was created successfully; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.ClearQamFrequency.ChannelNumber">
            <summary>
            Get or set the channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.ClearQamFrequency.SymbolRate">
            <summary>
            Get or set the symbol rate.
            </summary>
        </member>
        <member name="P:DomainObjects.ClearQamFrequency.FEC">
            <summary>
            Get or set the forward error correction system.
            </summary>
        </member>
        <member name="P:DomainObjects.ClearQamFrequency.Modulation">
            <summary>
            Get or set the modulation.
            </summary>
        </member>
        <member name="P:DomainObjects.ClearQamFrequency.TunerType">
            <summary>
            Get the tuner type for this type of frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.ByteConvertEntry">
            <summary>
            The class that describes a byte conversion entry.
            </summary>
        </member>
        <member name="M:DomainObjects.ByteConvertEntry.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initialize a new instance of the ByteConvertEntry class.
            </summary>
            <param name="controlCode">The control code for the byte.</param>
            <param name="originalValue">The original value of the byte.</param>
            <param name="convertedValue">The converted value of the byte.</param>
        </member>
        <member name="P:DomainObjects.ByteConvertEntry.ControlCode">
            <summary>
            Get the control code.
            </summary>
        </member>
        <member name="P:DomainObjects.ByteConvertEntry.OriginalValue">
            <summary>
            Get the original value.
            </summary>
        </member>
        <member name="P:DomainObjects.ByteConvertEntry.ConvertedValue">
            <summary>
            Get the converted value;
            </summary>
        </member>
        <member name="T:DomainObjects.SignalRollOff">
            <summary>
            The class that describes the DVB-S2 roll off.
            </summary>
        </member>
        <member name="M:DomainObjects.SignalRollOff.ConvertDVBRollOff(System.Int32)">
            <summary>
            Convert the DVB roll off to the internal roll off.
            </summary>
            <param name="rollOff">The roll off to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DomainObjects.SignalRollOff.GetRollOffs">
            <summary>
            Get a list of rolloff values.
            </summary>
            <returns>A list of rolloff values.</returns>
        </member>
        <member name="M:DomainObjects.SignalRollOff.GetIndex(DomainObjects.SignalRollOff.RollOff)">
            <summary>
            Get the index number of a rolloff value.
            </summary>
            <param name="rollOff">The rolloff value.</param>
            <returns>The index number.</returns>
        </member>
        <member name="M:DomainObjects.SignalRollOff.GetRollOff(System.Int32)">
            <summary>
            Get the rolloff from an index.
            </summary>
            <param name="index">The index value.</param>
            <returns>The rollOff.</returns>
        </member>
        <member name="M:DomainObjects.SignalRollOff.GetXml(DomainObjects.SignalRollOff.RollOff)">
            <summary>
            Get the xml value for the rolloff.
            </summary>
            <returns>The rollOff.</returns>
        </member>
        <member name="M:DomainObjects.SignalRollOff.GetDescription(DomainObjects.SignalRollOff.RollOff)">
            <summary>
            Get the description for the rolloff.
            </summary>
            <returns>The rollOff.</returns>
        </member>
        <member name="T:DomainObjects.SignalRollOff.RollOff">
            <summary>
            The DVB-S2 roll-off values.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalRollOff.RollOff.NotSet">
            <summary>
            The value is not set.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalRollOff.RollOff.NotDefined">
            <summary>
            The value is not defined.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalRollOff.RollOff.RollOff20">
            <summary>
            Roll off factor is 20%
            </summary>
        </member>
        <member name="F:DomainObjects.SignalRollOff.RollOff.RollOff25">
            <summary>
            Roll off factor is 25%
            </summary>
        </member>
        <member name="F:DomainObjects.SignalRollOff.RollOff.RollOff35">
            <summary>
            Roll off factor is 35%
            </summary>
        </member>
        <member name="T:DomainObjects.OutputFileDVBViewer">
            <summary>
            The DVBViewer output class.
            </summary>
        </member>
        <member name="M:DomainObjects.OutputFileDVBViewer.Process">
            <summary>
            Create the DVBViewer EPG entries.
            </summary>
            <returns>Null if the process succeeeded; an error message otherwise.</returns>
        </member>
        <member name="T:DomainObjects.ISDBTerrestrialProvider">
            <summary>
            The class that describes an ISDB terrestrial provider.
            </summary>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialProvider.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ISDBTerrestrialProvider class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialProvider.Load">
            <summary>
            Load the ATSC collection from the tuning files.
            </summary>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialProvider.AddProvider(DomainObjects.ISDBTerrestrialProvider)">
            <summary>
            Add a provider to the list.
            </summary>
            <param name="newProvider">The provider to be added.</param>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialProvider.FindProvider(System.String)">
            <summary>
            Find a provider.
            </summary>
            <param name="name">The name of the provider.</param>
            <returns>The provider or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialProvider.FindProvider(System.Int32,System.Int32)">
            <summary>
            Find a provider given the broadcast parameters.
            </summary>
            <param name="frequency">The frequency of the provider.</param>
            <param name="bandWidth">The band width of the provider.</param>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialProvider.Unload">
            <summary>
            Create an xml file containing the frequency definitions.
            </summary>
            <returns>Null if the file was created successfully; an error message otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ISDBTerrestrialProvider.EqualTo(DomainObjects.Provider,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="provider">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.ISDBTerrestrialProvider.Providers">
            <summary>
            Get the collection of providers.
            </summary>
        </member>
        <member name="P:DomainObjects.ISDBTerrestrialProvider.Channels">
            <summary>
            Get the collection of channels from the provider.
            </summary>
        </member>
        <member name="T:DomainObjects.WMCDigitalCableTuningInfo">
            <summary>
            The class that describes Windows Media Center digital cable tuning information. 
            </summary>
        </member>
        <member name="M:DomainObjects.WMCDigitalCableTuningInfo.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the WMCDigitalCableTuningInfo class.
            </summary>
            <param name="channelNumber">The channel number.</param>
        </member>
        <member name="P:DomainObjects.WMCDigitalCableTuningInfo.ChannelNumber">
            <summary>
            Get the major channel number.
            </summary>
        </member>
        <member name="T:DomainObjects.TextTranslationReply">
            <summary>
            The class that describes a translation response.
            </summary>
        </member>
        <member name="M:DomainObjects.TextTranslationReply.#ctor">
            <summary>
            Initialize a new instance of the TextTranslationReply class.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationReply.ResponseCode">
            <summary>
            Get or set the response code.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationReply.Detected">
            <summary>
            Get or set the languages detected.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationReply.LanguageSpec">
            <summary>
            Get or set the conversion requested.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationReply.Translations">
            <summary>
            Get or set the translated text.
            </summary>
        </member>
        <member name="T:DomainObjects.XmltvProgramCategory">
            <summary>
            The class that describes an XMLTV program category.
            </summary>
        </member>
        <member name="M:DomainObjects.XmltvProgramCategory.FindCategory(System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DomainObjects.XmltvProgramCategory.AddCategory(System.String,System.String)">
            <summary>
            Add a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <param name="description">The full category description.</param>
        </member>
        <member name="M:DomainObjects.XmltvProgramCategory.Load">
            <summary>
            Load the categories from the standard file.
            </summary>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.XmltvProgramCategory.Load(System.String)">
            <summary>
            Load the categories from a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.XmltvProgramCategory.Save(System.String)">
            <summary>
            Save the categories to a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>Error message if it failed; null otherwise.</returns>
        </member>
        <member name="M:DomainObjects.XmltvProgramCategory.AddUndefinedCategory(System.String,System.String)">
            <summary>
            Add an undefined category to the collection of undefined contents.
            </summary>
            <param name="category">The category identifier.</param>
            <param name="sampleEvent">The description of a sample event.</param>
        </member>
        <member name="P:DomainObjects.XmltvProgramCategory.Categories">
            <summary>
            Get the collection of XMLTV categories.
            </summary>
        </member>
        <member name="P:DomainObjects.XmltvProgramCategory.UndefinedCategories">
            <summary>
            Get the collection of undefined categories.
            </summary>
        </member>
        <member name="P:DomainObjects.XmltvProgramCategory.FileName">
            <summary>
            Get the standard filename.
            </summary>
        </member>
        <member name="T:DomainObjects.ClearQamProvider">
            <summary>
            The class that describes an Clear QAM provider.
            </summary>
        </member>
        <member name="M:DomainObjects.ClearQamProvider.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ClearQamProvider class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DomainObjects.ClearQamProvider.Load">
            <summary>
            Load the ATSC collection from the tuning files.
            </summary>
        </member>
        <member name="M:DomainObjects.ClearQamProvider.AddProvider(DomainObjects.ClearQamProvider)">
            <summary>
            Add a provider to the list.
            </summary>
            <param name="newProvider">The provider to be added.</param>
        </member>
        <member name="M:DomainObjects.ClearQamProvider.FindProvider(System.String)">
            <summary>
            Find a provider.
            </summary>
            <param name="name">The name of the provider.</param>
            <returns>The provider or null if the name cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ClearQamProvider.FindProvider(System.Int32,System.Int32,System.Int32,DomainObjects.FECRate,DomainObjects.SignalModulation.Modulation)">
            <summary>
            Find a provider given the broadcast parameters.
            </summary>
            <param name="channelNumber">The channel number of the provider.</param>
            <param name="frequency">The frequency of the provider.</param>
            <param name="symbolRate">The symbol rate of the provider.</param>
            <param name="fecRate">The FEC rate of the provider.</param>
            <param name="modulation">The modulation of the provider.</param>
            <returns>The provider or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ClearQamProvider.Unload">
            <summary>
            Create an xml file containing the frequency definitions.
            </summary>
            <returns>Null if the file was created successfully; an error message otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ClearQamProvider.EqualTo(DomainObjects.Provider,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="provider">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.ClearQamProvider.Providers">
            <summary>
            Get the collection of providers.
            </summary>
        </member>
        <member name="P:DomainObjects.ClearQamProvider.Channels">
            <summary>
            Get the collection of channels from the provider.
            </summary>
        </member>
        <member name="T:DomainObjects.AtscFrequency">
            <summary>
            The class that describes an ATSC frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.AtscFrequency.#ctor">
            <summary>
            Initialize a new instance of the AtscFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.AtscFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.GetHashCode">
            <summary>
            Get a hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.Equals(System.Object)">
            <summary>
            Compare another object with this one.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the objects are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.op_Equality(DomainObjects.AtscFrequency,DomainObjects.AtscFrequency)">
            <summary>
            Compare two instances for equality.
            </summary>
            <param name="frequency1">The first frequency.</param>
            <param name="frequency2">The second frequency</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.op_Inequality(DomainObjects.AtscFrequency,DomainObjects.AtscFrequency)">
            <summary>
            Compare two instances for inequality.
            </summary>
            <param name="frequency1">The first frequency.</param>
            <param name="frequency2">The second frequency</param>
            <returns>True if the instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.op_GreaterThan(DomainObjects.AtscFrequency,DomainObjects.AtscFrequency)">
            <summary>
            Compare two instances for greater than.
            </summary>
            <param name="frequency1">The first frequency.</param>
            <param name="frequency2">The second frequency</param>
            <returns>True if the instance 1 is greater than instance 2; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.op_LessThan(DomainObjects.AtscFrequency,DomainObjects.AtscFrequency)">
            <summary>
            Compare two instances for less than.
            </summary>
            <param name="frequency1">The first frequency.</param>
            <param name="frequency2">The second frequency</param>
            <returns>True if the instance 1 is less than instance 2; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.AtscFrequency.Unload(System.Xml.XmlWriter,System.String)">
            <summary>
            Create the xml definition for the frequency.
            </summary>
            <param name="writer">An xml writer instance.</param>
            <param name="fullPath">The full path of the file being created.</param>
            <returns>Null if the entry was created successfully; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.AtscFrequency.SymbolRate">
            <summary>
            Get or set the symbol rate.
            </summary>
        </member>
        <member name="P:DomainObjects.AtscFrequency.FEC">
            <summary>
            Get or set the forward error correction system.
            </summary>
        </member>
        <member name="P:DomainObjects.AtscFrequency.Modulation">
            <summary>
            Get or set the modulation.
            </summary>
        </member>
        <member name="P:DomainObjects.AtscFrequency.TunerType">
            <summary>
            Get the tuner type for this type of frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.TVStation">
            <summary>
            The class that describes a TV Station.
            </summary>
        </member>
        <member name="M:DomainObjects.TVStation.#ctor(System.String)">
            <summary>
            Initialize a new instance of the TVStation class with the station name.
            </summary>
            <param name="name">The name of the station.</param>
        </member>
        <member name="M:DomainObjects.TVStation.ToString">
            <summary>
            Get a string representing this instance.
            </summary>
            <returns>A description of this instance.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.AddMapEntry(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add an entry to the EIT map table.
            </summary>
            <remarks>
            All parameters are extracted from the DVB protocol that delivers the EIT section.
            </remarks>
            <param name="tableID">The table ID of the new entry.</param>
            <param name="sectionNumber">The section number of the new entry.</param>
            <param name="lastTableID">The last table ID of the new entry.</param>
            <param name="lastSectionNumber">The last section number of the new entry.</param>
            <param name="segmentLastSectionNumber">The last section number of the segment for the new entry.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.TVStation.CheckStationsComplete(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Int32)">
            <summary>
            Check that all the stations for a specified frequency have completed acquiring data (EIT only).
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="frequency">The frequency to be checked.</param>
            <returns>True if data acquisition is complete; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.FindStation(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Int32)">
            <summary>
            Find a station.
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="serviceID">The service ID of the station.</param>
            <returns>The station object or null if it does not exist.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.FindCurrentStation(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Int32)">
            <summary>
            Find a station from the current scan.
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="serviceID">The service ID of the station.</param>
            <returns>The station object or null if it does not exist.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.FindStation(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Int32,System.Int32)">
            <summary>
            Find a station.
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="frequency">The frequency of the station.</param>
            <param name="serviceID">The service ID of the station.</param>
            <returns>The station object or null if it does not exist.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.FindStation(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Int32,System.Int32,System.Int32)">
            <summary>
            Find a station.
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="originalNetworkID">The original network ID of the station.</param>
            <param name="transportStreamID">The transport stream ID of the station.</param>
            <param name="serviceID">The service ID of the station.</param>
            <returns>The station object or null.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.FindEPGLinks(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the stations that have EPG links that point to a specified NID/TID/SID.
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <param name="serviceID">The service ID.</param>
            <returns>The collection of stations</returns>
        </member>
        <member name="M:DomainObjects.TVStation.LogIncompleteEITMapEntries(System.Collections.ObjectModel.Collection{DomainObjects.TVStation})">
            <summary>
            Log stations with incomplete EIT EPG data.
            </summary>
            <param name="stations">The list of stations to process.</param>
        </member>
        <member name="M:DomainObjects.TVStation.AddStation(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},DomainObjects.TVStation)">
            <summary>
            Add a station to the collection of stations to be processed rejecting duplicates.
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="newStation">The station to be added.</param>
        </member>
        <member name="M:DomainObjects.TVStation.CreateStation(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Int32)">
            <summary>
            Create a station instance.
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="serviceID">The service ID of the station.</param>
            <returns>A TVStation instance.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.CreateStation(System.Collections.ObjectModel.Collection{DomainObjects.TVStation},System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a station instance.
            </summary>
            <param name="stations">The list of stations to process.</param>
            <param name="originalNetworkID">The ONID of the station.</param>
            <param name="transportStreamID">The TSID of the station.</param>
            <param name="serviceID">The SID of the station.</param>
            <returns>A TVStation instance.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.AddEPGEntry(DomainObjects.EPGEntry)">
            <summary>
            Add an EPG entry for the station.
            </summary>
            <param name="newEntry">The EPG entry.</param>
            <returns>True if it was added; false if it replaced an existing entry.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.Update(DomainObjects.TVStation)">
            <summary>
            Update this instance from another.
            </summary>
            <param name="station">The instance containing the update data.</param>
        </member>
        <member name="M:DomainObjects.TVStation.CompareForSorting(DomainObjects.TVStation,System.String)">
            <summary>
            Compare this instance with another for sorting purposes.
            </summary>
            <param name="station">The other instance.</param>
            <param name="keyName">The name of the key to compare on.</param>
            <returns>Zero if the instances are equal, Greater than 0 if this instance is greater; less than zero otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.Clone">
            <summary>
            Return a copy of this instance.
            </summary>
            <returns>A new instance with the same properties as this instance.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.EqualTo(DomainObjects.TVStation)">
            <summary>
            Checks this instance for equality with another.
            </summary>
            <param name="station">The other instance.</param>
            <returns>True if the other instance is equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.Load(System.String)">
            <summary>
            Load the station collection from an XML file.
            </summary>
            <param name="fileName">The full name of the xml file.</param>
            <returns>A collection of stations or null if the file cannot be opened.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.Unload(System.String,System.Collections.ObjectModel.Collection{DomainObjects.TVStation})">
            <summary>
            Unload a station collection to an XML file.
            </summary>
            <param name="fileName">The full name of the file.</param>
            <param name="stations">The station collection.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.TVStation.GetNameSortedStations(System.Collections.ObjectModel.Collection{DomainObjects.TVStation})">
            <summary>
            Sort a list of stations by name or new name.
            </summary>
            <param name="stations">The list of stations.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.GetUserChannelSortedStations(System.Collections.ObjectModel.Collection{DomainObjects.TVStation})">
            <summary>
            Sort a list of stations by user channel number.
            </summary>
            <param name="stations">The list of stations.</param>
            <returns>The sorted list.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.EITComplete(System.Collections.ObjectModel.Collection{DomainObjects.TVStation})">
            <summary>
            Get the count of stations where the EIT data is complete.
            </summary>
            <param name="stations">The list of stations.</param>
            <returns>The number of stations with completed data.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.EITNotComplete(System.Collections.ObjectModel.Collection{DomainObjects.TVStation})">
            <summary>
            Get the count of stations where the EIT data is not complete.
            </summary>
            <param name="stations">The list of stations.</param>
            <returns>The number of stations with incomplete data.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.EPGCount(System.Collections.ObjectModel.Collection{DomainObjects.TVStation})">
            <summary>
            Get the total number of EPG entries for all stations.
            </summary>
            <param name="stations">The list of stations.</param>
            <returns>The number of EPG entries.</returns>
        </member>
        <member name="M:DomainObjects.TVStation.EPGCountIncluded(System.Collections.ObjectModel.Collection{DomainObjects.TVStation})">
            <summary>
            Get the total number of EPG entries for included stations.
            </summary>
            <param name="stations">The list of stations.</param>
            <returns>The number of EPG entries.</returns>
        </member>
        <member name="E:DomainObjects.TVStation.PropertyChanged">
            <summary>
            The property changed event.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.TotalEpgCount">
            <summary>
            Get the total number of EPG entries.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.EPGCollection">
            <summary>
            Get or set the collection of EPG entries for the station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.Name">
            <summary>
            Get or set the name of the station. 
            <remarks>
            Stations in the excluded list have a dummy name as they are identified by service ID.
            </remarks>
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.FixedLengthName">
            <summary>
            Get or set the fixed length name of the station. 
            <remarks>
            Stations in the excluded list have a dummy name as they are identified by the full ID.
            </remarks>
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.Frequency">
            <summary>
            Get or set the frequency the station transmits on.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ActualFrequency">
            <summary>
            Get or set the actual frequency the station transmits on.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.TransportStreamID">
            <summary>
            Get or set the transport stream ID of the station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.OriginalNetworkID">
            <summary>
            Get or set the original network ID of the station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ServiceID">
            <summary>
            Get or set the Service ID of the station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.VideoPID">
            <summary>
            Get or set the video stream PID of the station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.AudioPID">
            <summary>
            Get ot set the audio PID of the station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.DSMCCPID">
            <summary>
            Get or set the MHEG PID of the station.
            <remarks>
            The PID will be zero if the station does not transmit MHEG information.
            </remarks>
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.Encrypted">
            <summary>
            Get or set whether the broadcast is encrypted.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ServiceType">
            <summary>
            Get or set the service type of the station (eg digital television or radio).
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ScheduleAvailable">
            <summary>
            Get or set whether the station broadcasts the EPG schedule.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.NextFollowingAvailable">
            <summary>
            Get or set whether the station broadcasts the next/following EPG information.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.SectionMap">
            <summary>
            Get the map of EIT section received.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.EITCompleted">
            <summary>
            Get whether all the EIT EPG data for the station has been received.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.CollectionType">
            <summary>
            Get or set the type of collection for this station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ProviderName">
            <summary>
            Get or set the provider name of the station. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.TunerType">
            <summary>
            Get or set the tuner type the station is located on. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.Satellite">
            <summary>
            Get or set the satellite the station is located on. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.NewName">
            <summary>
            Get or set the new name for the station. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.LogicalChannelNumber">
            <summary>
            Get or set the logical channel number of the station. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.DisplayedLogicalChannelNumber">
            <summary>
            Get or set the displayed logical channel number of the station. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.MinorChannelNumber">
            <summary>
            Get or set the minor channel number of the station. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.OriginalChannelNumber">
            <summary>
            Get or set the original broadcast channel number. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ChannelID">
            <summary>
            Get or set the alphanumeric channel ID. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.StationType">
            <summary>
            Get or set the station type. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.WMCMatchName">
            <summary>
            Get or set the Windows Media Centre match name. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.WMCUniqueID">
            <summary>
            Get or set the Windows Media Centre unique ID. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.WMCCallSign">
            <summary>
            Get or set the Windows Media Centre call sign. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ImportCallSign">
            <summary>
            Get or set the Import call sign. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.Affiliate">
            <summary>
            Get or set the affiliate of the station. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ConditionalAccessEntries">
            <summary>
            Get or set the list of conditional access entries for this station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.FullID">
            <summary>
            Get the full identification string for the station. 
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.FullDescription">
            <summary>
            Get the full description of a station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.FullFixedLengthDescription">
            <summary>
            Get the full fixed length description of a station.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.IsRadio">
            <summary>
            Return true if the station broadcasts digital radio; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.EPGLink">
            <summary>
            Get or set the redirected EPG link;
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.EpgLinkageOnid">
            <summary>
            Get or set the EPG linkage original network ID.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.EpgLinkageTsid">
            <summary>
            Get or set the EPG linkage transport stream ID.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.EpgLinkageSid">
            <summary>
            Get or set the EPG linkage service ID.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ExcludedByUser">
            <summary>
            Get or set whether the station has been excluded by the user.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ExcludedByFilter">
            <summary>
            Get or set whether the station has been excluded by a filter.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ExcludedByChannel">
            <summary>
            Get or set whether the station has been excluded by bouquet.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.Included">
            <summary>
            Return true if the station is not excluded and is filtered in if filters are used; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.CreatedFromIni">
            <summary>
            Get or set whether the station was created from the ini file.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.CurrentScan">
            <summary>
            Get or set whether the station was present in the current channel scan.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.UseNameForMerge">
            <summary>
            Get or set whether the channel name is to be used when merging external XMLTV data.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.IgnoreFrequencyForMerge">
            <summary>
            Get or set whether the frequency (onid field for ATSC)  is to be used when merging external XMLTV data.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.AtscTSID">
            <summary>
            Get or set the ATSC Transport stream ID.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.AtscProgramNumber">
            <summary>
            Get or set the ATSC program number.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.AtscHidden">
            <summary>
            Get or set the ATSC hidden flag.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.AtscAccessControlled">
            <summary>
            Get or set the ATSC access controlled flag.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.AtscOutOfBand">
            <summary>
            Get or set the ATSC out of band flag.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.AtscGuideHidden">
            <summary>
            Get or set the ATSC guide hidden flag.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.AtscServiceType">
            <summary>
            Get or set the ATSC service type.
            </summary>
        </member>
        <member name="P:DomainObjects.TVStation.ImagePath">
            <summary>
            Get or set the image path.
            </summary>
        </member>
        <member name="T:DomainObjects.SignalModulation">
            <summary>
            The class that describes the DVB signal modulation.
            </summary>
        </member>
        <member name="M:DomainObjects.SignalModulation.ConvertDVBModulation(System.Int32)">
            <summary>
            Convert the DVB modulation to the internal modulation.
            </summary>
            <param name="modulation">The modulation to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetDvbsModulations">
            <summary>
            Get a list of the DVB-S modulations.
            </summary>
            <returns>A list of the DVB-S modulations.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetDvbsIndex(DomainObjects.SignalModulation.Modulation)">
            <summary>
            Get the index number of a DVB-S modulation value.
            </summary>
            <param name="modulation">The modulation value.</param>
            <returns>The index number.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetDvbsXml(DomainObjects.SignalModulation.Modulation)">
            <summary>
            Get the xml value of a DVB-S modulation value.
            </summary>
            <param name="modulation">The modulation value.</param>
            <returns>The xml value.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetDvbcModulations">
            <summary>
            Get a list of the DVB-C modulations.
            </summary>
            <returns>A list of the DVB-C modulations.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetDvbcIndex(DomainObjects.SignalModulation.Modulation)">
            <summary>
            Get the index number of a DVB-C modulation value.
            </summary>
            <param name="modulation">The modulation value.</param>
            <returns>The index number.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetDvbcXml(DomainObjects.SignalModulation.Modulation)">
            <summary>
            Get the xml value of a DVB-C modulation value.
            </summary>
            <param name="modulation">The modulation value.</param>
            <returns>The xml value.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetAtscModulations">
            <summary>
            Get a list of the ATSC modulations.
            </summary>
            <returns>A list of the ATSC modulations.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetAtscIndex(DomainObjects.SignalModulation.Modulation)">
            <summary>
            Get the index number of an ATSC modulation value.
            </summary>
            <param name="modulation">The modulation value.</param>
            <returns>The index number.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetAtscXml(DomainObjects.SignalModulation.Modulation)">
            <summary>
            Get the xml value of an ATSC modulation value.
            </summary>
            <param name="modulation">The modulation value.</param>
            <returns>The xml value.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetClearQamModulations">
            <summary>
            Get a list of the ClearQAM modulations.
            </summary>
            <returns>A list of the ClearQAM modulations.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetClearQamIndex(DomainObjects.SignalModulation.Modulation)">
            <summary>
            Get the index number of a ClearQAM modulation value.
            </summary>
            <param name="modulation">The modulation value.</param>
            <returns>The index number.</returns>
        </member>
        <member name="M:DomainObjects.SignalModulation.GetClearQamXml(DomainObjects.SignalModulation.Modulation)">
            <summary>
            Get the xml value of a ClearQAM modulation value.
            </summary>
            <param name="modulation">The modulation value.</param>
            <returns>The xml value.</returns>
        </member>
        <member name="T:DomainObjects.SignalModulation.Modulation">
            <summary>
            Signal modulation values.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM16">
            <summary>
            The modulation value for QAM16.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM32">
            <summary>
            The modulation value for QAM32.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM64">
            <summary>
            The modulation value for QAM64.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM80">
            <summary>
            The modulation value for QAM80.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM96">
            <summary>
            The modulation value for QAM96.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM112">
            <summary>
            The modulation value for QAM112.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM128">
            <summary>
            The modulation value for QAM128.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM160">
            <summary>
            The modulation value for QAM160.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM192">
            <summary>
            The modulation value for QAM192.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM224">
            <summary>
            The modulation value for QAM224.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM256">
            <summary>
            The modulation value for QAM256.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM320">
            <summary>
            The modulation value for QAM320.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM384">
            <summary>
            The modulation value for QAM384.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM448">
            <summary>
            The modulation value for QAM448.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM512">
            <summary>
            The modulation value for QAM512.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM640">
            <summary>
            The modulation value for QAM640.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM768">
            <summary>
            The modulation value for QAM768.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM896">
            <summary>
            The modulation value for QAM896.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QAM1024">
            <summary>
            The modulation value for QAM1024.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.QPSK">
            <summary>
            The modulation value for QPSK.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.BPSK">
            <summary>
            The modulation value for BPSK.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.OQPSK">
            <summary>
            The modulation value for OQPSK.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.VSB8">
            <summary>
            The modulation value for VSB8.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.VSB16">
            <summary>
            The modulation value for VSB16.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.AMRadio">
            <summary>
            The modulation value for AM radio.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.FMRadio">
            <summary>
            The modulation value for FM radio.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.PSK8">
            <summary>
            The modulation value for PSK8.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.RF">
            <summary>
            The modulation value for RF.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.VSB8Cable">
            <summary>
            The modulation value for VSB8 when used for ATSC over cable.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalModulation.Modulation.VSB16Cable">
            <summary>
            The modulation value for VSB16 when used for ATSC over cable.
            </summary>
        </member>
        <member name="T:DomainObjects.NetworkMapEntry">
            <summary>
            The class that describes a network map entry.
            </summary>
        </member>
        <member name="M:DomainObjects.NetworkMapEntry.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the NetworkMapEntry class.
            </summary>
            <param name="transportStreamId">The transport stream ID.</param>
        </member>
        <member name="M:DomainObjects.NetworkMapEntry.LogMapEntry">
            <summary>
            Log map entry.
            </summary>
        </member>
        <member name="P:DomainObjects.NetworkMapEntry.TransportStreamId">
            <summary>
            Get the transport stream ID.
            </summary>
        </member>
        <member name="P:DomainObjects.NetworkMapEntry.TuningFrequency">
            <summary>
            Get or set the tuning frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.NetworkMapEntry.ServiceIds">
            <summary>
            Get the collection of serviceID's.
            </summary>
        </member>
        <member name="T:DomainObjects.DebugEntry">
            <summary>
            The class that describes a debug parameter entry.
            </summary>
        </member>
        <member name="M:DomainObjects.DebugEntry.#ctor(DomainObjects.DebugName)">
            <summary>
            Initialize a new instance of the DebugEntry class with a name.
            </summary>
            <param name="name">The name of the entry.</param>
        </member>
        <member name="M:DomainObjects.DebugEntry.#ctor(DomainObjects.DebugName,System.Int32)">
            <summary>
            Initialize a new entry of the DebugEntry class with a name and parameter.
            </summary>
            <param name="name"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:DomainObjects.DebugEntry.ToString">
            <summary>
            Get a string representation of the instance.
            </summary>
            <returns>A string representing the instance.</returns>
        </member>
        <member name="M:DomainObjects.DebugEntry.Clone">
            <summary>
            Copy the instance.
            </summary>
            <returns>A new instance of the DebugEntry class with the same values as this instance.</returns>
        </member>
        <member name="M:DomainObjects.DebugEntry.GetInstance(System.String)">
            <summary>
            Get an instance of the DebugEntry from a parameter file entry.
            </summary>
            <param name="parameter">The parameter file entry.</param>
            <returns>A new instance of the class.</returns>
        </member>
        <member name="M:DomainObjects.DebugEntry.IsDefined(DomainObjects.DebugName)">
            <summary>
            Check if a debug name is present.
            </summary>
            <param name="debugName">The name of the debug entry.</param>
            <returns>True if the debug name is present; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.DebugEntry.FindEntry(DomainObjects.DebugName)">
            <summary>
            Find a debug entry.
            </summary>
            <param name="debugName">The name of the debug entry.</param>
            <returns>The debug entry if it is found; otherwise null</returns>
        </member>
        <member name="M:DomainObjects.DebugEntry.FindEntry(DomainObjects.DebugName,System.Boolean)">
            <summary>
            Find a debug entry.
            </summary>
            <param name="debugName">The name of the debug entry.</param>
            <param name="withParameter">True if a parameter must be present; false otherwise.</param>
            <returns>The debug entry if it is found; otherwise null</returns>
        </member>
        <member name="M:DomainObjects.DebugEntry.FindEntry(System.Collections.ObjectModel.Collection{DomainObjects.DebugEntry},System.String)">
            <summary>
            Find a debug entry.
            </summary>
            <param name="debugEntries">The list of debug entries to search.</param>
            <param name="identifier">The string representation of the debug entry.</param>
            <returns>The debug entry if it is found; otherwise null</returns>
        </member>
        <member name="P:DomainObjects.DebugEntry.Name">
            <summary>
            Get the entry name.
            </summary>
        </member>
        <member name="P:DomainObjects.DebugEntry.Parameter">
            <summary>
            Get or set the entry parameter.
            </summary>
        </member>
        <member name="P:DomainObjects.DebugEntry.ParameterSet">
            <summary>
            Return true if the entry parameter has been set; false otherwise.
            </summary>
        </member>
        <member name="T:DomainObjects.TextTranslationSpec">
            <summary>
            The class that defines the requirements for translating text for a channel.
            </summary>
        </member>
        <member name="M:DomainObjects.TextTranslationSpec.#ctor">
            <summary>
            Initialize a new instance of the TextTranslationSpec class.
            </summary>
        </member>
        <member name="M:DomainObjects.TextTranslationSpec.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the TextTranslationSpec class.
            </summary>
            <param name="originalNetworkID">The original network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <param name="serviceID">The service ID.</param>
        </member>
        <member name="M:DomainObjects.TextTranslationSpec.Clone">
            <summary>
            Get a clone of the current instance.
            </summary>
            <returns>A copy of the current instance</returns>
        </member>
        <member name="P:DomainObjects.TextTranslationSpec.OriginalNetworkID">
            <summary>
            The original network ID.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationSpec.TransportStreamID">
            <summary>
            The transport stream ID.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationSpec.ServiceID">
            <summary>
            The service ID.
            </summary>
        </member>
        <member name="T:DomainObjects.SignalPolarization">
            <summary>
            The class that describes signal polarization.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalPolarization.LinearHorizontal">
            <summary>
            The value for a signal polarization of linear horizontal.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalPolarization.LinearVertical">
            <summary>
            The value for a signal polarization of linear vertical.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalPolarization.CircularLeft">
            <summary>
            The value for a signal polarization of circular left.
            </summary>
        </member>
        <member name="F:DomainObjects.SignalPolarization.CircularRight">
            <summary>
            The value for a signal polarization of circular right.
            </summary>
        </member>
        <member name="M:DomainObjects.SignalPolarization.#ctor">
            <summary>
            Initialize a new instance of the SignalPolarization class.
            </summary>
        </member>
        <member name="M:DomainObjects.SignalPolarization.#ctor(System.String)">
            <summary>
            Initialize a new instance of the SignalPolarization class.
            </summary>
            <param name="polarization">The signal polarization.</param>
        </member>
        <member name="M:DomainObjects.SignalPolarization.#ctor(System.Char)">
            <summary>
            Initialize a new instance of the SignalPolarization class.
            </summary>
            <param name="polarization">The signal polarization.</param>
        </member>
        <member name="M:DomainObjects.SignalPolarization.IsValid(System.String)">
            <summary>
            Check if a polarization is valid.
            </summary>
            <param name="polarization">The polarization to be checked.</param>
            <returns>True if the polarization is valid; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.SignalPolarization.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A tring desribing this instance.</returns>
        </member>
        <member name="M:DomainObjects.SignalPolarization.ConvertDVBPolarization(System.Int32)">
            <summary>
            Convert the DVB polarization to the internal polarization.
            </summary>
            <param name="polarization">The polarization to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DomainObjects.SignalPolarization.GetIndex(DomainObjects.SignalPolarization)">
            <summary>
            Get the index number of a polarization value.
            </summary>
            <param name="polarization">The polarization value.</param>
            <returns>The index number.</returns>
        </member>
        <member name="M:DomainObjects.SignalPolarization.GetXml">
            <summary>
            Get the xml version of a polarization value.
            </summary>
            <returns>The xml string.</returns>
        </member>
        <member name="P:DomainObjects.SignalPolarization.Polarizations">
            <summary>
            Get a collection of all the possible polarizations.
            </summary>
        </member>
        <member name="P:DomainObjects.SignalPolarization.Polarization">
            <summary>
            Get or set the polarization.
            </summary>
        </member>
        <member name="P:DomainObjects.SignalPolarization.PolarizationAbbreviation">
            <summary>
            Get the single letter abbreviation for this instance.
            </summary>
        </member>
        <member name="T:DomainObjects.LogRecord">
            <summary>
            The class that describes a log record.
            </summary>
        </member>
        <member name="M:DomainObjects.LogRecord.#ctor(System.String)">
            <summary>
            Intialize a new instance of the LogRecord class.
            </summary>
            <param name="logLine">The log record it describes.</param>
        </member>
        <member name="P:DomainObjects.LogRecord.Time">
            <summary>
            Get the timestamp for a record.
            </summary>
        </member>
        <member name="P:DomainObjects.LogRecord.Text">
            <summary>
            Get the text of the record.
            </summary>
        </member>
        <member name="T:DomainObjects.SectionMapEntry">
            <summary>
            The class that describes an EIT section map entry.
            </summary>
        </member>
        <member name="M:DomainObjects.SectionMapEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the SectionMapEntry class.
            </summary>
            <param name="tableID">The table ID.</param>
            <param name="sectionNumber">The section number.</param>
            <param name="lastTableID">The last table ID.</param>
            <param name="lastSectionNumber">The last section number.</param>
            <param name="segmentLastSectionNumber">The last section number of the segment.</param>
        </member>
        <member name="T:DomainObjects.Service">
            <summary>
            The class that describes a service provider.
            </summary>
        </member>
        <member name="M:DomainObjects.Service.#ctor(System.String,DomainObjects.ServiceType)">
            <summary>
            Initialize a new instance of the Service class.
            </summary>
            <param name="name">The name of the service.</param>
            <param name="serviceType">The type of service.</param>
        </member>
        <member name="P:DomainObjects.Service.Areas">
            <summary>
            Get or set the areas in the service.
            </summary>
        </member>
        <member name="P:DomainObjects.Service.Name">
            <summary>
            Get the name of the service.
            </summary>
        </member>
        <member name="P:DomainObjects.Service.ServiceType">
            <summary>
            Get the type of service.
            </summary>
        </member>
        <member name="T:DomainObjects.FileFrequency">
            <summary>
            The class that describes a file used for a collection.
            </summary>
        </member>
        <member name="M:DomainObjects.FileFrequency.#ctor">
            <summary>
            Initialize a new instance of the FileFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.FileFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.FileFrequency.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="M:DomainObjects.FileFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="P:DomainObjects.FileFrequency.Path">
            <summary>
            Get or set the path.
            </summary>
        </member>
        <member name="P:DomainObjects.FileFrequency.TunerType">
            <summary>
            Get the tuner type for this type of frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.TextTranslationDetected">
            <summary>
            The class that describes the languages that were detected by the translator.
            </summary>
        </member>
        <member name="M:DomainObjects.TextTranslationDetected.#ctor">
            <summary>
            Initialize a new instance of the TextTranslationDetected class.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationDetected.Language">
            <summary>
            Get or set the language detected.
            </summary>
        </member>
        <member name="T:DomainObjects.ByteConvertFile">
            <summary>
            The class that describes the byte conversion file.
            </summary>
        </member>
        <member name="M:DomainObjects.ByteConvertFile.#ctor">
            <summary>
            Initialize a new instance of the ByteConvertFile class.
            </summary>
        </member>
        <member name="M:DomainObjects.ByteConvertFile.FindEntry(System.String,System.Byte,System.Byte)">
            <summary>
            Find a conversion entry.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="controlCode">The control code for the byte.</param>
            <param name="originalValue">The original value of the byte.</param>
            <returns>The converted byte value of 0x00 if the table or original value cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.ByteConvertFile.GetTableNameList">
            <summary>
            Get a list of all the conversion table names.
            </summary>
            <returns>A list of table names.</returns>
        </member>
        <member name="M:DomainObjects.ByteConvertFile.Load">
            <summary>
            Load the definitions.
            </summary>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.ByteConvertFile.Load(System.String)">
            <summary>
            Load the definitions.
            </summary>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.ByteConvertFile.Tables">
            <summary>
            Get the collection of conversion tables.
            </summary>
        </member>
        <member name="P:DomainObjects.ByteConvertFile.FileName">
            <summary>
            Get the standard name of the conversion file.
            </summary>
        </member>
        <member name="T:DomainObjects.WMCDVBTuningInfo">
            <summary>
            The class that describes Windows Media Center DVB tuning information. 
            </summary>
        </member>
        <member name="M:DomainObjects.WMCDVBTuningInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the WMCDVBTuningInfo class.
            </summary>
            <param name="frequency">The transponder frequency.</param>
            <param name="onid">The ONID.</param>
            <param name="tsid">The TSID.</param>
            <param name="sid">The SID</param>
        </member>
        <member name="P:DomainObjects.WMCDVBTuningInfo.ONID">
            <summary>
            Get the ONID.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCDVBTuningInfo.TSID">
            <summary>
            Get the TSID.
            </summary>
        </member>
        <member name="P:DomainObjects.WMCDVBTuningInfo.SID">
            <summary>
            Get the SID.
            </summary>
        </member>
        <member name="T:DomainObjects.TerrestrialFrequency">
            <summary>
            The class that describes a terrestrial frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.TerrestrialFrequency.#ctor">
            <summary>
            Initialize a new instance of the TerrestrialFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.TerrestrialFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.TerrestrialFrequency.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="M:DomainObjects.TerrestrialFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.TerrestrialFrequency.Unload(System.Xml.XmlWriter,System.String)">
            <summary>
            Create the xml definition for the frequency.
            </summary>
            <param name="writer">An xml writer instance.</param>
            <param name="fullPath">The full path of the file being created.</param>
            <returns>Null if the entry was created successfully; an error message otherwise.</returns>
        </member>
        <member name="P:DomainObjects.TerrestrialFrequency.Bandwidth">
            <summary>
            Get or set the bandwidth.
            </summary>
        </member>
        <member name="P:DomainObjects.TerrestrialFrequency.PlpNumber">
            <summary>
            Get or set the PLP number (T2 only).
            </summary>
        </member>
        <member name="P:DomainObjects.TerrestrialFrequency.IsT2">
            <summary>
            Return true if the frequency is T2; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.TerrestrialFrequency.TunerType">
            <summary>
            Get the tuner type for this type of frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.StreamFrequency">
            <summary>
            The class that describes a network stream used for a collection.
            </summary>
        </member>
        <member name="M:DomainObjects.StreamFrequency.NetServerEnum(System.String,System.Int32,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32,System.String,System.Int32@)">
            <summary>
            Enumerate servers.
            </summary>
            <param name="ServerName">Server name.</param>
            <param name="dwLevel">Level.</param>
            <param name="pBuf">Buffer.</param>
            <param name="dwPrefMaxLen">Maximum length.</param>
            <param name="dwEntriesRead">Entries returned.</param>
            <param name="dwTotalEntries">Total entries.</param>
            <param name="dwServerType">Server type.</param>
            <param name="domain">Domain.</param>
            <param name="dwResumeHandle">Handle</param>
            <returns>Zero if successful; non-zero otherwise.</returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.NetApiBufferFree(System.IntPtr)">
            <summary>
            Free the results buffer.
            </summary>
            <param name="pBuf">Buffer pointer.</param>
            <returns>Zero if successful; non-zero otherwise.</returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.#ctor">
            <summary>
            Initialize a new instance of the StreamFrequency class.
            </summary>
        </member>
        <member name="M:DomainObjects.StreamFrequency.EqualTo(DomainObjects.TuningFrequency,DomainObjects.EqualityLevel)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="frequency">The other instance.</param>
            <param name="level">The level of equality to be checked.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.GetValidFileName">
            <summary>
            Get a string representing this frequency as a valid file name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.Clone">
            <summary>
            Generate a copy of this frequency.
            </summary>
            <returns>A new instance with the same properties as the old instance.</returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.ValidateIPAddress(System.String,System.String)">
            <summary>
            Format check a user entered IP address.
            </summary>
            <param name="address">The address string.</param>
            <param name="protocol">The protocol.</param>
            <returns>An error message or null if the address is valid.</returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.GetNetworkComputers(System.String)">
            <summary>
            Get a list of network names and addresses.
            </summary>
            <returns>The list of names and addresses.</returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.GetActiveIPAddresses(System.String)">
            <summary>
            Get the contactable IP addresses on the local network.
            </summary>
            <param name="localAddress">The list of IP addresses.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.StreamFrequency.GetAddress(System.Net.IPAddress[])">
            <summary>
            Get the first IPv4 address from a list.
            </summary>
            <param name="addressList"></param>
            <returns></returns>
        </member>
        <member name="P:DomainObjects.StreamFrequency.IPAddress">
            <summary>
            Get or set the IP address.
            </summary>
        </member>
        <member name="P:DomainObjects.StreamFrequency.PortNumber">
            <summary>
            Get or set the port number.
            </summary>
        </member>
        <member name="P:DomainObjects.StreamFrequency.Protocol">
            <summary>
            Get or set the Protocol.
            </summary>
        </member>
        <member name="P:DomainObjects.StreamFrequency.Path">
            <summary>
            Get or set the path.
            </summary>
        </member>
        <member name="P:DomainObjects.StreamFrequency.MulticastSource">
            <summary>
            Get or set the multicast source address.
            </summary>
        </member>
        <member name="P:DomainObjects.StreamFrequency.MulticastPort">
            <summary>
            Get or set the multicast source port.
            </summary>
        </member>
        <member name="P:DomainObjects.StreamFrequency.HostName">
            <summary>
            Get or set the host name.
            </summary>
        </member>
        <member name="P:DomainObjects.StreamFrequency.TunerType">
            <summary>
            Get the tuner type for this type of frequency.
            </summary>
        </member>
        <member name="T:DomainObjects.StreamFrequency.ServerInfo100">
            <summary>
            The ServerInfo100 structure definition.
            </summary>
        </member>
        <member name="T:DomainObjects.RepeatExclusion">
            <summary>
            The class that describes an exclusion entry for repeat program checking.
            </summary>
        </member>
        <member name="M:DomainObjects.RepeatExclusion.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the RepeatExclusion class.
            </summary>
            <param name="title">The title of the program.</param>
            <param name="description">The description of the program.</param>
        </member>
        <member name="M:DomainObjects.RepeatExclusion.CheckForExcludedProgram(System.Collections.ObjectModel.Collection{DomainObjects.RepeatExclusion},System.String,System.String)">
            <summary>
            Check if a programme has been excluded.
            </summary>
            <param name="exclusions">The list of exclusions to check.</param>
            <param name="title">The title of the programme.</param>
            <param name="description">The description of the programme.</param>
            <returns>True if the programme has been excluded from repeat checking; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.RepeatExclusion.Title">
            <summary>
            Get the title of the program.
            </summary>
        </member>
        <member name="P:DomainObjects.RepeatExclusion.Description">
            <summary>
            Get the description of the program.
            </summary>
        </member>
        <member name="T:DomainObjects.SelectedTuner">
            <summary>
            The class that describes a selected tuner.
            </summary>
        </member>
        <member name="M:DomainObjects.SelectedTuner.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the SelectedTuner class with a tuner number.
            </summary>
            <param name="tunerNumber">The tuner number.</param>
        </member>
        <member name="M:DomainObjects.SelectedTuner.#ctor(System.String)">
            <summary>
            Initialize a new instance of the SelectedTuner class with a tuner identity.
            </summary>
            <param name="uniqueIdentity">The unique identity.</param>
        </member>
        <member name="M:DomainObjects.SelectedTuner.#ctor(System.Int32,System.String)">
            <summary>
            Initialize a new instance of the SelectedTuner class with a tuner number and unique identity.
            </summary>
            <param name="tunerNumber">The tuner number.</param>
            <param name="uniqueIdentity">The unique identity.</param>
        </member>
        <member name="M:DomainObjects.SelectedTuner.Selected(System.Collections.ObjectModel.Collection{DomainObjects.SelectedTuner},System.Int32)">
            <summary>
            Check if a tuner has been selected.
            </summary>
            <param name="tuners">The list of selected tuners.</param>
            <param name="tunerNumber">The tuner number to check.</param>
            <returns>True if the tuner has been selected; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.SelectedTuner.Clone">
            <summary>
            Clone the current instance.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="M:DomainObjects.SelectedTuner.EqualTo(DomainObjects.SelectedTuner)">
            <summary>
            Test if this instance is equal to another instance.
            </summary>
            <param name="otherTuner">The other instance.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="P:DomainObjects.SelectedTuner.TunerNumber">
            <summary>
            Get the selected tuner number.
            </summary>
        </member>
        <member name="P:DomainObjects.SelectedTuner.UniqueIdentity">
            <summary>
            Get the unique identity.
            </summary>
        </member>
        <member name="T:DomainObjects.Crc">
            <summary>
            The class that calculates crc's.
            </summary>
        </member>
        <member name="M:DomainObjects.Crc.CalculateCRC(System.String)">
            <summary>
            Calculate a crc for a string.
            </summary>
            <param name="stringData">The string to process.</param>
            <returns>The crc.</returns>
        </member>
        <member name="M:DomainObjects.Crc.CalculateCRC(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculate a crc.
            </summary>
            <param name="byteData">The byte array.</param>
            <param name="offset">The offset to start at.</param>
            <param name="length">The nuber of bytes to include.</param>
            <returns>The crc.</returns>
        </member>
        <member name="T:DomainObjects.Country">
            <summary>
            The class that describes a country.
            </summary>
        </member>
        <member name="F:DomainObjects.Country.Egypt">
            <summary>
            Get the country code for Egypt.
            </summary>
        </member>
        <member name="F:DomainObjects.Country.NewZealand">
            <summary>
            Get the country code for New Zealand.
            </summary>
        </member>
        <member name="F:DomainObjects.Country.Australia">
            <summary>
            Get the country code for Australia.
            </summary>
        </member>
        <member name="F:DomainObjects.Country.France">
            <summary>
            Get the country code for France.
            </summary>
        </member>
        <member name="F:DomainObjects.Country.Spain">
            <summary>
            Get the country code for Spain.
            </summary>
        </member>
        <member name="F:DomainObjects.Country.UnitedKingdom">
            <summary>
            Get the country code for the United Kingdom.
            </summary>
        </member>
        <member name="F:DomainObjects.Country.Italy">
            <summary>
            Get the country code for Italy.
            </summary>
        </member>
        <member name="M:DomainObjects.Country.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the Country class.
            </summary>
            <param name="name">The name of the country.</param>
            <param name="code">The code of the country.</param>
        </member>
        <member name="M:DomainObjects.Country.AddArea(DomainObjects.Area,System.Boolean)">
            <summary>
            Add an area to the country.
            </summary>
            <param name="newArea">The area to be added.</param>
            <param name="addUndefined">True if an undefined entry is to be added to the start of the list; false otherwise.</param>
        </member>
        <member name="M:DomainObjects.Country.ToString">
            <summary>
            Return a description of this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.Country.Load">
            <summary>
            Load the country collection from the configuration file.
            </summary>
        </member>
        <member name="M:DomainObjects.Country.addCountry(DomainObjects.Country,System.Collections.ObjectModel.Collection{DomainObjects.Country})">
            <summary>
            Add a country to a collection.
            </summary>
            <param name="newCountry">The country to be added.</param>
            <param name="countries">The collection of countries to be added to.</param>
        </member>
        <member name="M:DomainObjects.Country.FindCountryCode(System.String,System.Collections.ObjectModel.Collection{DomainObjects.Country})">
            <summary>
            Find a country given the country code.
            </summary>
            <param name="countryCode">The country code.</param>
            <param name="countries">The collection of countries to search.</param>
            <returns>The country or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Country.FindService(System.String)">
            <summary>
            Find a service defined for the country.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <returns>The service or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Country.FindService(System.String,System.String)">
            <summary>
            Find a service defined for the country.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="type">The type of the service.</param>
            <returns>The service or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Country.FindArea(System.Int32)">
            <summary>
            Find an area defined for the country.
            </summary>
            <param name="areaCode">The area code.</param>
            <returns>The area or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Country.FindArea(System.Int32,System.Int32)">
            <summary>
            Find an area defined for the country that contains a specific region.
            </summary>
            <param name="areaCode">The area code.</param>
            <param name="regionCode">The region code.</param>
            <returns>The area or null if it cannot be located.</returns>
        </member>
        <member name="M:DomainObjects.Country.FindRegion(System.Int32,System.Int32)">
            <summary>
            Find a region defined for the country.
            </summary>
            <param name="areaCode">The area code.</param>
            <param name="regionCode">The region code.</param>
            <returns>The region or null if it cannot be located.</returns>
        </member>
        <member name="P:DomainObjects.Country.Name">
            <summary>
            Get the name of the country.
            </summary>
        </member>
        <member name="P:DomainObjects.Country.Code">
            <summary>
            Get the code of the country.
            </summary>
        </member>
        <member name="P:DomainObjects.Country.Countries">
            <summary>
            Get the collection of countries.
            </summary>
        </member>
        <member name="P:DomainObjects.Country.Services">
            <summary>
            Get the collection of services in the country.
            </summary>
        </member>
        <member name="P:DomainObjects.Country.Areas">
            <summary>
            Get the collection of areas in the country.
            </summary>
        </member>
        <member name="T:DomainObjects.WebRequestSpec">
            <summary>
            The class the encapsulates a HTTP request.
            </summary>
        </member>
        <member name="M:DomainObjects.WebRequestSpec.#ctor(System.String)">
            <summary>
            Create an instance of the WebRequestSpec class with a specified URL.
            </summary>
            <param name="destinationUri">The URL.</param>
        </member>
        <member name="M:DomainObjects.WebRequestSpec.#ctor(System.String,DomainObjects.Logger,System.String)">
            <summary>
            Create an instance of the WebRequestSpec class with a specified URL and logger.
            </summary>
            <param name="destinationUri">The URL.</param>
            <param name="logger">A logger instance.</param>
            <param name="loggerIdentity">The log message prefix.</param>
        </member>
        <member name="M:DomainObjects.WebRequestSpec.SetHeader(System.String,System.String)">
            <summary>
            Add or update a request header.
            </summary>
            <param name="headerName">The name of the header.</param>
            <param name="headerValue">The value of the header</param>
        </member>
        <member name="M:DomainObjects.WebRequestSpec.Process">
            <summary>
            Process the web request.
            </summary>
            <returns>A WebReply instance describing the result of the request.</returns>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.DestinationUri">
            <summary>
            Get the destination URL.
            </summary>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.RedirectionCount">
            <summary>
            Get or set the redirection limit.
            </summary>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.Method">
            <summary>
            Get or set the request method.
            </summary>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.ContentType">
            <summary>
            Get or set the request content type.
            </summary>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.ContentLength">
            <summary>
            Get or set the request content length.
            </summary>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.Accept">
            <summary>
            Get or set the request accept value.
            </summary>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.UserAgent">
            <summary>
            Get or set the user agent.
            </summary>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.Timeout">
            <summary>
            Get or set the request timeout.
            </summary>
        </member>
        <member name="P:DomainObjects.WebRequestSpec.RequestStream">
            <summary>
            Get the request stream.
            </summary>
        </member>
        <member name="T:DomainObjects.TextTranslationLanguage">
            <summary>
            The class that defines a translation language.
            </summary>
        </member>
        <member name="M:DomainObjects.TextTranslationLanguage.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the TextTranslationLanguage class.
            </summary>
            <param name="languageCode">The language code.</param>
            <param name="name">The name of the language.</param>
        </member>
        <member name="M:DomainObjects.TextTranslationLanguage.ToString">
            <summary>
            Get a string representation of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DomainObjects.TextTranslationLanguage.Languages">
            <summary>
            Get or set the list of language codes and decodes.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationLanguage.LanguageCode">
            <summary>
            Get the language code.
            </summary>
        </member>
        <member name="P:DomainObjects.TextTranslationLanguage.Name">
            <summary>
            Get the name of the language.
            </summary>
        </member>
        <member name="T:DomainObjects.SchedulesDirectChannel">
            <summary>
            The class that describes a Schedules Direct channel.
            </summary>
        </member>
        <member name="M:DomainObjects.SchedulesDirectChannel.#ctor">
            <summary>
            Initialize a new instance of the SdChannel class.
            </summary>
        </member>
        <member name="M:DomainObjects.SchedulesDirectChannel.Clone">
            <summary>
            Create a copy of the current instance.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="M:DomainObjects.SchedulesDirectChannel.CompareTo(DomainObjects.SchedulesDirectChannel)">
            <summary>
            Compare this instance with another.
            </summary>
            <param name="otherChannel">The other lineup.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.SchedulesDirectChannel.Compare(DomainObjects.SchedulesDirectChannel,DomainObjects.SchedulesDirectChannel.SortKeys,System.Boolean)">
            <summary>
            Compare fields for sorting purposes.
            </summary>
            <param name="otherChannel">The other instance</param>
            <param name="sortKey">The field to use for the comparison.</param>
            <param name="ascending">True for ascending comparisons; false otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.SchedulesDirectChannel.ToString">
            <summary>
            Get a string representation of this instance.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.Identity">
            <summary>
            Get or set the internal identity.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.Name">
            <summary>
            Get or set the name.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.CallSign">
            <summary>
            Get or set the call sign.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.Affiliate">
            <summary>
            Get or set the Affiliate.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.LineupIdentity">
            <summary>
            Get or set the lineup identity that contains the channel.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.LineupName">
            <summary>
            Get or set the name of the lineup that contains the channel.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.UserName">
            <summary>
            Get or set the user defined channel name.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.UserCallSign">
            <summary>
            Get or set the user defined call sign.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.Excluded">
            <summary>
            True if the channel is excluded; false otherwise.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.MajorChannelNumber">
            <summary>
            Get or setthe major channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.MinorChannelNumber">
            <summary>
            Get or set the minor channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.UserChannelNumber">
            <summary>
            Get or set the user defined channel number.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.OriginalNetworkId">
            <summary>
            Get or set the original network ID.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.TransportStreamId">
            <summary>
            Get or set the transport stream ID.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.ServiceId">
            <summary>
            Get or set the service ID.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.Logos">
            <summary>
            Get or set the URL of the channel logo.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.FullName">
            <summary>
            Get the full name of the channel.
            </summary>
        </member>
        <member name="P:DomainObjects.SchedulesDirectChannel.ChannelIdentification">
            <summary>
            Get the channel identification string using DVB or ATSC identification numbers. 
            </summary>
        </member>
        <member name="T:DomainObjects.SchedulesDirectChannel.SortKeys">
            <summary>
            The sort keys for the SchedulesDirectChannelClass.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.Name">
            <summary>
            Sort on name.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.CallSign">
            <summary>
            Sort on call sign.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.Affiliate">
            <summary>
            Sort on affiliate.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.LineupName">
            <summary>
            Sort on lineup name.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.Excluded">
            <summary>
            Sort on excluded.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.UserName">
            <summary>
            Sort on users name for channel.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.UserChannelNumber">
            <summary>
            Sort on the users channel number.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.UserCallSign">
            <summary>
            Sort on the users call sign for the channel.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.MajorChannelNumber">
            <summary>
            Sort on the major channel number.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.MinorChannelNumber">
            <summary>
            Sort on the minor channel number.
            </summary>
        </member>
        <member name="F:DomainObjects.SchedulesDirectChannel.SortKeys.ChannelIdentification">
            <summary>
            Sort on the channel identification string.
            </summary>
        </member>
        <member name="T:DomainObjects.CharacterSet">
            <summary>
             The class that describes a character set.
            </summary>
        </member>
        <member name="M:DomainObjects.CharacterSet.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initialize a new instance of the CharacterSet class.
            </summary>
            <param name="name">The character set name.</param>
            <param name="description">The character set description.</param>
            <param name="codePage">The character set codepage.</param>
        </member>
        <member name="M:DomainObjects.CharacterSet.FindCharacterSet(System.String)">
            <summary>
            Find a character set.
            </summary>
            <param name="name">The name of the character set.</param>
            <returns>The character set or null if it cannot be found.</returns>
        </member>
        <member name="M:DomainObjects.CharacterSet.MarkAsUsed(System.String,DomainObjects.CharacterSetUsage)">
            <summary>
            Flag the character set as used.
            </summary>
            <param name="name">The name of the character set.</param>
            <param name="usage">The type of usage.</param>
        </member>
        <member name="M:DomainObjects.CharacterSet.LogUsage">
            <summary>
            Log the character set usage.
            </summary>
        </member>
        <member name="M:DomainObjects.CharacterSet.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="P:DomainObjects.CharacterSet.CharacterSets">
            <summary>
            Get the collection of character sets.
            </summary>
        </member>
        <member name="P:DomainObjects.CharacterSet.Name">
            <summary>
            Get the character set name.
            </summary>
        </member>
        <member name="P:DomainObjects.CharacterSet.Description">
            <summary>
            Get the character set description.
            </summary>
        </member>
        <member name="T:DomainObjects.ChannelGroup">
            <summary>
            The class that describes an OpenTV channel group.
            </summary>
        </member>
        <member name="M:DomainObjects.ChannelGroup.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the ChannelGroup class.
            </summary>
            <param name="groupNumber">The group number.</param>
        </member>
        <member name="M:DomainObjects.ChannelGroup.AddEntry(System.Int32,DomainObjects.ChannelGroupEntry)">
            <summary>
            Add a new channel group entry.
            </summary>
            <param name="newGroupNumber">The channel group.</param>
            <param name="newEntry">The new entry.</param>
        </member>
        <member name="M:DomainObjects.ChannelGroup.LogChannelGroups">
            <summary>
            Log the channel groups.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelGroup.Groups">
            <summary>
            Get the list of channel groups.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelGroup.GroupNumber">
            <summary>
            Get the group number.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelGroup.Channels">
            <summary>
            Get the list of channels for the group.
            </summary>
        </member>
        <member name="T:DomainObjects.SatelliteDish">
            <summary>
            The class that describes a satellite dish.
            </summary>
        </member>
        <member name="F:DomainObjects.SatelliteDish.DefaultLNBLowBandFrequency">
            <summary>
            Get the default low band frequency.
            </summary>
        </member>
        <member name="F:DomainObjects.SatelliteDish.DefaultLNBHighBandFrequency">
            <summary>
            Get the default high band frequency.
            </summary>
        </member>
        <member name="F:DomainObjects.SatelliteDish.DefaultLNBSwitchFrequency">
            <summary>
            Get the default switch frequency.
            </summary>
        </member>
        <member name="M:DomainObjects.SatelliteDish.#ctor">
            <summary>
            Initialize a new instance of the SatelliteDish class.
            </summary>
        </member>
        <member name="M:DomainObjects.SatelliteDish.Clone">
            <summary>
            Create a copy of this instance.
            </summary>
            <returns>A new instance with the same properties.</returns>
        </member>
        <member name="M:DomainObjects.SatelliteDish.EqualTo(DomainObjects.SatelliteDish)">
            <summary>
            Check if this instance is equal to another.
            </summary>
            <param name="dish">The other instance.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:DomainObjects.SatelliteDish.ToString">
            <summary>
            Get a description of this dish.
            </summary>
            <returns>A string describing the dish.</returns>
        </member>
        <member name="P:DomainObjects.SatelliteDish.FirstDefault">
            <summary>
            Get the first set of default LNB settings.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteDish.Default">
            <summary>
            Get the next set of default LNB settings.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteDish.LNBLowBandFrequency">
            <summary>
            Get or set the low band frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteDish.LNBHighBandFrequency">
            <summary>
            Get or set the high band frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteDish.LNBSwitchFrequency">
            <summary>
            Get or set the switch frequency.
            </summary>
        </member>
        <member name="P:DomainObjects.SatelliteDish.LNBType">
            <summary>
            The LNB type for Dish Networks.
            </summary>
        </member>
        <member name="T:DomainObjects.FECRate">
            <summary>
            The class that describes the forward error correction.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate12">
            <summary>
            The FEC of 1/2.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate13">
            <summary>
            The FEC of 1/3.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate14">
            <summary>
            The FEC of 1/4.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate23">
            <summary>
            The FEC of 2/3.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate25">
            <summary>
            The FEC of 2/5.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate34">
            <summary>
            The FEC of 3/4.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate35">
            <summary>
            The FEC of 3/5.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate45">
            <summary>
            The FEC of 4/5.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate511">
            <summary>
            The FEC of 5/11.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate56">
            <summary>
            The FEC of 5/6.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate67">
            <summary>
            The FEC of 6/7.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate78">
            <summary>
            The FEC of 7/8.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate89">
            <summary>
            The FEC of 8/9.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRate910">
            <summary>
            The FEC of 9/10.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRateMax">
            <summary>
            The maximum FEC.
            </summary>
        </member>
        <member name="F:DomainObjects.FECRate.FECRateUndefined">
            <summary>
            The undefined FEC.
            </summary>
        </member>
        <member name="M:DomainObjects.FECRate.#ctor">
            <summary>
            Initialize a new instance of the FECRate class.
            </summary>
        </member>
        <member name="M:DomainObjects.FECRate.#ctor(System.String)">
            <summary>
            Initialize a new instance of the FECRate class.
            </summary>
            <param name="fecRate">The FEC rate to be set.</param>
        </member>
        <member name="M:DomainObjects.FECRate.ToString">
            <summary>
            Return a string representation of this instance.
            </summary>
            <returns>A string describing this FEC rate.</returns>
        </member>
        <member name="M:DomainObjects.FECRate.ConvertDVBFecRate(System.Int32)">
            <summary>
            Convert the DVB FEC rate to the internal FEC rate.
            </summary>
            <param name="fecRate">The rate to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DomainObjects.FECRate.GetIndex(DomainObjects.FECRate)">
            <summary>
            Get the index number of a DVB FEC value.
            </summary>
            <param name="fecRate">The FEC value.</param>
            <returns>The index number.</returns>
        </member>
        <member name="P:DomainObjects.FECRate.FECRates">
            <summary>
            Get all the FEC rates.
            </summary>
        </member>
        <member name="P:DomainObjects.FECRate.Rate">
            <summary>
            Get or set the FEC rate.
            </summary>
        </member>
        <member name="T:DomainObjects.OutputFileXML">
            <summary>
            The class that describes the xmltv file.
            </summary>
        </member>
        <member name="T:DomainObjects.LNBType">
            <summary>
            The class that describes the LNB types for Dish Network.
            </summary>
        </member>
        <member name="F:DomainObjects.LNBType.Legacy">
            <summary>
            The legacy type.
            </summary>
        </member>
        <member name="F:DomainObjects.LNBType.DishProDigitalService">
            <summary>
            The DishPro digital satellite service type.
            </summary>
        </member>
        <member name="F:DomainObjects.LNBType.DishProFixedService">
            <summary>
            The DishPro fixed fixed service satellite type.
            </summary>
        </member>
        <member name="M:DomainObjects.LNBType.#ctor">
            <summary>
            Initialize a new instance of the LNBType class.
            </summary>
        </member>
        <member name="M:DomainObjects.LNBType.#ctor(System.String)">
            <summary>
            Initialize a new instance of the LNBType class.
            </summary>
            <param name="type">The LNB type to be set.</param>
        </member>
        <member name="M:DomainObjects.LNBType.ToString">
            <summary>
            Return a string representation of this instance.
            </summary>
            <returns>A string describing this LNB type.</returns>
        </member>
        <member name="M:DomainObjects.LNBType.GetInstance(System.String)">
            <summary>
            Get a new instance of the LNBType class.
            </summary>
            <param name="decode">The lnb type decode.</param>
            <returns>A new instance of the LNBType class.</returns>
        </member>
        <member name="P:DomainObjects.LNBType.LNBTypes">
            <summary>
            Get all the LNB types.
            </summary>
        </member>
        <member name="P:DomainObjects.LNBType.Type">
            <summary>
            Get the LNB type.
            </summary>
        </member>
        <member name="T:DomainObjects.HttpProxy">
            <summary>
            The class that controls the HTTP proxy process.
            </summary>
        </member>
        <member name="M:DomainObjects.HttpProxy.#ctor">
            <summary>
            Initialize a new instance of the HttpProxy class.
            </summary>
        </member>
        <member name="M:DomainObjects.HttpProxy.Initialize">
            <summary>
            Initialize the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DomainObjects.HttpProxy.Close">
            <summary>
            Close the proxy process.
            </summary>
        </member>
        <member name="P:DomainObjects.HttpProxy.ProxyUrl">
            <summary>
            Get the proxy url.
            </summary>
        </member>
        <member name="P:DomainObjects.HttpProxy.ProxyPort">
            <summary>
            Get the proxy port.
            </summary>
        </member>
        <member name="T:DomainObjects.ChannelGroupEntry">
            <summary>
            The class that describes a channel group entry.
            </summary>
        </member>
        <member name="M:DomainObjects.ChannelGroupEntry.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ChannelGroupEntry class.
            </summary>
            <param name="channelName">The channel name.</param>
        </member>
        <member name="P:DomainObjects.ChannelGroupEntry.ChannelName">
            <summary>
            Get the channel name.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelGroupEntry.OriginalNetworkId">
            <summary>
            Get the original network ID.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelGroupEntry.TransportStreamId">
            <summary>
            Get the transport stream ID.
            </summary>
        </member>
        <member name="P:DomainObjects.ChannelGroupEntry.ServiceId">
            <summary>
            Get the service ID.
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DVBServices</name>
    </assembly>
    <members>
        <member name="T:DVBServices.DVBCableChannelInfoDescriptor">
            <summary>
            DVB Cable channel (UK Virgin) descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableChannelInfoDescriptor.ChannelNumber">
            <summary>
            Get the channel number.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableChannelInfoDescriptor.Name">
            <summary>
            Get the channel name.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableChannelInfoDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBCableChannelInfoDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBCableChannelInfoDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBCableChannelInfoDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBCableChannelInfoDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBCableChannelInfoDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBLinkageDescriptor">
            <summary>
            DVB linkage descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.OriginalNetworkId">
            <summary>
            Get the original network ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.TransportStreamId">
            <summary>
            Get the transport stream ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.ServiceId">
            <summary>
            Get the service ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.LinkageType">
            <summary>
            Get the linkage type.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.HandoverType">
            <summary>
            Get the handover type (linkage type mobile handover only).
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.OriginType">
            <summary>
            Get the origin type (linkage type mobile handover only).
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.NetworkId">
            <summary>
            Get the network ID (linkage type mobile handover only).
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.InitialServiceId">
            <summary>
            Get the initial service ID (linkage type mobile handover only).
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.TargetEventId">
            <summary>
            Get the target event ID (linkage type event only).
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.TargetListed">
            <summary>
            Get the target listed flag (linkage type event only).
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.Simulcast">
            <summary>
            Get the simulcast flag (linkage type event only).
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.PrivateData">
            <summary>
            Get the private data bytes (linkage type event only).
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.IsEpgLinkage">
            <summary>
            Return true if the linkage type is EPG; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.IsMobileHandoverLinkage">
            <summary>
            Return true if the linkage type is mobile handover; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.IsEventLinkage">
            <summary>
            Return true if the linkage type is event; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLinkageDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBLinkageDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBLinkageDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBLinkageDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBLinkageDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBLinkageDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBServiceAvailabilityDescriptor">
            <summary>
            DVB Service Availability descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceAvailabilityDescriptor.AvailabilityFlag">
            <summary>
            Get the availability flag.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceAvailabilityDescriptor.Cells">
            <summary>
            Get the list of cells.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceAvailabilityDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBServiceAvailabilityDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBServiceAvailabilityDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBServiceAvailabilityDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBServiceAvailabilityDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBServiceAvailabilityDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceIdentifierDescriptor.Identifier">
            <summary>
            Get the identifier.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceIdentifierDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBServiceIdentifierDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBServiceIdentifierDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBServiceIdentifierDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBServiceIdentifierDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBServiceIdentifierDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBStreamIdentifierDescriptor">
            <summary>
            DVB Stream Identifier descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBStreamIdentifierDescriptor.ComponentTag">
            <summary>
            Get the component tag.
            </summary>
        </member>
        <member name="P:DVBServices.DVBStreamIdentifierDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBStreamIdentifierDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBStreamIdentifierDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBStreamIdentifierDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBStreamIdentifierDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBStreamIdentifierDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.EITControllerEx">
            <summary>
            The class that controls the acquisition and processing of EIT data using a blocking queue.
            </summary>
        </member>
        <member name="P:DVBServices.EITControllerEx.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.EITControllerEx.AllDataProcessed">
            <summary>
            Return true if the EIT data is complete; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.EITControllerEx.#ctor">
            <summary>
            Initialize a new instance of the EITController class.
            </summary>
        </member>
        <member name="M:DVBServices.EITControllerEx.Stop">
            <summary>
            Stop acquiring and processing EIT data.
            </summary>
        </member>
        <member name="M:DVBServices.EITControllerEx.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process EIT data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.EITControllerEx.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process EIT data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to be collected.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.EITControllerEx.ProcessBouquetSections">
            <summary>
            Process the bouquet data.
            </summary>
        </member>
        <member name="M:DVBServices.EITControllerEx.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.AC3AudioDescriptor">
            <summary>
            ATSC PSIP AC3 Audio descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.SampleRateCode">
            <summary>
            Get the sample rate code.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.Bsid">
            <summary>
            Get the BSID.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.BitRateCode">
            <summary>
            Get the bit rate code.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.SurroundMode">
            <summary>
            Get the surround mode.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.Bsmod">
            <summary>
            Get the BSMOD.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.NumberOfChannels">
            <summary>
            Get the number of channels.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.FullServiceFlag">
            <summary>
            Get the full service flag.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.LanguageCode">
            <summary>
            Get the language code.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.LanguageCode2">
            <summary>
            Get the languageCode 2.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.MainID">
            <summary>
            Get the main ID.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.Priority">
            <summary>
            Get the prioroty.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.ASVCFlags">
            <summary>
            Get the ASVC flags.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.Description">
            <summary>
            Get the description.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.Language">
            <summary>
            Get the language.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.Language2">
            <summary>
            Get the language 2.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.AdditionalInfo">
            <summary>
            Get the additional info.
            </summary>
        </member>
        <member name="P:DVBServices.AC3AudioDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.AC3AudioDescriptor.#ctor">
            <summary>
            Initialize a new instance of the AC3AudioDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.AC3AudioDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.AC3AudioDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.AC3AudioDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.AtscPsipController">
            <summary>
            The class that controls the acquisition and processing of ATSC PSIP data.
            </summary>
        </member>
        <member name="P:DVBServices.AtscPsipController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.AtscPsipController.AllDataProcessed">
            <summary>
            Return true if the EIT data is complete; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.AtscPsipController.#ctor">
            <summary>
            Initialize a new instance of the AtscPsipController class.
            </summary>
        </member>
        <member name="M:DVBServices.AtscPsipController.Stop">
            <summary>
            Stop acquiring and processing EIT data.
            </summary>
        </member>
        <member name="M:DVBServices.AtscPsipController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process ATSC PSIP Info data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.AtscPsipController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process ATSC PSIP Info data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.AtscPsipController.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.CaptionServiceDescriptor">
            <summary>
            ATSC PSIP Caption Service descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptor.Services">
            <summary>
            Get the collection of services.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.CaptionServiceDescriptor.#ctor">
            <summary>
            Initialize a new instance of the CaptionServiceDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.CaptionServiceDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.CaptionServiceDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.CaptionServiceDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.CaptionServiceDescriptorEntry">
            <summary>
            ATSC PSIP Caption Service descriptor entry class.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptorEntry.LanguageCode">
            <summary>
            Get the language.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptorEntry.DigitalCC">
            <summary>
            Get the digital cc flag.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptorEntry.Line21Field">
            <summary>
            Get the line21 field flag.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptorEntry.CaptionServiceNumber">
            <summary>
            Get the caption service number.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptorEntry.EasyReader">
            <summary>
            Get the easy reader flag.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptorEntry.WideAspectRatio">
            <summary>
            Get the wide aspect ratio flag.
            </summary>
        </member>
        <member name="P:DVBServices.CaptionServiceDescriptorEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.CaptionServiceDescriptorEntry.#ctor">
            <summary>
            Initialize a new instance of the CaptionServiceDescriptorEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.CaptionServiceDescriptorEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.CaptionServiceDescriptorEntry.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.CaptionServiceDescriptorEntry.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ContentAdvisoryDescriptor">
            <summary>
            ATSC PSIP Content Advisory descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryDescriptor.Regions">
            <summary>
            Get the collection of rating regions.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ContentAdvisoryDescriptor.#ctor">
            <summary>
            Initialize a new instance of the ContentAdvisoryDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.ContentAdvisoryDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.ContentAdvisoryDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ContentAdvisoryDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ContentAdvisoryRatingDimension">
            <summary>
            ATSC PSIP Content Advisory Rating Dimension.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryRatingDimension.Dimension">
            <summary>
            Get the dimension.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryRatingDimension.RatingValue">
            <summary>
            Get the rating value.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryRatingDimension.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ContentAdvisoryRatingDimension.#ctor">
            <summary>
            Initialize a new instance of the ContentAdvisoryRatingDimension class.
            </summary>
        </member>
        <member name="M:DVBServices.ContentAdvisoryRatingDimension.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.ContentAdvisoryRatingDimension.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ContentAdvisoryRatingDimension.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ContentAdvisoryRatingRegion">
            <summary>
            ATSC PSIP Content Advisory Rating Region.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryRatingRegion.Region">
            <summary>
            Get the region.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryRatingRegion.Dimensions">
            <summary>
            Get the dimension collection.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryRatingRegion.Description">
            <summary>
            Get the description.
            </summary>
        </member>
        <member name="P:DVBServices.ContentAdvisoryRatingRegion.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ContentAdvisoryRatingRegion.#ctor">
            <summary>
            Initialize a new instance of the ContentAdvisoryRatingRegion class.
            </summary>
        </member>
        <member name="M:DVBServices.ContentAdvisoryRatingRegion.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.ContentAdvisoryRatingRegion.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ContentAdvisoryRatingRegion.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.EventInformationTable">
            <summary>
            The class that describes a Event Information Table section.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTable.Complete">
            <summary>
            Return true if all sections have been received; false otherwsie.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTable.SourceID">
            <summary>
            Get the source ID.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTable.ProtocolVersion">
            <summary>
            Get the protocol version.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTable.Events">
            <summary>
            Get the collection of events.
            </summary>
        </member>
        <member name="M:DVBServices.EventInformationTable.#ctor">
            <summary>
            Initialize a new instance of the VirtualChannelTable class.
            </summary>
        </member>
        <member name="M:DVBServices.EventInformationTable.Process(System.Int32,System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="pid">The PID containing the section.</param>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.EventInformationTable.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.EventInformationTable.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.EventInformationTableEntry">
            <summary>
            The class that describes an event information table entry.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.EventID">
            <summary>
            Get the event ID.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.StartTime">
            <summary>
            Get the start time.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.ETMLocation">
            <summary>
            Get the ETM location.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.Duration">
            <summary>
            Get the duration.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.EventName">
            <summary>
            Get the event name.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.Descriptors">
            <summary>
            Get the collection of descriptors describing this table entry.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.TotalLength">
            <summary>
            Get the total length of the entry.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.ParentalRating">
            <summary>
            Get the parental rating.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.AudioQuality">
            <summary>
            Get the audio quality.
            </summary>
        </member>
        <member name="P:DVBServices.EventInformationTableEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the transport stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The transport stream has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.EventInformationTableEntry.#ctor">
            <summary>
            Initialize a new instance of the EventInformationTableEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.EventInformationTableEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the transport stream.</param>
            <param name="index">Index of the first byte of the transport stream in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.EventInformationTableEntry.Validate">
            <summary>
            Validate the fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.EventInformationTableEntry.LogMessage">
            <summary>
            Log the fields.
            </summary>
        </member>
        <member name="T:DVBServices.ExtendedChannelNameDescriptor">
            <summary>
            ATSC PSIP Extended Channel Name descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedChannelNameDescriptor.LongName">
            <summary>
            Get the long name.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedChannelNameDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ExtendedChannelNameDescriptor.#ctor">
            <summary>
            Initialize a new instance of the ExtendedChannelNameDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.ExtendedChannelNameDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.ExtendedChannelNameDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ExtendedChannelNameDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ExtendedTextTable">
            <summary>
            The class that describes an Extended Text Table section.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedTextTable.TextEntries">
            <summary>
            Get the collection of Extended Text entries in the section.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedTextTable.Complete">
            <summary>
            Return true if all sections have been received; false otherwsie.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedTextTable.ProtocolVersion">
            <summary>
            Get the protocol version.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedTextTable.TextEntry">
            <summary>
            Get the text entry.
            </summary>
        </member>
        <member name="M:DVBServices.ExtendedTextTable.#ctor">
            <summary>
            Initialize a new instance of the ExtendedTextTable class.
            </summary>
        </member>
        <member name="M:DVBServices.ExtendedTextTable.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.ExtendedTextTable.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.ExtendedTextTable.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.ExtendedTextTableEntry">
            <summary>
            The class that describes an extended text table entry.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedTextTableEntry.SourceID">
            <summary>
            Get the source ID.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedTextTableEntry.EventID">
            <summary>
            Get the event ID.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedTextTableEntry.Text">
            <summary>
            Get the text.
            </summary>
        </member>
        <member name="P:DVBServices.ExtendedTextTableEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the transport stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The transport stream has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ExtendedTextTableEntry.#ctor">
            <summary>
            Initialize a new instance of the ExtendedTextTableEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.ExtendedTextTableEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the transport stream.</param>
            <param name="index">Index of the first byte of the transport stream in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.ExtendedTextTableEntry.Validate">
            <summary>
            Validate the fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ExtendedTextTableEntry.LogMessage">
            <summary>
            Log the fields.
            </summary>
        </member>
        <member name="T:DVBServices.GenreAttribute">
            <summary>
            ATSC PSIP Genre attribute.
            </summary>
        </member>
        <member name="P:DVBServices.GenreAttribute.Attribute">
            <summary>
            Get the attribute.
            </summary>
        </member>
        <member name="P:DVBServices.GenreAttribute.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.GenreAttribute.#ctor">
            <summary>
            Initialize a new instance of the GenreAttribute class.
            </summary>
        </member>
        <member name="M:DVBServices.GenreAttribute.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.GenreAttribute.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.GenreAttribute.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.GenreDescriptor">
            <summary>
            ATSC PSIP Genre descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.GenreDescriptor.Attributes">
            <summary>
            Get the collection of attributes.
            </summary>
        </member>
        <member name="P:DVBServices.GenreDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.GenreDescriptor.#ctor">
            <summary>
            Initialize a new instance of the GenreDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.GenreDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.GenreDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.GenreDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.MasterGuideTable">
            <summary>
            The class that describes a Master Guide Table section.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTable.ProtocolVersion">
            <summary>
            Get the protocol version.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTable.TableEntries">
            <summary>
            Get the collection of table definitions.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTable.Descriptors">
            <summary>
            Get the collection of descriptors.
            </summary>
        </member>
        <member name="M:DVBServices.MasterGuideTable.#ctor">
            <summary>
            Initialize a new instance of the MasterGuideTable class.
            </summary>
        </member>
        <member name="M:DVBServices.MasterGuideTable.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.MasterGuideTable.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.MasterGuideTable.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.MasterGuideTableEntry">
            <summary>
            The class that describes a master guide table entry.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTableEntry.TableType">
            <summary>
            Get the table type.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTableEntry.Pid">
            <summary>
            Get the table's PID.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTableEntry.Version">
            <summary>
            Get the version number.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTableEntry.ByteCount">
            <summary>
            Get the number of bytes.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTableEntry.Descriptors">
            <summary>
            Get the collection of descriptors describing this table entry.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTableEntry.TotalLength">
            <summary>
            Get the total length of the transport stream data.
            </summary>
        </member>
        <member name="P:DVBServices.MasterGuideTableEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the transport stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The transport stream has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.MasterGuideTableEntry.#ctor">
            <summary>
            Initialize a new instance of the MasterGuideTableEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.MasterGuideTableEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the transport stream.</param>
            <param name="index">Index of the first byte of the transport stream in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MasterGuideTableEntry.Validate">
            <summary>
            Validate the fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MasterGuideTableEntry.LogMessage">
            <summary>
            Log the fields.
            </summary>
        </member>
        <member name="T:DVBServices.MultipleString">
            <summary>
            The class that describes an ATSC PSIP multiple string field.
            </summary>
        </member>
        <member name="P:DVBServices.MultipleString.UseUnicodeEncoding">
            <summary>
            Get the flag that indicates Unicode encoding of output is necessary.
            </summary>
        </member>
        <member name="P:DVBServices.MultipleString.Strings">
            <summary>
            Get the collection of strings.
            </summary>
        </member>
        <member name="P:DVBServices.MultipleString.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the transport stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The transport stream has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.MultipleString.#ctor">
            <summary>
            Initialize a new instance of the MultipleString class.
            </summary>
        </member>
        <member name="M:DVBServices.MultipleString.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the transport stream.</param>
            <param name="index">Index of the first byte of the transport stream in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MultipleString.Validate">
            <summary>
            Validate the fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MultipleString.LogMessage">
            <summary>
            Log the fields.
            </summary>
        </member>
        <member name="M:DVBServices.MultipleString.ToString">
            <summary>
            Get the text held by this instance.
            </summary>
            <returns>The decoded text.</returns>
        </member>
        <member name="T:DVBServices.AtscPsipProgramCategory">
            <summary>
            The class that describes an ATSC PSIP program category.
            </summary>
        </member>
        <member name="P:DVBServices.AtscPsipProgramCategory.Categories">
            <summary>
            Get the collection of program categories.
            </summary>
        </member>
        <member name="P:DVBServices.AtscPsipProgramCategory.UndefinedCategories">
            <summary>
            Get the collection of undefined categories.
            </summary>
        </member>
        <member name="P:DVBServices.AtscPsipProgramCategory.FileName">
            <summary>
            Get the standard file name.
            </summary>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.#ctor">
            <summary>
            Initialize a new instance of the AtscPsipProgramCategory class.
            </summary>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.FindCategory(System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.FindCategory(System.Int32)">
            <summary>
            Find a category.
            </summary>
            <param name="category">The category.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.AddCategory(System.Int32,System.String)">
            <summary>
            Add a category.
            </summary>
            <param name="category">The category.</param>
            <param name="description">The full category description.</param>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.Load">
            <summary>
            Load the categories from the standard file.
            </summary>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.Load(System.String)">
            <summary>
            Load the categories from a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.Save(System.String)">
            <summary>
            Save the categories to a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>Error message if it failed; null otherwise.</returns>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.AddUndefinedCategory(System.Int32,System.String)">
            <summary>
            Add an undefined content to the collection of undefined contents.
            </summary>
            <param name="category">The category.</param>
            <param name="sampleEvent">The description of a sample event.</param>
        </member>
        <member name="M:DVBServices.AtscPsipProgramCategory.GetCategory(DVBServices.EventInformationTableEntry)">
            <summary>
            Get the category for an event.
            </summary>
            <param name="eventEntry">The event entry.</param>
            <returns>A category instance or null.</returns>
        </member>
        <member name="T:DVBServices.RatingRegion">
            <summary>
            The class that describes a Rating Region.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegion.Region">
            <summary>
            Get the region.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegion.Name">
            <summary>
            Get the name.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegion.Dimensions">
            <summary>
            Get the collection of dimensions.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegion.Descriptors">
            <summary>
            Get the collection of descriptors.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegion.#ctor">
            <summary>
            Initialize a new instance of the RatingRegion class.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegion.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
            <param name="region">The region being processed.</param>
        </member>
        <member name="M:DVBServices.RatingRegion.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegion.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.RatingRegionTable">
            <summary>
            The class that describes a Rating Region Table section.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionTable.Regions">
            <summary>
            Get the collection of Rating Regions.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionTable.ProtocolVersion">
            <summary>
            Get the protocol version.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionTable.Region">
            <summary>
            Get the region.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegionTable.#ctor">
            <summary>
            Initialize a new instance of the RatingRegionTable class.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegionTable.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.RatingRegionTable.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegionTable.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegionTable.AddRegion(DVBServices.RatingRegion)">
            <summary>
            Add a new region to the collection.
            </summary>
            <param name="newRegion">The region to be added.</param>
        </member>
        <member name="T:DVBServices.RatingRegionDimension">
            <summary>
            ATSC PSIP Rating Region Dimension class.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionDimension.Name">
            <summary>
            Get the dimension name.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionDimension.GraduatedScale">
            <summary>
            Get the graduated scale flag.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionDimension.Values">
            <summary>
            Get the value collection.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionDimension.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.RatingRegionDimension.#ctor">
            <summary>
            Initialize a new instance of the RatingRegionDimension class.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegionDimension.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.RatingRegionDimension.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.RatingRegionDimension.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.RatingRegionValue">
            <summary>
            ATSC PSIP Rating Region alue entry.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionValue.AbbreviatedText">
            <summary>
            Get the abbreviated text.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionValue.FullText">
            <summary>
            Get the full text.
            </summary>
        </member>
        <member name="P:DVBServices.RatingRegionValue.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.RatingRegionValue.#ctor">
            <summary>
            Initialize a new instance of the RatingRegionValue class.
            </summary>
        </member>
        <member name="M:DVBServices.RatingRegionValue.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.RatingRegionValue.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.RatingRegionValue.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ServiceLocationDescriptor">
            <summary>
            ATSC PSIP Service Location descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceLocationDescriptor.PcrPid">
            <summary>
            Get the PCR PID.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceLocationDescriptor.Locations">
            <summary>
            Get the collection of locations.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceLocationDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ServiceLocationDescriptor.#ctor">
            <summary>
            Initialize a new instance of the ServiceLocationDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceLocationDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.ServiceLocationDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ServiceLocationDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ServiceLocationDescriptorEntry">
            <summary>
            ATSC PSIP Service Location descriptor entry class.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceLocationDescriptorEntry.StreamType">
            <summary>
            Get the stream type.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceLocationDescriptorEntry.ElementaryPid">
            <summary>
            Get the elementary PID.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceLocationDescriptorEntry.LanguageCode">
            <summary>
            Get the language.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceLocationDescriptorEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ServiceLocationDescriptorEntry.#ctor">
            <summary>
            Initialize a new instance of the ServiceLocationDescriptorEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceLocationDescriptorEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.ServiceLocationDescriptorEntry.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ServiceLocationDescriptorEntry.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.VirtualChannelTable">
            <summary>
            The class that describes a Virtual Channel Table section.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannelTable.Channels">
            <summary>
            Get the collection of Virtual Channels in the section.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannelTable.Complete">
            <summary>
            Return true if all sections have been received; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannelTable.EPGCount">
            <summary>
            Get the total number of EPG entries.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannelTable.ProtocolVersion">
            <summary>
            Get the protocol version.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannelTable.Descriptors">
            <summary>
            Get the collection of descriptors.
            </summary>
        </member>
        <member name="M:DVBServices.VirtualChannelTable.#ctor">
            <summary>
            Initialize a new instance of the VirtualChannelTable class.
            </summary>
        </member>
        <member name="M:DVBServices.VirtualChannelTable.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader,System.Boolean,System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
            <param name="isCable">True is the section is a virtual cable section;false otherwise.</param>
            <param name="frequency">The frequency being processed.</param>
        </member>
        <member name="M:DVBServices.VirtualChannelTable.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.VirtualChannelTable.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.VirtualChannel">
            <summary>
            The class that describes a PSIP virtual channel.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.CollectionFrequency">
            <summary>
            Get the frequency the channel was found on.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.ShortName">
            <summary>
            Get the short name.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.MajorChannelNumber">
            <summary>
            Get the major channel number.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.MinorChannelNumber">
            <summary>
            Get the minor channel number.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.ModulationMode">
            <summary>
            Get the modulation mode.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.Frequency">
            <summary>
            Get the carrier frequency.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.TransportStreamID">
            <summary>
            Get the transport stream ID (TSID).
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.ProgramNumber">
            <summary>
            Get the program number.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.ETMLocation">
            <summary>
            Get the ETM location.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.AccessControlled">
            <summary>
            Get the access controlled flag.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.Hidden">
            <summary>
            Get the hidden flag.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.PathSelect">
            <summary>
            Get the path select flag.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.OutOfBand">
            <summary>
            Get the out of band flag.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.HideGuide">
            <summary>
            Get the hide guide flag.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.ServiceType">
            <summary>
            Get the service type.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.SourceID">
            <summary>
            Get the source ID.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.Descriptors">
            <summary>
            Get the collection of descriptors describing this table entry.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.TotalLength">
            <summary>
            Get the total length of the transport stream data.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.EPGCollection">
            <summary>
            Get the collection of EPG entries for this channel.
            </summary>
        </member>
        <member name="P:DVBServices.VirtualChannel.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the transport stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The transport stream has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.VirtualChannel.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the VirtualChannel class.
            </summary>
            <param name="collectionFrequency">The frequency the channel was collected on.</param>
        </member>
        <member name="M:DVBServices.VirtualChannel.Process(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the transport stream.</param>
            <param name="index">Index of the first byte of the transport stream in the MPEG2 section.</param>
            <param name="isCable">True if the entry is for cable; false otherwise.</param>
        </member>
        <member name="M:DVBServices.VirtualChannel.Validate">
            <summary>
            Validate the fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.VirtualChannel.LogMessage">
            <summary>
            Log the fields.
            </summary>
        </member>
        <member name="P:DVBServices.BellShortEventDescriptor.EventName">
            <summary>
            Get the event name.
            </summary>
        </member>
        <member name="P:DVBServices.BellShortEventDescriptor.ShortDescription">
            <summary>
            Get the short description.
            </summary>
        </member>
        <member name="P:DVBServices.BellShortEventDescriptor.HighDefinition">
            <summary>
            Get the short description.
            </summary>
        </member>
        <member name="T:DVBServices.BellTVController">
            <summary>
            The class that controls the acquisition and processing of Bell TV data.
            </summary>   
        </member>
        <member name="P:DVBServices.BellTVController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVController.AllDataProcessed">
            <summary>
            Return true if all data has been processed; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVController.#ctor">
            <summary>
            Initialize a new instance of the BellTVController class.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVController.Stop">
            <summary>
            Stop acquiring and processing data.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process Bell TV data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.BellTVController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process Bell TV data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.BellTVController.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.BellTVEntry">
            <summary>
            The class that describes a Bell TV entry.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.StartTime">
            <summary>
            Get the event start time.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.Duration">
            <summary>
            Get the event duration.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.RunningStatus">
            <summary>
            Get the running status of the event.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.Scrambled">
            <summary>
            Return true if the event is scrambled; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.EventName">
            <summary>
            Get the event name.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.ShortDescription">
            <summary>
            Get the short description for the event.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.OriginalDescription">
            <summary>
            Get the original description for the event.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.SubTitle">
            <summary>
            Get the sub title for the event.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.ClosedCaptions">
            <summary>
            Get the closed captions flag.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.HighDefinition">
            <summary>
            Get the high definition flag.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.Stereo">
            <summary>
            Get the stereo flag.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.ContentType">
            <summary>
            Get the DVB standard (EN 300 468) content type.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.ContentSubType">
            <summary>
            Get the DVB standard (EN 300 468) content subype.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.ParentalRating">
            <summary>
            Get the parental rating.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.StarRating">
            <summary>
            Get the star rating.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.Date">
            <summary>
            Get the date.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.Series">
            <summary>
            Get the series.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.Episode">
            <summary>
            Get the episode.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.Cast">
            <summary>
            Get the cast.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.HasSexualContent">
            <summary>
            Get the sexual content advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.HasStrongLanguage">
            <summary>
            Get the strong language advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.HasViolence">
            <summary>
            Get the violence advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.HasNudity">
            <summary>
            Get the nudity advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.OriginalAirDate">
            <summary>
            Get the original air date.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the EIT entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BellTVEntry.#ctor">
            <summary>
            Initialize a new instance of the BellTVEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVEntry.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the event identification byte in the MPEG2 section.</param>
            <param name="table">The table ID containing this section.</param>
        </member>
        <member name="M:DVBServices.BellTVEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An entry field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BellTVEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.BellTVExtendedEventDescriptor">
            <summary>
            Bell TV Extended Event descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.EventDescription">
            <summary>
            Get the event description.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.OriginalDescription">
            <summary>
            Get the original unedited event description.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.SubTitle">
            <summary>
            Get the subtitle.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.LanguageCode">
            <summary>
            Get the language code.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.ClosedCaptions">
            <summary>
            Get the closed captions flag.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.Stereo">
            <summary>
            Get the stereo flag.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.Date">
            <summary>
            Get the date.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.Cast">
            <summary>
            Get the cast.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVExtendedEventDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BellTVExtendedEventDescriptor.#ctor">
            <summary>
            Initialize a new instance of the BellTVExtendedEventDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVExtendedEventDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.BellTVExtendedEventDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BellTVExtendedEventDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.BellTVProgramCategory">
            <summary>
            The class that describes an Bell TV program category entry.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVProgramCategory.Categories">
            <summary>
            Get the collection of program categories.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVProgramCategory.UndefinedCategories">
            <summary>
            Get the collection of undefined categories.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVProgramCategory.FileName">
            <summary>
            Get the standard file name.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVProgramCategory.FindCategory(System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.BellTVProgramCategory.FindCategory(System.Int32,System.Int32)">
            <summary>
            Find a category.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The subcategory.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.BellTVProgramCategory.AddCategory(System.Int32,System.Int32,System.String)">
            <summary>
            Add a category.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The subcategory.</param>
            <param name="description">The full category description.</param>
            <returns>A category instance or null if the category is undefined.</returns>        
        </member>
        <member name="M:DVBServices.BellTVProgramCategory.Load">
            <summary>
            Load the categories from the standard file.
            </summary>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.BellTVProgramCategory.Load(System.String)">
            <summary>
            Load the categories from a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.BellTVProgramCategory.Save(System.String)">
            <summary>
            Save the categories to a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>Error message if it failed; null otherwise.</returns>
        </member>
        <member name="M:DVBServices.BellTVProgramCategory.AddUndefinedCategory(System.Int32,System.Int32,System.String)">
            <summary>
            Add an undefined category to the collection of undefined contents.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The subcategory.</param>
            <param name="sampleEvent">The description of a sample event.</param>
        </member>
        <member name="T:DVBServices.BellTVRatingDescriptor">
            <summary>
            The class that describes a Bell TV rating descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVRatingDescriptor.StarRating">
            <summary>
            Get the star rating.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVRatingDescriptor.ParentalRating">
            <summary>
            Get the parental rating.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVRatingDescriptor.AdvisoryRating">
            <summary>
            Get the advisory rating.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVRatingDescriptor.HasSexualContent">
            <summary>
            Get the sexual content advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVRatingDescriptor.HasStrongLanguage">
            <summary>
            Get the strong language advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVRatingDescriptor.HasViolence">
            <summary>
            Get the violence advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVRatingDescriptor.HasNudity">
            <summary>
            Get the nudity advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVRatingDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BellTVRatingDescriptor.#ctor">
            <summary>
            Initialize a new instance of the BellTVRatingDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVRatingDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.BellTVRatingDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BellTVRatingDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.BellTVSection">
            <summary>
            The class that describes a Bell TV section.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSection.EITEntries">
            <summary>
            Get the collection of EIT enteries in the section.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSection.OriginalNetworkID">
            <summary>
            Get the original network identification (ONID).
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSection.TransportStreamID">
            <summary>
            Get the transport stream identification (TSID).
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSection.ServiceID">
            <summary>
            Get the service identification (SID).
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSection.LastTableID">
            <summary>
            Get the identification of the last table for the EIT section.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSection.SegmentLastSectionNumber">
            <summary>
            Get the segment last section number for the EIT section.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVSection.#ctor">
            <summary>
            Initialize a new instance of the BellTVSection class.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.BellTVSection.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVSection.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.BellTVSeriesDescriptor">
            <summary>
            The class that describes a Bell TV series descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSeriesDescriptor.Series">
            <summary>
            Get the series.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSeriesDescriptor.Episode">
            <summary>
            Get the Episode.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSeriesDescriptor.OriginalAirDate">
            <summary>
            Get the original air date.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSeriesDescriptor.Prefix">
            <summary>
            Get the entry type decoded as the prefix.
            </summary>
        </member>
        <member name="P:DVBServices.BellTVSeriesDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BellTVSeriesDescriptor.#ctor">
            <summary>
            Initialize a new instance of the BellTVSeriesDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.BellTVSeriesDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.BellTVSeriesDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BellTVSeriesDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.CategoryEntry">
            <summary>
            The class that describes a program category for the category analysis.
            </summary>
        </member>
        <member name="P:DVBServices.CategoryEntry.NetworkID">
            <summary>
            Get the network ID.
            </summary>
        </member>
        <member name="P:DVBServices.CategoryEntry.TransportStreamID">
            <summary>
            Get the transport stream ID.
            </summary>
        </member>
        <member name="P:DVBServices.CategoryEntry.ServiceID">
            <summary>
            Get the service ID.
            </summary>
        </member>
        <member name="P:DVBServices.CategoryEntry.StartTime">
            <summary>
            Get the program start time.
            </summary>
        </member>
        <member name="P:DVBServices.CategoryEntry.EventName">
            <summary>
            Get the title of the program.
            </summary>
        </member>
        <member name="P:DVBServices.CategoryEntry.Category">
            <summary>
            Get the category of the program.
            </summary>
        </member>
        <member name="P:DVBServices.CategoryEntry.SubCategory">
            <summary>
            Get the subcategory of the program.
            </summary>
        </member>
        <member name="M:DVBServices.CategoryEntry.#ctor(System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Int32)">
            <summary>
            Initialize a new instance of the CategoryEntry class.
            </summary>
            <param name="networkID">The network ID carrying the program.</param>
            <param name="transportStreamID">The transport stream ID carrying the program.</param>
            <param name="serviceID">The service ID carrying the program.</param>
            <param name="startTime">The start time of the program.</param>
            <param name="eventName">The title of the program.</param>
            <param name="category">The category of the program.</param>
        </member>
        <member name="M:DVBServices.CategoryEntry.#ctor(System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the CategoryEntry class.
            </summary>
            <param name="networkID">The network ID carrying the program.</param>
            <param name="transportStreamID">The transport stream ID carrying the program.</param>
            <param name="serviceID">The service ID carrying the program.</param>
            <param name="startTime">The start time of the program.</param>
            <param name="eventName">The title of the program.</param>
            <param name="category">The category of the program.</param>
            <param name="subCategory">The subcategory of the program.</param>
        </member>
        <member name="T:DVBServices.ControllerBase">
            <summary>
            The base class for the collector controllers.
            </summary>
        </member>
        <member name="P:DVBServices.ControllerBase.NetworkReader">
            <summary>
            Get the network information reader.
            </summary>
        </member>
        <member name="P:DVBServices.ControllerBase.BouquetReader">
            <summary>
            Get the bouquet reader.
            </summary>
        </member>
        <member name="P:DVBServices.ControllerBase.TimeOffsetReader">
            <summary>
            Get the time offset reader.
            </summary>
        </member>
        <member name="P:DVBServices.ControllerBase.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.ControllerBase.AllDataProcessed">
            <summary>
            Return true if all data has been processed; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.ControllerBase.#ctor">
            <summary>
            Initialise a new instance of the ControllerBase class.
            </summary>
        </member>
        <member name="M:DVBServices.ControllerBase.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Collect EPG data.
            </summary>
            <param name="dataProvider">The provider for the data samples.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>        
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.ControllerBase.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Collect partial EPG data.
            </summary>
            <param name="dataProvider">The provider for the data samples.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>        
            <param name="collectionSpan">The amount of data to collect.</param>   
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.ControllerBase.GetStationData(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Get the stations using the standard SDT pid.
            </summary>
            <param name="dataProvider">The sample data provider.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>
        </member>
        <member name="M:DVBServices.ControllerBase.GetStationData(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,System.Int32[])">
            <summary>
            Get the stations using specified pid's.
            </summary>
            <param name="dataProvider">The sample data provider.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>
            <param name="pids">An array of pid's to search.</param>
        </member>
        <member name="M:DVBServices.ControllerBase.GetNetworkInformation(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Get the network information data from the standard PID.
            </summary>
            <param name="dataProvider">The sample data provider.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>
        </member>
        <member name="M:DVBServices.ControllerBase.GetNetworkInformation(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,System.Int32[])">
            <summary>
            Get the network information data.
            </summary>
            <param name="dataProvider">The sample data provider.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>
            <param name="pids">The PID's to scan.</param>
        </member>
        <member name="M:DVBServices.ControllerBase.ProcessNetworkSections">
            <summary>
            Process the network data.
            </summary>
        </member>
        <member name="M:DVBServices.ControllerBase.GetBouquetSections(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Get the bouquet data from the standard PID.
            </summary>
            <param name="dataProvider">The sample data provider.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>
        </member>
        <member name="M:DVBServices.ControllerBase.GetBouquetSections(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,System.Int32[])">
            <summary>
            Get the bouquet data.
            </summary>
            <param name="dataProvider">The sample data provider.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>
            <param name="pids">The PID's to scan.</param>
        </member>
        <member name="M:DVBServices.ControllerBase.ProcessBouquetSections">
            <summary>
            Process the bouquet data.
            </summary>
        </member>
        <member name="M:DVBServices.ControllerBase.GetTimeOffsetSections(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Get the time offset data.
            </summary>
            <param name="dataProvider">The sample data provider.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>
        </member>
        <member name="M:DVBServices.ControllerBase.LogBufferSpaceUsed(System.String,DomainObjects.ISampleDataProvider)">
            <summary>
            Log the buffer space used.
            </summary>
            <param name="title"></param>
            <param name="dataProvider"></param>
        </member>
        <member name="M:DVBServices.ControllerBase.LogProgress(System.String,System.Int32,System.Int32)">
            <summary>
            Log the collection progress.
            </summary>
        </member>
        <member name="M:DVBServices.ControllerBase.Stop">
            <summary>
            Stop the collection.
            </summary>
        </member>
        <member name="M:DVBServices.ControllerBase.FinishFrequency">
            <summary>
            Carry out the processing necessary at the end of processing a frequency.
            </summary>
        </member>
        <member name="M:DVBServices.ControllerBase.FinishRun">
            <summary>
            Carry out the processing necessary when all frequencies have been processed.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkController">
            <summary>
            The class that controls the acquisition and processing of Dish Network data.
            </summary>   
        </member>
        <member name="P:DVBServices.DishNetworkController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkController.AllDataProcessed">
            <summary>
            Return true if all data has been processed; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkController.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkController class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkController.Stop">
            <summary>
            Stop acquiring and processing data.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process Dish Network data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.DishNetworkController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process Dish Network data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.DishNetworkController.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkEntry">
            <summary>
            The class that describes a Dish Network entry.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.StartTime">
            <summary>
            Get the event start time.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.Duration">
            <summary>
            Get the event duration.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.RunningStatus">
            <summary>
            Get the running status of the event.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.Scrambled">
            <summary>
            Return true if the event is scrambled; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.EventName">
            <summary>
            Get the event name.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.ShortDescription">
            <summary>
            Get the short description for the event.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.OriginalDescription">
            <summary>
            Get the original description for the event.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.SubTitle">
            <summary>
            Get the sub title for the event.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.ClosedCaptions">
            <summary>
            Get the closed captions flag.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.HighDefinition">
            <summary>
            Get the high definition flag.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.Stereo">
            <summary>
            Get the stereo flag.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.ContentType">
            <summary>
            Get the DVB standard (EN 300 468) content type.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.ContentSubType">
            <summary>
            Get the DVB standard (EN 300 468) content subype.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.ParentalRating">
            <summary>
            Get the parental rating.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.StarRating">
            <summary>
            Get the star rating.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.Date">
            <summary>
            Get the date.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.Series">
            <summary>
            Get the series.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.Episode">
            <summary>
            Get the episode.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.Cast">
            <summary>
            Get the cast.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.HasSexualContent">
            <summary>
            Get the sexual content advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.HasStrongLanguage">
            <summary>
            Get the strong language advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.HasViolence">
            <summary>
            Get the violence advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.HasNudity">
            <summary>
            Get the nudity advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.OriginalAirDate">
            <summary>
            Get the original air date.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the EIT entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkEntry.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkEntry.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the event identification byte in the MPEG2 section.</param>
            <param name="table">The table ID containing this section.</param>
        </member>
        <member name="M:DVBServices.DishNetworkEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An entry field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkEPGLinkDescriptor">
            <summary>
            The class that describes a Dish Network EPG link descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEPGLinkDescriptor.OriginalNetworkID">
            <summary>
            Get the network ID.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEPGLinkDescriptor.TransportStreamID">
            <summary>
            Get the transport stream ID.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEPGLinkDescriptor.ServiceID">
            <summary>
            Get the service ID.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEPGLinkDescriptor.TimeOffset">
            <summary>
            Get the program time offset.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkEPGLinkDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DishNetworkEPGLinkDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkEPGLinkDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkEPGLinkDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DishNetworkEPGLinkDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkEPGLinkDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkExtendedEventDescriptor">
            <summary>
            Dish Network Extended Event descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.EventDescription">
            <summary>
            Get the event description.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.OriginalDescription">
            <summary>
            Get the original unedited event description.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.SubTitle">
            <summary>
            Get the subtitle.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.ClosedCaptions">
            <summary>
            Get the closed captions flag.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.HighDefinition">
            <summary>
            Get the high definition flag.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.Stereo">
            <summary>
            Get the stereo flag.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.Date">
            <summary>
            Get the date.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.Cast">
            <summary>
            Get the cast.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkExtendedEventDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkExtendedEventDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkExtendedEventDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkExtendedEventDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DishNetworkExtendedEventDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkExtendedEventDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkProgramCategory">
            <summary>
            The class that describes a Dish Network program category entry.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkProgramCategory.Categories">
            <summary>
            Get the collection of program categories.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkProgramCategory.UndefinedCategories">
            <summary>
            Get the collection of undefined categories.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkProgramCategory.FileName">
            <summary>
            Get the standard file name.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkProgramCategory.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkProgramCategory class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkProgramCategory.FindCategory(System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.DishNetworkProgramCategory.FindCategory(System.Int32,System.Int32)">
            <summary>
            Find a category.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The subcategory.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.DishNetworkProgramCategory.AddCategory(System.Int32,System.Int32,System.String)">
            <summary>
            Add a category.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The subcategory.</param>
            <param name="description">The full category description.</param>
        </member>
        <member name="M:DVBServices.DishNetworkProgramCategory.Load">
            <summary>
            Load the categories from the standard file.
            </summary>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.DishNetworkProgramCategory.Load(System.String)">
            <summary>
            Load the categories from a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.DishNetworkProgramCategory.Save(System.String)">
            <summary>
            Save the categories to a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>Error message if it failed; null otherwise.</returns>
        </member>
        <member name="M:DVBServices.DishNetworkProgramCategory.AddUndefinedCategory(System.Int32,System.Int32,System.String)">
            <summary>
            Add an undefined category to the collection of undefined contents.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The subcategory.</param>
            <param name="sampleEvent">The description of a sample event.</param>
        </member>
        <member name="T:DVBServices.DishNetworkSupplementaryDescriptor">
            <summary>
            Dish Network Supplementary descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSupplementaryDescriptor.SupplementaryInformation">
            <summary>
            Get the supplementary information.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSupplementaryDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>        
        </member>
        <member name="M:DVBServices.DishNetworkSupplementaryDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkSupplementaryDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkSupplementaryDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DishNetworkSupplementaryDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkSupplementaryDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkRatingDescriptor">
            <summary>
            The class that describes a Dish Network rating descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkRatingDescriptor.StarRating">
            <summary>
            Get the star rating.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkRatingDescriptor.ParentalRating">
            <summary>
            Get the parental rating.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkRatingDescriptor.AdvisoryRating">
            <summary>
            Get the advisory rating.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkRatingDescriptor.HasSexualContent">
            <summary>
            Get the sexual content advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkRatingDescriptor.HasStrongLanguage">
            <summary>
            Get the strong language advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkRatingDescriptor.HasViolence">
            <summary>
            Get the violence advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkRatingDescriptor.HasNudity">
            <summary>
            Get the nudity advisory setting.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkRatingDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DishNetworkRatingDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkRatingDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkRatingDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DishNetworkRatingDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkRatingDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkSection">
            <summary>
            The class that describes a Dish Network section.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSection.EITEntries">
            <summary>
            Get the collection of EIT enteries in the section.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSection.OriginalNetworkID">
            <summary>
            Get the original network identification (ONID).
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSection.TransportStreamID">
            <summary>
            Get the transport stream identification (TSID).
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSection.ServiceID">
            <summary>
            Get the service identification (SID).
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSection.LastTableID">
            <summary>
            Get the identification of the last table for the EIT section.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSection.SegmentLastSectionNumber">
            <summary>
            Get the segment last section number for the EIT section.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkSection.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkSection class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.DishNetworkSection.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkSection.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkSeriesDescriptor">
            <summary>
            The class that describes a Dish Network series descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSeriesDescriptor.Series">
            <summary>
            Get the series.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSeriesDescriptor.Episode">
            <summary>
            Get the Episode.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSeriesDescriptor.OriginalAirDate">
            <summary>
            Get the original air date.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSeriesDescriptor.Prefix">
            <summary>
            Get the entry type decoded as the prefix.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkSeriesDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DishNetworkSeriesDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkSeriesDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkSeriesDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DishNetworkSeriesDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkSeriesDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkShortEventDescriptor">
            <summary>
            Dish Network Short Event descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkShortEventDescriptor.EventName">
            <summary>
            Get the event name.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkShortEventDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>        
        </member>
        <member name="M:DVBServices.DishNetworkShortEventDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkShortEventDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkShortEventDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DishNetworkShortEventDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkShortEventDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DishNetworkVCHIPDescriptor">
            <summary>
            The class that describes a Dish Network VCHIP descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkVCHIPDescriptor.VCHIPRating">
            <summary>
            Get the VCHIP rating.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkVCHIPDescriptor.ContentAdvisory">
            <summary>
            Get the content advisory.
            </summary>
        </member>
        <member name="P:DVBServices.DishNetworkVCHIPDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DishNetworkVCHIPDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DishNetworkVCHIPDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DishNetworkVCHIPDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DishNetworkVCHIPDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DishNetworkVCHIPDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ContentIdentifier">
            <summary>
            The class that describes a content identifier entry.
            </summary>
        </member>
        <member name="P:DVBServices.ContentIdentifier.Type">
            <summary>
            Get the content type.
            </summary>
        </member>
        <member name="P:DVBServices.ContentIdentifier.Location">
            <summary>
            Get the content location.
            </summary>
        </member>
        <member name="P:DVBServices.ContentIdentifier.Identifier">
            <summary>
            Get the content identifier.
            </summary>
        </member>
        <member name="P:DVBServices.ContentIdentifier.IsEpisodeLink">
            <summary>
            Return true if the link is an episode link; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.ContentIdentifier.IsSeriesLink">
            <summary>
            Return true if the link is a series link; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.ContentIdentifier.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initialize a new instance of the ContentIdentifier class.
            </summary>
            <param name="type">The type of the identifier.</param>
            <param name="location">The location of the identifier.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="T:DVBServices.DVBCountryAvailabilityDescriptor">
            <summary>
            DVB Country Availability descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCountryAvailabilityDescriptor.AvailabilityFlag">
            <summary>
            Get the availability flag.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCountryAvailabilityDescriptor.CountryCodes">
            <summary>
            Get the list of country codes.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCountryAvailabilityDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBCountryAvailabilityDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBCountryAvailabilityDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBCountryAvailabilityDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBCountryAvailabilityDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBCountryAvailabilityDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBDefaultAuthorityDescriptor">
            <summary>
            DVB DefaultAuthority descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDefaultAuthorityDescriptor.DefaultAuthority">
            <summary>
            Get the default authority.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDefaultAuthorityDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBDefaultAuthorityDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBDefaultAuthorityDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBDefaultAuthorityDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBDefaultAuthorityDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBDefaultAuthorityDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBPrivateDataSpecifierDescriptor">
            <summary>
            DVB Private Data Specifier descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBPrivateDataSpecifierDescriptor.DataSpecifier">
            <summary>
            Get the data specifier.
            </summary>
        </member>
        <member name="P:DVBServices.DVBPrivateDataSpecifierDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBPrivateDataSpecifierDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBPrivateDataSpecifierDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBPrivateDataSpecifierDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBPrivateDataSpecifierDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBPrivateDataSpecifierDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastDescriptor.DataBroadcastId">
            <summary>
            Get the data broadcast identifier.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastDescriptor.ComponentTag">
            <summary>
            Get the component tag.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastDescriptor.SelectorBytes">
            <summary>
            Get the selector bytes.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastDescriptor.LanguageCode">
            <summary>
            Get the language code.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastDescriptor.TextDescription">
            <summary>
            Get the text description.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBDataBroadcastDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBDataBroadcastIdDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBDataBroadcastDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBDataBroadcastDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBDataBroadcastDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastIdDescriptor.DataBroadcastId">
            <summary>
            Get the data broadcast identifier.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastIdDescriptor.SelectorBytes">
            <summary>
            Get the selector bytes.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastIdDescriptor.ApplicationTypes">
            <summary>
            Get the list of application types.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastIdDescriptor.Mheg5ApplicationType">
            <summary>
            Get the MHEG5 application type.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastIdDescriptor.Mheg5BootPriorityHint">
            <summary>
            Get the MHEG5 boot priority hint.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastIdDescriptor.Mheg5AppSpecificData">
            <summary>
            Get the MHEG5 app specific data.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDataBroadcastIdDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBDataBroadcastIdDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBDataBroadcastIdDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBDataBroadcastIdDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBDataBroadcastIdDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBDataBroadcastIdDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2Cell.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBT2Cell.Process(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
            <param name="tfsFlag">Other frequency flag.</param>
        </member>
        <member name="P:DVBServices.DVBT2SubCell.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBT2SubCell.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="T:DVBServices.DVBT2DeliverySystemDescriptor">
            <summary>
            DVB T2 Terrestrial Delivery System descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.TunerType">
            <summary>
            Get the tuner type for this descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.TagExtension">
            <summary>
            Get the tag extension.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.PlpId">
            <summary>
            Get the PLP ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.SystemId">
            <summary>
            Get the system ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.ExtendedDataPresent">
            <summary>
            Return true if there is extended data; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.SisoMiso">
            <summary>
            Get the siso/miso value.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.Bandwidth">
            <summary>
            Get the bandwidth.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.GuardInterval">
            <summary>
            Get the guard interval.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.TransmissionMode">
            <summary>
            Get the transmission mode.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.OtherFrequencyFlag">
            <summary>
            Get the other frequency flag.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.TfsFlag">
            <summary>
            Get the other TFS flag.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.Cells">
            <summary>
            Get the collection of cells.
            </summary>
        </member>
        <member name="P:DVBServices.DVBT2DeliverySystemDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBT2DeliverySystemDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBT2DeliverySystemDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBT2DeliverySystemDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBT2DeliverySystemDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBT2DeliverySystemDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ContentType">
            <summary>
            The class that describes a content type entry.
            </summary>
        </member>
        <member name="P:DVBServices.ContentType.Type">
            <summary>
            Get the content type.
            </summary>
        </member>
        <member name="P:DVBServices.ContentType.SubType">
            <summary>
            Get the content subtype.
            </summary>
        </member>
        <member name="P:DVBServices.ContentType.UserType">
            <summary>
            Get the content user type.
            </summary>
        </member>
        <member name="M:DVBServices.ContentType.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the ContentType class.
            </summary>
            <param name="type">The content type</param>
            <param name="subType">The content subtype.</param>
            <param name="userType">The user type.</param>
        </member>
        <member name="T:DVBServices.DVBCableDeliverySystemDescriptor">
            <summary>
            DVB Cable Delivery System descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableDeliverySystemDescriptor.TunerType">
            <summary>
            Get the tuner type for this descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableDeliverySystemDescriptor.OuterFEC">
            <summary>
            Get the Outer FEC scheme.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableDeliverySystemDescriptor.Modulation">
            <summary>
            Get the modulation.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableDeliverySystemDescriptor.SymbolRate">
            <summary>
            Get the symbol rate.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableDeliverySystemDescriptor.InnerFEC">
            <summary>
            Get the Inner FEC scheme.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCableDeliverySystemDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBCableDeliverySystemDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBCableDeliverySystemDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBCableDeliverySystemDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBCableDeliverySystemDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBCableDeliverySystemDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCADescriptor.SystemID">
            <summary>
            Get the system ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCADescriptor.Pid">
            <summary>
            Get the PID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCADescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBCADescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBCADescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBCADescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBCADescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBCADescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="P:DVBServices.DVBDeliverySystemDescriptor.Frequency">
            <summary>
            Get the frequency.
            </summary>
        </member>
        <member name="T:DVBServices.DVBNetworkNameDescriptor">
            <summary>
            DVB Network name descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBNetworkNameDescriptor.NetworkName">
            <summary>
            Get the network name.
            </summary>
        </member>
        <member name="P:DVBServices.DVBNetworkNameDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBNetworkNameDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBNetworkNameDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBNetworkNameDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBNetworkNameDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBNetworkNameDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.BouquetAssociationSection">
            <summary>
            The class that describes a Bouquet Association section.
            </summary>
        </member>
        <member name="P:DVBServices.BouquetAssociationSection.BouquetAssociationSections">
            <summary>
            Get the collection of bouquet association sections.
            </summary>
        </member>
        <member name="P:DVBServices.BouquetAssociationSection.SectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.BouquetAssociationSection.LastSectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.BouquetAssociationSection.BouquetID">
            <summary>
            Get the bouquet identification.
            </summary>
        </member>
        <member name="P:DVBServices.BouquetAssociationSection.BouquetDescriptors">
            <summary>
            Get the collection of bouquet descriptions in the section.
            </summary>
        </member>
        <member name="P:DVBServices.BouquetAssociationSection.TransportStreams">
            <summary>
            Get the collection of transport streams in the section.
            </summary>
        </member>
        <member name="P:DVBServices.BouquetAssociationSection.Name">
            <summary>
            Get the name of the bouquet.
            </summary>
        </member>
        <member name="M:DVBServices.BouquetAssociationSection.#ctor">
            <summary>
            Initialize a new instance of the BouquetAssociationSection class.
            </summary>
        </member>
        <member name="M:DVBServices.BouquetAssociationSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.BouquetAssociationSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.BouquetAssociationSection.ProcessBouquetAssociationTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the bouquet association table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A Bouquet Association instance.</returns>
        </member>
        <member name="M:DVBServices.BouquetAssociationSection.AddSection(DVBServices.BouquetAssociationSection)">
            <summary>
            Add a section to the collection.
            </summary>
            <param name="newSection">The section to be added.</param>
            <returns>True if the section was added; false it it already existed in the collection.</returns>
        </member>
        <member name="M:DVBServices.BouquetAssociationSection.FindBouquet(System.Int32)">
            <summary>
            Find a specified bouquet.
            </summary>
            <param name="bouquetID">The ID of the bouquet.</param>
            <returns>A BouquetAssociationSection instance or null if the bouquet cannot be located.</returns>
        </member>
        <member name="M:DVBServices.BouquetAssociationSection.FindBouquetName(System.Int32)">
            <summary>
            Find the name of a specified bouquet.
            </summary>
            <param name="bouquetID">The ID of the bouquet.</param>
            <returns>The name or null if the bouquet cannot be located.</returns>
        </member>
        <member name="T:DVBServices.DVBLocalTimeOffsetEntry">
            <summary>
            The class that describes a single time offset entry.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLocalTimeOffsetEntry.CountryCode">
            <summary>
            Get or set the country code.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLocalTimeOffsetEntry.Region">
            <summary>
            Get or set the region.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLocalTimeOffsetEntry.OffsetPositive">
            <summary>
            Get or set the offset polarity.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLocalTimeOffsetEntry.TimeOffset">
            <summary>
            Get or set the time offset.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLocalTimeOffsetEntry.ChangeTime">
            <summary>
            Get or set the change time.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLocalTimeOffsetEntry.NextTimeOffset">
            <summary>
            Get or set the next time offset.
            </summary>
        </member>
        <member name="T:DVBServices.DVBSatelliteDeliverySystemDescriptor">
            <summary>
            DVB Satellite Delivery System descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.TunerType">
            <summary>
            Get the tuner type for this descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.OrbitalPosition">
            <summary>
            Get the orbital position.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.EastFlag">
            <summary>
            Get the east flag.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.Polarization">
            <summary>
            Get the polarization.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.RollOff">
            <summary>
            Get the roll off.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.ModulationSystem">
            <summary>
            Get the modulation system.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.ModulationType">
            <summary>
            Get the modulation type.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.SymbolRate">
            <summary>
            Get the symbol rate.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.InnerFEC">
            <summary>
            Get the Inner FEC scheme.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.IsS2">
            <summary>
            Return true if the modulation system is S2; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DVBSatelliteDeliverySystemDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBSatelliteDeliverySystemDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBSatelliteDeliverySystemDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBSatelliteDeliverySystemDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBSatelliteDeliverySystemDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBSatelliteDeliverySystemDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBTerrestrialDeliverySystemDescriptor">
            <summary>
            DVB Terrestrial Delivery System descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.TunerType">
            <summary>
            Get the tuner type for this descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.Bandwidth">
            <summary>
            Get the bandwidth.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.PriorityFlag">
            <summary>
            Get the priority.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.TimeSliceIndicator">
            <summary>
            Get the time slice indicator.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.FECIndicator">
            <summary>
            Get the MPE-FEC indicator.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.Constellation">
            <summary>
            Get the constellation.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.HierarchyInformation">
            <summary>
            Get the hierarchy information.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.HPCodeRate">
            <summary>
            Get the HP stream code rate.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.LPCodeRate">
            <summary>
            Get the LP stream code rate.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.GuardInterval">
            <summary>
            Get the guard interval.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.TransmissionMode">
            <summary>
            Get the transmission mode.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.OtherFrequencyFlag">
            <summary>
            Get the other frequency flag.
            </summary>
        </member>
        <member name="P:DVBServices.DVBTerrestrialDeliverySystemDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBTerrestrialDeliverySystemDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBTerrestrialDeliverySystemDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBTerrestrialDeliverySystemDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBTerrestrialDeliverySystemDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBTerrestrialDeliverySystemDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.NetworkInformationSection">
            <summary>
            The class that describes a Network Information section.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.NetworkInformationSections">
            <summary>
            Get the collection of network information sections.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.SectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.LastSectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.NetworkID">
            <summary>
            Get the network identification.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.NetworkDescriptors">
            <summary>
            Get the collection of descriptors in the section.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.TransportStreams">
            <summary>
            Get the collection of transport streams in the section.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.CurrentMux">
            <summary>
            Get or set the flag indicationg current mux.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.NetworkName">
            <summary>
            Get the network name.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.IsSatellite">
            <summary>
            Returns true if the transport stream is satellite; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.IsTerrestrial">
            <summary>
            Returns true if the transport stream is terrestrial; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.NetworkInformationSection.IsCable">
            <summary>
            Returns true if the transport stream is cable; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.#ctor">
            <summary>
            Initialize a new instance of the NetworkInformationSection class.
            </summary>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.ProcessNetworkInformationTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the network information table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A Network Information section instance.</returns>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.AddSection(DVBServices.NetworkInformationSection)">
            <summary>
            Add a network information section.
            </summary>
            <param name="newSection">The section to be added.</param>
            <returns>True if the section was added; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.CheckAllLoaded">
            <summary>
            Check all sections have been loaded.
            </summary>
            <returns>True if all sections have been loaded; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.GetDeliveryData(System.Int32,System.Int32)">
            <summary>
            Get the delivery data for a network and transport stream.
            </summary>
            <param name="originalNetworkID">The network ID.</param>
            <param name="transportStreamID">The transport stream ID</param>
            <returns>A DVBDeliverySystemDescriptor instance if the transport stream can be located; null otherwise</returns>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.GetDeliveryData(System.Int32)">
            <summary>
            Get the delivery data for a transport stream.
            </summary>
            <param name="transportStreamID">The transport stream ID</param>
            <returns>A DVBDeliverySystemDescriptor instance if the transport stream can be located; null otherwise</returns>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.GetFrequency(System.Int32,System.Int32)">
            <summary>
            Get the Frequency for a transport stream.
            </summary>
            <param name="originalNetworkID">The network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <returns>The frequency if the transport stream can be located; 0 otherwise.</returns>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.GetOrbitalPosition(System.Int32,System.Int32)">
            <summary>
            Get the orbital position for a satellite transport stream.
            </summary>
            <param name="originalNetworkID">The network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <returns>The orbital position if the transport stream can be located; -1 otherwise.</returns>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.GetEastFlag(System.Int32,System.Int32)">
            <summary>
            Get the east flag for a satellite transport stream.
            </summary>
            <param name="originalNetworkID">The network ID.</param>
            <param name="transportStreamID">The transport stream ID.</param>
            <returns>True if the orbital position is east; false otherwise; -1 otherwise.</returns>
        </member>
        <member name="M:DVBServices.NetworkInformationSection.CheckServiceExists(System.Int32)">
            <summary>
            Check if a service exists.
            </summary>
            <param name="serviceId">The service ID.</param>
            <returns>True if the service exists; false otherwise.</returns>
        </member>
        <member name="T:DVBServices.EITProgramCategory">
            <summary>
            The class that describes an EIT program content entry.
            </summary>
        </member>
        <member name="P:DVBServices.EITProgramCategory.Categories">
            <summary>
            Get the collection of program categories.
            </summary>
        </member>
        <member name="P:DVBServices.EITProgramCategory.UndefinedCategories">
            <summary>
            Get the collection of undefined categories.
            </summary>
        </member>
        <member name="P:DVBServices.EITProgramCategory.FileName">
            <summary>
            Get the standard file name.
            </summary>
        </member>
        <member name="M:DVBServices.EITProgramCategory.#ctor">
            <summary>
            Initialize a new instance of the EITProgramContent class.
            </summary>
        </member>
        <member name="M:DVBServices.EITProgramCategory.FindCategory(System.Int32,System.Int32)">
            <summary>
            Find a category.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The subcategory.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.EITProgramCategory.FindCategory(System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.EITProgramCategory.AddCategory(System.Int32,System.Int32,System.String)">
            <summary>
            Add a category.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The subcategory.</param>
            <param name="description">The full category description.</param>
        </member>
        <member name="M:DVBServices.EITProgramCategory.Load">
            <summary>
            Load the categories from the standard file.
            </summary>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.EITProgramCategory.Load(System.String)">
            <summary>
            Load the categories from a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.EITProgramCategory.Save(System.String)">
            <summary>
            Save the categories to a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>Error message if it failed; null otherwise.</returns>
        </member>
        <member name="M:DVBServices.EITProgramCategory.AddUndefinedCategory(System.Int32,System.Int32,System.String)">
            <summary>
            Add an undefined category to the collection of undefined contents.
            </summary>
            <param name="category">The category.</param>
            <param name="subCategory">The category.</param>
            <param name="sampleEvent">The description of a sample event.</param>
        </member>
        <member name="T:DVBServices.EITChannel">
            <summary>
            The class then describes an EIT channel.
            </summary>
        </member>
        <member name="M:DVBServices.EITChannel.#ctor">
            <summary>
            Initialize a new instance of the EITChannel class.
            </summary>
        </member>
        <member name="T:DVBServices.EITChannelInfoDescriptor">
            <summary>
            EIT Channel Info descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.EITChannelInfoDescriptor.ChannelInfoEntries">
            <summary>
            Get the collection of channel entries.
            </summary>
        </member>
        <member name="P:DVBServices.EITChannelInfoDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.EITChannelInfoDescriptor.#ctor">
            <summary>
            Initialize a new instance of the EITChannelInfoDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.EITChannelInfoDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.EITChannelInfoDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.EITChannelInfoDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.EITChannelInfoEntry">
            <summary>
            The class that describes an EIT channel info entry.
            </summary>
        </member>
        <member name="P:DVBServices.EITChannelInfoEntry.ServiceID">
            <summary>
            Get the service ID.
            </summary>
        </member>
        <member name="P:DVBServices.EITChannelInfoEntry.UserNumber">
            <summary>
            Get the user channel ID.
            </summary>
        </member>
        <member name="P:DVBServices.EITChannelInfoEntry.Flags">
            <summary>
            Get the channel flags.
            </summary>
        </member>
        <member name="P:DVBServices.EITChannelInfoEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="P:DVBServices.EITChannelInfoEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="M:DVBServices.EITChannelInfoEntry.#ctor">
            <summary>
            Initialize a new instance of the EITChannelInfoEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.EITChannelInfoEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.EITChannelInfoEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.EITChannelInfoEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.CollectorReply">
            <summary>
            The reply codes from the protocol collectors.
            </summary>
        </member>
        <member name="F:DVBServices.CollectorReply.OK">
            <summary>
            The collection was successful.
            </summary>
        </member>
        <member name="F:DVBServices.CollectorReply.GeneralFailure">
            <summary>
            The collection failed.
            </summary>
        </member>
        <member name="F:DVBServices.CollectorReply.FatalFormatError">
            <summary>
            There was a format error in the received data.
            </summary>
        </member>
        <member name="F:DVBServices.CollectorReply.ReferenceDataError">
            <summary>
            The was an error loading the reference data.
            </summary>
        </member>
        <member name="F:DVBServices.CollectorReply.BroadcastDataError">
            <summary>
            There was an error in the broadcast data.
            </summary>
        </member>
        <member name="F:DVBServices.CollectorReply.Cancelled">
            <summary>
            The collection was cancelled.
            </summary>
        </member>
        <member name="T:DVBServices.Scope">
            <summary>
            The current scope
            </summary>
        </member>
        <member name="F:DVBServices.Scope.All">
            <summary>
            No scope restrictions
            </summary>
        </member>
        <member name="F:DVBServices.Scope.PMT">
            <summary>
            Program Map table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.PAT">
            <summary>
            Program Association table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.NIT">
            <summary>
            Network Information table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.BAT">
            <summary>
            Bouquet Association table
            </summary>        
        </member>
        <member name="F:DVBServices.Scope.SDT">
            <summary>
            Service Description table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.EIT">
            <summary>
            Event Information table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.TDT">
            <summary>
            Time and Date table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.TOT">
            <summary>
            Time offset table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.RST">
            <summary>
            Running Status table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.ST">
            <summary>
            Stuffing table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.DIT">
            <summary>
            Discontinuity Information table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.SIT">
            <summary>
            Selection Information table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.AIT">
            <summary>
            Application Information table
            </summary>
        </member>
        <member name="F:DVBServices.Scope.DSMCC">
            <summary>
            DSMCC sections
            </summary>
        </member>
        <member name="T:DVBServices.ReplaceMode">
            <summary>
            The action to take for non-Ascii characters in text strings.
            </summary>
        </member>
        <member name="F:DVBServices.ReplaceMode.Ignore">
            <summary>
            The non-ASCII character is removed.
            </summary>
        </member>
        <member name="F:DVBServices.ReplaceMode.SetToSpace">
            <summary>
            The non-ASCII character is set to space.
            </summary>
        </member>
        <member name="F:DVBServices.ReplaceMode.TransferUnchanged">
            <summary>
            The non-ASCII character is not changed in the output text.
            </summary>
        </member>
        <member name="F:DVBServices.ReplaceMode.Convert">
            <summary>
            The non-ASCII character is converted to its ASCII equivalent (EIT 0x8a only at present)
            </summary>
        </member>
        <member name="F:DVBServices.ReplaceMode.ConvertUsingTable">
            <summary>
            The non-ASCII character is converted using the byte conversion table)
            </summary>
        </member>
        <member name="T:DVBServices.DataBroadcastId">
            <summary>
            The data broadcast ID values.
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.DvbDataPipe">
            <summary>
            DVB data pipe.
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.AsyncDataStream">
            <summary>
            Asynchronous data stream
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.SynchronousDataStream">
            <summary>
            Synchronous data stream
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.SynchronousDataStreams">
            <summary>
            Synchronous data streams
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.MultiProtocolEncapsulation">
            <summary>
            Multiprotocol encapsulation
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.DataCarousel">
            <summary>
            Data carousel
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.ObjectCarousel">
            <summary>
            Object carousel
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.DvbAtmStream">
            <summary>
            DVB ATM stream
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.HigherProtcolAsyncStream">
            <summary>
            Higher protocol asynchronous stream
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.SsuService">
            <summary>
            System software update service
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.IpMacNotificationService">
            <summary>
            IP/MAC notification service
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.MhpObjectCarousel">
            <summary>
            MHP object carousel
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.MhpMultiProtoclEncapsulation">
            <summary>
            MHP multiprotocol encapsulation
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.MhpApplicationPresence">
            <summary>
            MHP application presence
            </summary>
        </member>
        <member name="F:DVBServices.DataBroadcastId.Mheg5">
            <summary>
            MHEG5 stream
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatChannelInfoRegionEntry">
            <summary>
            The class that describes a FreeSat channel region entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoRegionEntry.Flags">
            <summary>
            Get the flags.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoRegionEntry.RegionNumber">
            <summary>
            Get the region number.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoRegionEntry.ChannelNumber">
            <summary>
            Get the channel number.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoRegionEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoRegionEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoRegionEntry.#ctor">
            <summary>
            Initialize a new instance of the FreeSatChannelInfoRegionEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoRegionEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoRegionEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoRegionEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatImageDescriptor">
            <summary>
            FreeSat Image descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatImageDescriptor.ImageEntries">
            <summary>
            Get the collection of image entries.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatImageDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeSatImageDescriptor.#ctor">
            <summary>
            Initialize a new instance of the FreeSatImageDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatImageDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.FreeSatImageDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatImageDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatImageEntry">
            <summary>
            The class that describes a FreeSat image entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatImageEntry.ImageType">
            <summary>
            Get the image type.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatImageEntry.ImageAddress">
            <summary>
            Get the image address.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatImageEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatImageEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeSatImageEntry.#ctor">
            <summary>
            Initialize a new instance of the FreeImageEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatImageEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.FreeSatImageEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatImageEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatCategoryDescriptor">
            <summary>
            FreeSat Category descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatCategoryDescriptor.CategoryEntries">
            <summary>
            Get the collection of category entries.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatCategoryDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeSatCategoryDescriptor.#ctor">
            <summary>
            Initialize a new instance of the FreeSatCategoryDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatCategoryDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.FreeSatCategoryDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatCategoryDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatCategoryEntry">
            <summary>
            The class that describes a FreeSat category entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatCategoryEntry.CategoryId">
            <summary>
            Get the category ID.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatCategoryEntry.CategoryNumber">
            <summary>
            Get the region number.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatCategoryEntry.LanguageCode">
            <summary>
            Get the language code.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatCategoryEntry.CategoryDescription">
            <summary>
            Get the region description.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatCategoryEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatCategoryEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeSatCategoryEntry.#ctor">
            <summary>
            Initialize a new instance of the FreeSatCategoryEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatCategoryEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.FreeSatCategoryEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatCategoryEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatRegionEntry">
            <summary>
            The class that describes a FreeSat region entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatRegionEntry.RegionNumber">
            <summary>
            Get the region number.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatRegionEntry.LanguageCode">
            <summary>
            Get the language code.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatRegionEntry.RegionDescription">
            <summary>
            Get the region description.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatRegionEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatRegionEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeSatRegionEntry.#ctor">
            <summary>
            Initialize a new instance of the FreeSatRegionEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatRegionEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.FreeSatRegionEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatRegionEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatRegionDescriptor">
            <summary>
            FreeSat Region descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatRegionDescriptor.RegionEntries">
            <summary>
            Get the collection of channel entries.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatRegionDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeSatRegionDescriptor.#ctor">
            <summary>
            Initialize a new instance of the FreeSatRegionDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatRegionDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.FreeSatRegionDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatRegionDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatChannel">
            <summary>
            The class then describes a FreeSat channel.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannel.Unknown1">
            <summary>
            Get or set the first group of unknown bytes.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatChannel.#ctor">
            <summary>
            Initialize a new instance of the FreeSatChannel class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatChannel.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="T:DVBServices.FreeSatChannelInfoDescriptor">
            <summary>
            FreeSat Channel Info descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoDescriptor.ChannelInfoEntries">
            <summary>
            Get the collection of channel entries.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoDescriptor.#ctor">
            <summary>
            Initialize a new instance of the FreeSatChannelInfoDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatChannelInfoEntry">
            <summary>
            The class that describes a FreeSat channel info entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoEntry.ServiceID">
            <summary>
            Get the service ID.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoEntry.Unknown1">
            <summary>
            Get the unknown bytes(1).
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoEntry.RegionEntries">
            <summary>
            Get the list of region entries.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="P:DVBServices.FreeSatChannelInfoEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoEntry.#ctor">
            <summary>
            Initialize a new instance of the FreeSatChannelInfoEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatChannelInfoEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatController">
            <summary>
            The class that controls the acquisition and processing of FreeSat data.
            </summary>   
        </member>
        <member name="P:DVBServices.FreeSatController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatController.AllDataProcessed">
            <summary>
            Return true if all data has been processed; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatController.#ctor">
            <summary>
            Initialize a new instance of the FreeSatController class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatController.Stop">
            <summary>
            Stop acquiring and processing data.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process EIT data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.FreeSatController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process EIT data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.FreeSatController.ProcessBouquetSections">
            <summary>
            Process the bouquet data.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatController.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.MultiTreeDictionaryEntry">
            <summary>
            The class that describes a dictionary entry for a multi-tree Hufmman scenario.
            </summary>
        </member>
        <member name="P:DVBServices.MultiTreeDictionaryEntry.Loaded">
            <summary>
            Return true if the translation tables have been loaded; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.MultiTreeDictionaryEntry.EscapeCount">
            <summary>
            Get the count of escape sequences for a text string.
            </summary>
        </member>
        <member name="P:DVBServices.MultiTreeDictionaryEntry.Decode">
            <summary>
            Get the decode string.
            </summary>
        </member>
        <member name="M:DVBServices.MultiTreeDictionaryEntry.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the MultiTreeDictionaryEntry class.
            </summary>
            <param name="pattern">The Huffman bit pattern.</param>
            <param name="decode">The decode for the bit pattern.</param>
        </member>
        <member name="M:DVBServices.MultiTreeDictionaryEntry.Load(System.String,System.String)">
            <summary>
            Load the reference tables.
            </summary>
            <param name="fileName1">The full name of the T1 file.</param>
            <param name="fileName2">The full name of the T2 file.</param>
            <returns>True if the file is loaded successfully;false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MultiTreeDictionaryEntry.DecodeData(System.Byte[],System.String)">
            <summary>
            Decode a Multi-tree text string which includes the text prefix (ie 0x1f?? where ?? indicates the table number 1 or 2).
            </summary>
            <param name="byteData">The encoded string.</param>
            <param name="encoding">The encoding used for the decompressed bytes.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:DVBServices.MultiTreeDictionaryEntry.DecodeData(System.Int32,System.Byte[],System.String)">
            <summary>
            Decode a Multi-tree text string with no prefix.
            </summary>
            <param name="table">The decode table to use (1 or 2).</param>
            <param name="byteData">The encoded string.</param>
            <param name="encoding">The encoding used for the decompressed bytes.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:DVBServices.MultiTreeDictionaryEntry.LogUsage">
            <summary>
            Log the decoding usage.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatEntry">
            <summary>
            The class that describes a FreeSat entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.StartTime">
            <summary>
            Get the event start time.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.Duration">
            <summary>
            Get the event duration.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.RunningStatus">
            <summary>
            Get the running status of the event.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.Scrambled">
            <summary>
            Return true if the event is scrambled; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.EventName">
            <summary>
            Get the event name.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.ShortDescription">
            <summary>
            Get the short description for the event.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.LanguageCode">
            <summary>
            Get the language code of the entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.ComponentTypeVideo">
            <summary>
            Get the DVB standard (EN 300 468) component type for the video stream.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.ComponentTypeAudio">
            <summary>
            Get the DVB standard (EN 300 468) component type for the audio stream.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.ComponentTypeSubtitles">
            <summary>
            Get the DVB standard (EN 300 468) component type for the subtitle stream.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.ContentType">
            <summary>
            Get the DVB standard (EN 300 468) content type.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.ContentSubType">
            <summary>
            Get the DVB standard (EN 300 468) content subype.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.ParentalRating">
            <summary>
            Get the DVB standard (EN 300 468) parental rating.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.SeriesId">
            <summary>
            Get the series link.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.EpisodeId">
            <summary>
            Get the episode link.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the EIT entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatEntry.#ctor">
            <summary>
            Initialize a new instance of the FreesatEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the event identification byte in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.FreeSatEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An entry field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeSatEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.HuffmanEntry">
            <summary>
            The class that describes a Huffman dictionary entry.
            </summary>
        </member>
        <member name="P:DVBServices.HuffmanEntry.P0">
            <summary>
            Get or set the zero bit link.
            </summary>
        </member>
        <member name="P:DVBServices.HuffmanEntry.P1">
            <summary>
            Get or set the one bit link.
            </summary>
        </member>
        <member name="P:DVBServices.HuffmanEntry.Value">
            <summary>
            Get or set the entry value.
            </summary>
        </member>
        <member name="P:DVBServices.HuffmanEntry.HoldsValue">
            <summary>
            Returns true if the value has been set; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.HuffmanEntry.#ctor">
            <summary>
            Intialize a new instance of the HuffmanEntry.
            </summary>
        </member>
        <member name="T:DVBServices.FreeSatSection">
            <summary>
            The class that describes an FreeSat section.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatSection.EITEntries">
            <summary>
            Get the collection of EIT enteries in the section.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatSection.OriginalNetworkID">
            <summary>
            Get the original network identification (ONID).
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatSection.TransportStreamID">
            <summary>
            Get the transport stream identification (TSID).
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatSection.ServiceID">
            <summary>
            Get the service identification (SID).
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatSection.LastTableID">
            <summary>
            Get the identification of the last table for the EIT section.
            </summary>
        </member>
        <member name="P:DVBServices.FreeSatSection.SegmentLastSectionNumber">
            <summary>
            Get the segment last section number for the EIT section.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatSection.#ctor">
            <summary>
            Initialize a new instance of the FreeSatSection class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.FreeSatSection.getEpisodeNumberFormat1(DomainObjects.EPGEntry,DVBServices.FreeSatEntry,System.Int32)">
            <summary>
            Format is nn/nn.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatSection.getEpisodeNumberFormat2(DomainObjects.EPGEntry,DVBServices.FreeSatEntry,System.Int32)">
            <summary>
            Format is Snn, Epnn (spaces optional, comma optional, 'p' optional, can also be all upper case)
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatSection.getEpisodeNumberFormat3(DomainObjects.EPGEntry,DVBServices.FreeSatEntry,System.Int32)">
            <summary>
            Format is Snn, Epnn (comma optional)
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatSection.getEpisodeNumberFormat4(DomainObjects.EPGEntry,DVBServices.FreeSatEntry,System.Int32)">
            <summary>
            Format is Snn EPnn at the end of the description (space optional, P optional).
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatSection.getEpisodeNumberFormat5(DomainObjects.EPGEntry,DVBServices.FreeSatEntry,System.Int32)">
            <summary>
            Format is Series nn, Episode nn.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatSection.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.FreeSatSection.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBContentIdentifierDescriptor">
            <summary>
            DVB Content Identifier descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBContentIdentifierDescriptor.ContentIdentifiers">
            <summary>
            Get the list of identifiers.
            </summary>
        </member>
        <member name="P:DVBServices.DVBContentIdentifierDescriptor.HasSeriesLink">
            <summary>
            Return true if there is a series link content identifier present; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DVBContentIdentifierDescriptor.SeriesLink">
            <summary>
            Get the series link identifier; returns null if not present;
            </summary>
        </member>
        <member name="P:DVBServices.DVBContentIdentifierDescriptor.HasEpisodeLink">
            <summary>
            Return true if there is an episode link content identifier present; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DVBContentIdentifierDescriptor.EpisodeLink">
            <summary>
            Get the episode link identifier; returns null if not present;
            </summary>
        </member>
        <member name="P:DVBServices.DVBContentIdentifierDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBContentIdentifierDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBContentIdentifierDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBContentIdentifierDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBContentIdentifierDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBContentIdentifierDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway1Replay">
            <summary>
            The class that describes a MediaHighway1 replay.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1Replay.Channel">
            <summary>
            Get the replay channel.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1Replay.ReplayTime">
            <summary>
            Get the replay time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1Replay.Subtitled">
            <summary>
            Get the replay subtitles.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1Replay.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the replay data.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The summary data has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.MediaHighway1Replay.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway1Replay class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1Replay.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the replay data.
            </summary>
            <param name="byteData">The MPEG2 section containing the summary data.</param>
            <param name="index">Index of the first byte of the summary data in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MediaHighway1Replay.Validate">
            <summary>
            Validate the replay data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A summary data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway1Replay.LogMessage">
            <summary>
            Log the replay data fields.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway2CategorySection">
            <summary>
            The class that describes a MediaHighway2 category section.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2CategorySection.Categories">
            <summary>
            Get the collection of categories.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2CategorySection.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway2CategorySection class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2CategorySection.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="index">The index of the first byte of the data portion.</param>
            <returns>True if the section is an MHW2 category section; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway2CategorySection.Validate">
            <summary>
            Validate the section fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A section field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway2CategorySection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2CategorySection.ProcessMediaHighwayCategoryTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the Open TV Title table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
        </member>
        <member name="T:DVBServices.MediaHighway2ChannelSection">
            <summary>
            The class that describes a MediaHighway2 channel section.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2ChannelSection.SectionNumber">
            <summary>
            Get the channel section number.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2ChannelSection.Channels">
            <summary>
            Get the collection of channels.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2ChannelSection.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway2ChannelSection class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2ChannelSection.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="index">The index of the first byte of the data portion.</param>
            <returns>True if the section is an MHW2 channel section; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway2ChannelSection.Validate">
            <summary>
            Validate the section fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A section field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway2ChannelSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2ChannelSection.ProcessMediaHighwayChannelTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the Open TV Title table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
        </member>
        <member name="T:DVBServices.MediaHighway2Controller">
            <summary>
            The class that controls the acquisition and processing of MediaHighway2 data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2Controller.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2Controller.AllDataProcessed">
            <summary>
            Return true if all data has been processed; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2Controller.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway2Controller class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2Controller.Stop">
            <summary>
            Stop acquiring and processing data.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2Controller.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process MediaHighway2 data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway2Controller.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process MediaHighway2 data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway2Controller.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway2SummaryData">
            <summary>
            The class that describes MediaHighway2 summary data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2SummaryData.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2SummaryData.ShortDescription">
            <summary>
            Get the short description of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2SummaryData.Unknown">
            <summary>
            Get the unidentified data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2SummaryData.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the summary data.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The summary data has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.MediaHighway2SummaryData.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway2SummaryData class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2SummaryData.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the summary data.
            </summary>
            <param name="byteData">The MPEG2 section containing the summary data.</param>
            <param name="index">Index of the first byte of the summary data in the MPEG2 section.</param>
            <returns>True if the block contains data; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway2SummaryData.Validate">
            <summary>
            Validate the summary data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A summary data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway2SummaryData.LogMessage">
            <summary>
            Log the summary data fields.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway2SummarySection">
            <summary>
            The class that describes a MediaHighway2 Summary section.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2SummarySection.SummaryData">
            <summary>
            Get the summary data for this section.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2SummarySection.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway2SummarySection class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2SummarySection.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the summary data.</param>
            <param name="index">Index of the first byte of the summary data in the MPEG2 section.</param>
            <returns>True if the block contains data; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway2SummarySection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2SummarySection.ProcessMediaHighwaySummaryTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the MediaHighway1 summary table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A MediaHighway2SummarySection instance.</returns>
        </member>
        <member name="T:DVBServices.MediaHighway2TitleData">
            <summary>
            The class that describes MediaHighway2 title data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.ChannelID">
            <summary>
            Get the channel identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.StartTime">
            <summary>
            Get the start time of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.Duration">
            <summary>
            Get the duration of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.CategoryID">
            <summary>
            Get the theme identification of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.MainCategory">
            <summary>
            Get the theme group of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.SubCategory">
            <summary>
            Get the theme subgroup of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.EventName">
            <summary>
            Get the name of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.Unknown">
            <summary>
            Get the unknown data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleData.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the title data.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The title data has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.MediaHighway2TitleData.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway2TitleData class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2TitleData.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the title data.
            </summary>
            <param name="byteData">The MPEG2 section containing the title data.</param>
            <param name="index">Index of the first byte of the title data in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MediaHighway2TitleData.Validate">
            <summary>
            Validate the title data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A title data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway2TitleData.LogMessage">
            <summary>
            Log the title data fields.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway2TitleSection">
            <summary>
            The class that describes a MediaHighway2 Title section.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway2TitleSection.Titles">
            <summary>
            Get the title data for this section.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2TitleSection.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway2TitleSection class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2TitleSection.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="index">Index of the first byte of the title section in the MPEG2 section.</param>
            <returns>True if the section is an MHW2 title section; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway2TitleSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway2TitleSection.ProcessMediaHighwayTitleTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the MediaHighway title table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A MediaHighway2TitleSection instance.</returns>
        </member>
        <member name="T:DVBServices.MediaHighwayChannelTitle">
            <summary>
            The class that describes a channel title.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannelTitle.Channel">
            <summary>
            Get the channel.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannelTitle.Title">
            <summary>
            Get the title data.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayChannelTitle.#ctor(DVBServices.MediaHighwayChannel,DVBServices.MediaHighwayTitle)">
            <summary>
            Initialize a new instance of the MediaHighwayChannleTitle class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="title">The title.</param>
        </member>
        <member name="T:DVBServices.MediaHighwayProgramCategory">
            <summary>
            The class that describes a MediaHighway program category.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayProgramCategory.Categories">
            <summary>
            Get the collection of program categories.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayProgramCategory.UndefinedCategories">
            <summary>
            Get the collection of undefined categories.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayProgramCategory.FileName">
            <summary>
            Get the standard name of the configuration file.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayProgramCategory.#ctor">
            <summary>
            Initialize a new instance of the OpenTVProgramCategory class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayProgramCategory.FindCategory(System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.MediaHighwayProgramCategory.FindCategory(System.Int32)">
            <summary>
            Find a category.
            </summary>
            <param name="category">The category.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.MediaHighwayProgramCategory.AddCategory(System.Int32,System.String)">
            <summary>
            Add a category.
            </summary>
            <param name="category">The category.</param>
            <param name="description">The full category description.</param>
            <returns>True if category added; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MediaHighwayProgramCategory.LoadFromFrequency(System.String,System.String)">
            <summary>
            Load the category definitions given the frequency.
            </summary>
            <param name="protocol">The protocol (1 or 2) to load.</param>
            <param name="frequency">The frequency to load.</param>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MediaHighwayProgramCategory.Load(System.String)">
            <summary>
            Load the category definitions.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.MediaHighwayProgramCategory.Save(System.String)">
            <summary>
            Save the categories to a file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>Null if the operation succeeded; otherwise an error message.</returns>
        </member>
        <member name="M:DVBServices.MediaHighwayProgramCategory.AddUndefinedCategory(System.Int32,System.String)">
            <summary>
            Add an undefined category to the collection of undefined contents.
            </summary>
            <param name="category">The category.</param>
            <param name="sampleEvent">The description of a sample event.</param>
        </member>
        <member name="T:DVBServices.MediaHighwayCategoryEntry">
            <summary>
            The class that describes a MediaHighway category entry.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayCategoryEntry.Number">
            <summary>
            Get or set the category number.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayCategoryEntry.Description">
            <summary>
            Get or set the category description.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayCategoryEntry.#ctor">
            <summary>
            Initialize a new instance of the MediaHighwayCategoryEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayCategoryEntry.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway1CategorySection">
            <summary>
            The class that describes a MediaHighway1 category section.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1CategorySection.Categories">
            <summary>
            Get the collection of categories.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1CategorySection.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway1CategorySection class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1CategorySection.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="index">The index of the first byte of the data portion.</param>
        </member>
        <member name="M:DVBServices.MediaHighway1CategorySection.Validate">
            <summary>
            Validate the section fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A section field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway1CategorySection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1CategorySection.ProcessMediaHighwayCategoryTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the Open TV Title table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
        </member>
        <member name="T:DVBServices.MediaHighwayChannel">
            <summary>
            The class that defines a MediaHighway channel.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannel.ChannelName">
            <summary>
            Get or set the channel name.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannel.Titles">
            <summary>
            Get the title data for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannel.ChannelType">
            <summary>
            Get or set the channel type.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayChannel.#ctor">
            <summary>
            Initialize a new instance of the MediaHighwayChannel class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayChannel.AddTitleData(DVBServices.MediaHighwayTitle)">
            <summary>
            Add title data to the channel.
            </summary>
            <param name="newTitle">The title to be added.</param>
            <returns>The matching title object if it alread exists; otherwise null.</returns>
        </member>
        <member name="M:DVBServices.MediaHighwayChannel.ProcessChannelForEPG(DomainObjects.TVStation,DomainObjects.Logger,DomainObjects.Logger,DomainObjects.CollectionType)">
            <summary>
            Create the EPG entries from the stored title and summary data.
            </summary>
            <param name="station">The station that the EPG records are for.</param>
            <param name="titleLogger">A Logger instance for the program titles.</param>
            <param name="descriptionLogger">A Logger instance for the program descriptions.</param>
            <param name="collectionType">The type of collection, MHW1 or MHW2.</param>
        </member>
        <member name="M:DVBServices.MediaHighwayChannel.ToString">
            <summary>
            Get a description of this instance.
            </summary>
            <returns>A string describing this instance.</returns>
        </member>
        <member name="T:DVBServices.MediaHighwayChannelInfoEntry">
            <summary>
            The class that describes a MediaHighway channel  info entry.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannelInfoEntry.OriginalNetworkID">
            <summary>
            Get the original network ID for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannelInfoEntry.TransportStreamID">
            <summary>
            Get the transport stream ID for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannelInfoEntry.ServiceID">
            <summary>
            Get the service ID for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannelInfoEntry.Name">
            <summary>
            Get the name of the channel.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannelInfoEntry.Unknown">
            <summary>
            Get the unknown data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayChannelInfoEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="P:DVBServices.MediaHighwayChannelInfoEntry.NameIndex">
            <summary>
            Get the index of the next name byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="P:DVBServices.MediaHighwayChannelInfoEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayChannelInfoEntry.#ctor">
            <summary>
            Initialize a new instance of the MediaHighwayChannelInfoEntry.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayChannelInfoEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the MHW1 descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.MediaHighwayChannelInfoEntry.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the MHW2 descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
            <param name="nameLengthIndex">Index of the first byte channel name in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.MediaHighwayChannelInfoEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighwayChannelInfoEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway1ChannelSection">
            <summary>
            The class that describes a MediaHighway1 channel section.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1ChannelSection.Channels">
            <summary>
            Get the collection of channels.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1ChannelSection.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway1ChannelSection class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1ChannelSection.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="index">The index of the first byte of the data portion.</param>
        </member>
        <member name="M:DVBServices.MediaHighway1ChannelSection.Validate">
            <summary>
            Validate the section fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A section field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway1ChannelSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1ChannelSection.ProcessMediaHighwayChannelTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the Open TV Title table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
        </member>
        <member name="T:DVBServices.MediaHighway1SummaryData">
            <summary>
            The class that describes MediaHighway1 summary data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1SummaryData.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1SummaryData.ShortDescription">
            <summary>
            Get the short description of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1SummaryData.ReplayCount">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1SummaryData.Replays">
            <summary>
            Get the collection of replay definitions.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1SummaryData.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the summary data.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The summary data has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.MediaHighway1SummaryData.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway1SummaryData class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1SummaryData.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the summary data.
            </summary>
            <param name="byteData">The MPEG2 section containing the summary data.</param>
            <param name="index">Index of the first byte of the summary data in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MediaHighway1SummaryData.Validate">
            <summary>
            Validate the summary data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A summary data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway1SummaryData.LogMessage">
            <summary>
            Log the summary data fields.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway1SummarySection">
            <summary>
            The class that describes a MediaHighway1 Summary section.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1SummarySection.SummaryData">
            <summary>
            Get the summary data for this section.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1SummarySection.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway1SummarySection class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1SummarySection.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="index">Index of the first byte of the summary section in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MediaHighway1SummarySection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1SummarySection.ProcessMediaHighwaySummaryTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the MediaHighway1 summary table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A MediaHighway1SummarySection instance.</returns>
        </member>
        <member name="T:DVBServices.MediaHighway1TitleData">
            <summary>
            The class that describes MediaHighway1 title data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.ChannelID">
            <summary>
            Get the channel identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.StartTime">
            <summary>
            Get the start time of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.Duration">
            <summary>
            Get the duration of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.CategoryID">
            <summary>
            Get the theme identification of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.EventName">
            <summary>
            Get the name of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.SummaryAvailable">
            <summary>
            Return true if the summary should be available; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.Day">
            <summary>
            Get the day number that was used to generate the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.Hours">
            <summary>
            Get the hours field that generated the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.Minutes">
            <summary>
            Get the minutes field that generated the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.LogDay">
            <summary>
            Get the log day number that was used to generate the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.LogHours">
            <summary>
            Get the log hours field that generated the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.LogYesterday">
            <summary>
            Get the log yesterday field that generated the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.IsEmpty">
            <summary>
            Return true if the entry is empty; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleData.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the title data.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The title data has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.MediaHighway1TitleData.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway1TitleData class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1TitleData.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the title data.
            </summary>
            <param name="byteData">The MPEG2 section containing the title data.</param>
            <param name="index">Index of the first byte of the title data in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MediaHighway1TitleData.Validate">
            <summary>
            Validate the title data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A title data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MediaHighway1TitleData.LogMessage">
            <summary>
            Log the title data fields.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighway1TitleSection">
            <summary>
            The class that describes a MediaHighway1 Title section.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1TitleSection.TitleData">
            <summary>
            Get the title data for this section.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1TitleSection.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway1TitleSection class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1TitleSection.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="index">Index of the first byte of the title section in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MediaHighway1TitleSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1TitleSection.ProcessMediaHighwayTitleTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the MediaHighway title table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A MediaHighway1TitleSection instance.</returns>
        </member>
        <member name="T:DVBServices.MediaHighway1Controller">
            <summary>
            The class that controls the acquisition and processing of MediaHighway1 data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1Controller.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighway1Controller.AllDataProcessed">
            <summary>
            Return true if all data has been processed; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1Controller.#ctor">
            <summary>
            Initialize a new instance of the MediaHighway1Controller class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1Controller.Stop">
            <summary>
            Stop acquiring and processing data.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighway1Controller.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process MediaHighway1 data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway1Controller.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process MediaHighway1 data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.MediaHighway1Controller.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.MediaHighwaySummary">
            <summary>
            The class that describes MediaHighway summary.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwaySummary.Summaries">
            <summary>
            Get the collection of MediaHighway summary entries.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwaySummary.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwaySummary.ShortDescription">
            <summary>
            Get the short description of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwaySummary.ReplayCount">
            <summary>
            Get the number of repeats.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwaySummary.Replays">
            <summary>
            Get or set the collection of replay definitions.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwaySummary.Unknown">
            <summary>
            Get or set the unidentified data.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwaySummary.#ctor">
            <summary>
            Initialize a new instance of the MediaHighwaySummaryData class.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwaySummary.AddSummary(DVBServices.MediaHighwaySummary)">
            <summary>
            Add a summary to the collection.
            </summary>
            <param name="newSummary">The summary to be added.</param>
        </member>
        <member name="T:DVBServices.MediaHighwayTitle">
            <summary>
            The class that describes a MediaHighway title.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.EventID">
            <summary>
            Get or set the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.StartTime">
            <summary>
            Get or set the start time of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.Duration">
            <summary>
            Get or set the duration of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.CategoryID">
            <summary>
            Get or set the theme identification of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.MainCategory">
            <summary>
            Get or set the main theme identification of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.SubCategory">
            <summary>
            Get or set the sub theme identification of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.EventName">
            <summary>
            Get or set the name of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.SummaryAvailable">
            <summary>
            Return true if the summary should be available; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.Day">
            <summary>
            Get or set the day number that was used to generate the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.Hours">
            <summary>
            Get or set the hours field that generated the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.Minutes">
            <summary>
            Get or set the minutes field that generated the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.LogDay">
            <summary>
            Get or set the log day number that was used to generate the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.LogHours">
            <summary>
            Get or set the log hours field that generated the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.LogYesterday">
            <summary>
            Get or set the log yesterday field that generated the start time.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.Unknown">
            <summary>
            Get or set the unknown data.
            </summary>
        </member>
        <member name="P:DVBServices.MediaHighwayTitle.PreviousPlayDate">
            <summary>
            Get or set the previous play date.
            </summary>
        </member>
        <member name="M:DVBServices.MediaHighwayTitle.#ctor">
            <summary>
            Initialize a new instance of the MediaHighwayTitle class.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPLiteComponent">
            <summary>
            The class that describes a BIOP Lite component.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPLiteComponent.DataLength">
            <summary>
            Get the data length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPLiteComponent.Data">
            <summary>
            Get the data.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPLiteComponent.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the component.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The component has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BIOPLiteComponent.#ctor">
            <summary>
            Initialize a new instance of the BIOPLiteComponent class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPLiteComponent.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the component.
            </summary>
            <param name="byteData">The MPEG2 section containing the component.</param>
            <param name="index">Index of the first byte of the component in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPLiteComponent.Validate">
            <summary>
            Validate the component fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A component field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPLiteComponent.LogMessage">
            <summary>
            Log the component fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPMessage">
            <summary>
            The class that describes a BIOP message.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.MajorVersion">
            <summary>
            Get the major version.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.MinorVersion">
            <summary>
            Get the minor version.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.ByteOrder">
            <summary>
            Get the byte ordering.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.MessageType">
            <summary>
            Get the message type.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.MessageSize">
            <summary>
            Get the message size.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.ObjectKeyLength">
            <summary>
            Get the object key length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.ObjectKeyData">
            <summary>
            Get the object key data.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.ObjectKindLength">
            <summary>
            Get the object kind length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.ObjectKindData">
            <summary>
            Get te object kind data.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.ObjectInfoLength">
            <summary>
            Get the object information length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.MessageDetail">
            <summary>
            Get the message detail.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.IsKindFile">
            <summary>
            Return true if this is a file message.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.IsKindDirectory">
            <summary>
            Return true if this is a directory message.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.IsKindServiceGateway">
            <summary>
            Return true if this is a service gateway message.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.IsKindServiceTransaction">
            <summary>
            Return true if this is a service transaction message.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.Kind">
            <summary>
            Get a description of the kind of data this message represents.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessage.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the message.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The message has not been processed.
            </exception> 
        </member>
        <member name="F:DVBServices.BIOPMessage.BiopMagic">
            <summary>
            Get the BIOP magic identifier.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPMessage.#ctor">
            <summary>
            Initialize a new instance of the BIOPMessage class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPMessage.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">Index of the first byte of the message in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPMessage.Validate">
            <summary>
            Validate the message.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A message field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPMessage.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPBinding">
            <summary>
            The class that describes a BIOP binding.
            </summary>
        </member>
        <member name="F:DVBServices.BIOPBinding.BindingTypeObject">
            <summary>
            The binding type for an object binding.
            </summary>
        </member>
        <member name="F:DVBServices.BIOPBinding.BindingTypeContext">
            <summary>
            The binding type for a context binding.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPBinding.Names">
            <summary>
            Get the collection of names for the binding.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPBinding.BindingType">
            <summary>
            Get the binding type of the binding.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPBinding.IOPIOR">
            <summary>
            Get the IOP:IOR for the binding.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPBinding.ObjectInfoLength">
            <summary>
            Get the length of the object information for the binding.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPBinding.ObjectInfo">
            <summary>
            Get the object information for the binding.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPBinding.FileContentSize">
            <summary>
            Get the size in bytes of the file contents.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPBinding.FileDescriptors">
            <summary>
            Get the file descriptors for the binding.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPBinding.Index">
            <summary>
            Gets the index of the next byte in the MPEG2 section following the binding.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The binding has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPBinding.#ctor">
            <summary>
            Initialize a new instance of the BIOPBinding class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPBinding.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the binding.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the first byte of the binding in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPBinding.Validate">
            <summary>
            Validate the bindingr fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPBinding.LogMessage">
            <summary>
            Log the binding fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPDescriptor">
            <summary>
            The class that describes a BIOP descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPDescriptor.DescriptorTag">
            <summary>
            Get the descriptor tag identifying the descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPDescriptor.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BIOPDescriptor.Create(System.Byte[],System.Int32)">
            <summary>
            Create a new instance of a BIOP descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the descriptor tag in the MPEG2 section.</param>
            <returns>A BIOP descriptor instance.</returns>
        </member>
        <member name="M:DVBServices.BIOPDescriptor.#ctor">
            <summary>
            Initialize a new instance of the BIOPDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.BIOPDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPDirectoryMessage">
            <summary>
            The class the describes a BIOP directory message.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPDirectoryMessage.ObjectInfoData">
            <summary>
            Get the object information for the directory.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPDirectoryMessage.ServiceContexts">
            <summary>
            Get the collection of service contexts for the directory.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPDirectoryMessage.MessageBodyLength">
            <summary>
            Get the length of the message body.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPDirectoryMessage.Bindings">
            <summary>
            Get the collection of bindings for the directory.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPDirectoryMessage.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the message.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The message has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BIOPDirectoryMessage.#ctor">
            <summary>
            Initialize a new instance of the BIOPDirectoryMessage class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPDirectoryMessage.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">Index of the first byte of the message  in the MPEG2 section.</param>
            <param name="objectInfoLength">The length of the object information data.</param>
        </member>
        <member name="M:DVBServices.BIOPDirectoryMessage.Validate">
            <summary>
            Validate the message fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A message field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPDirectoryMessage.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPFileMessage">
            <summary>
            The class the describes a BIOP file message.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPFileMessage.FileContentSize">
            <summary>
            Get the length in bytes of the file contents.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPFileMessage.ContentTypeDescriptors">
            <summary>
            Get the collection of MHP Content Type descriptors.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPFileMessage.ServiceContexts">
            <summary>
            Get the collection of BIOP Service Contexts.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPFileMessage.MessageBodyLength">
            <summary>
            Get the length of the message body.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPFileMessage.ContentLength">
            <summary>
            Get the content length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPFileMessage.ContentData">
            <summary>
            Get the content data.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPFileMessage.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the message.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The message has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BIOPFileMessage.#ctor">
            <summary>
            Initialize a new instance of the BIOPFileMessage class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPFileMessage.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">Index of the first byte of the message in the MPEG2 section.</param>
            <param name="objectInfoLength">The length of the object information data.</param>
        </member>
        <member name="M:DVBServices.BIOPFileMessage.Validate">
            <summary>
            Validate the message fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A message field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPFileMessage.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPLiteOptionsProfileBody">
            <summary>
            The class that describes a BIOP Lite Options Profile body.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPLiteOptionsProfileBody.DSMServiceLocation">
            <summary>
            Get the DSM service location.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPLiteOptionsProfileBody.LiteComponents">
            <summary>
            Get the collection of BIOP Lite components.
            </summary>
        </member>
        <member name="F:DVBServices.BIOPLiteOptionsProfileBody.Tag">
            <summary>
            Get the profile tag.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPLiteOptionsProfileBody.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the profile body.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The profile body has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BIOPLiteOptionsProfileBody.#ctor">
            <summary>
            Initialize a new instance of the BIOPLiteOptionsProfileBody class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPLiteOptionsProfileBody.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the profile body.
            </summary>
            <param name="byteData">The MPEG2 section containing the profile body.</param>
            <param name="index">Index of the first byte of the profile body in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPLiteOptionsProfileBody.Validate">
            <summary>
            Validate the profile body fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A profile body field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPLiteOptionsProfileBody.LogMessage">
            <summary>
            Log the profile body fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPMessageDetail">
            <summary>
            The base class for BIOP messages.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPMessageDetail.Index">
            <summary>
            Get the index of the byte following the message detail.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPMessageDetail.#ctor">
            <summary>
            Initialize a new instance of the BIOPMessageDetail class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPMessageDetail.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Process the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">The index of the first byte of the message in the MPEG2 section.</param>
            <param name="objectInfoLength">The length of the object information field.</param>
        </member>
        <member name="M:DVBServices.BIOPMessageDetail.Validate">
            <summary>
            Validate the message.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPMessageDetail.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPModuleInfo">
            <summary>
            The class that describes the BIOP module information.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPModuleInfo.ModuleTimeout">
            <summary>
            Get the module timeout.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPModuleInfo.BlockTimeout">
            <summary>
            Get the block timeout.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPModuleInfo.MinimumBlockTime">
            <summary>
            Get the minimum block time.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPModuleInfo.Taps">
            <summary>
            Get the collection of Taps for the module.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPModuleInfo.Descriptors">
            <summary>
            Get the collection of descriptors for the module.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPModuleInfo.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the module information.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The module information has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BIOPModuleInfo.#ctor">
            <summary>
            Initialize a new instance of the BIOPModuleInfo class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPModuleInfo.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the module information.
            </summary>
            <param name="byteData">The MPEG2 section containing the module information.</param>
            <param name="index">Index of the first byte of the module information in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPModuleInfo.Validate">
            <summary>
            Validate the module information.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The module information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPModuleInfo.LogMessage">
            <summary>
            Log the module information fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPName">
            <summary>
            The class that describes a BIOP name.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPName.Identity">
            <summary>
            Get the identify.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPName.Kind">
            <summary>
            Get the kind of name.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPName.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the name.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The name has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.BIOPName.#ctor">
            <summary>
            Initialize a new instance of the BIOPName class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPName.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the name.
            </summary>
            <param name="byteData">The MPEG2 section containing the name.</param>
            <param name="index">Index of the first byte of the name in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPName.Validate">
            <summary>
            Validate the name.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The name information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPName.LogMessage">
            <summary>
            Log the name fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPObjectLocation">
            <summary>
            The class that describes a BIOP object location.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPObjectLocation.CarouselID">
            <summary>
            Get the carousel ID.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPObjectLocation.ModuleID">
            <summary>
            Get the module ID.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPObjectLocation.ObjectKeyLength">
            <summary>
            Get the object key length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPObjectLocation.ObjectKeyData">
            <summary>
            Get the object key data.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPObjectLocation.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the object location.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The object location has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPObjectLocation.#ctor">
            <summary>
            Initialize a new instance of the BIOPObjectLocation class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPObjectLocation.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the object location.
            </summary>
            <param name="byteData">The MPEG2 section containing the object location.</param>
            <param name="index">Index of the first byte of the object location in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPObjectLocation.Validate">
            <summary>
            Validate the object location fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An object location field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPObjectLocation.LogMessage">
            <summary>
            Log the object location fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPProfileBase">
            <summary>
            The class that describes a BIOP profile.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPProfileBase.ProfileBody">
            <summary>
            Get the profile body.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPProfileBase.LiteOptionsProfileBosy">
            <summary>
            Get the Lite Options profile body.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPProfileBase.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the profile.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The profile has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPProfileBase.#ctor">
            <summary>
            Initialize a new instance of the BIOPProfileBase class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPProfileBase.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the profile.
            </summary>
            <param name="byteData">The MPEG2 section containing the profile.</param>
            <param name="index">Index of the first byte of the profile in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPProfileBase.Validate">
            <summary>
            Validate the profile fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A profile field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPProfileBase.LogMessage">
            <summary>
            Log the profile fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPProfileBody">
            <summary>
            The class that describes a BIOP profile body.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPProfileBody.ObjectLocation">
            <summary>
            Get the object location.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPProfileBody.ConnectionBinder">
            <summary>
            Get the connection binder.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPProfileBody.LiteComponents">
            <summary>
            Get the collection of Lite components.
            </summary>
        </member>
        <member name="F:DVBServices.BIOPProfileBody.Tag">
            <summary>
            Get the tag value for a profile body.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPProfileBody.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the profile body.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The profile body has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPProfileBody.#ctor">
            <summary>
            Initialize a new instance of the BIOPProfileBody class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPProfileBody.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the profile body.
            </summary>
            <param name="byteData">The MPEG2 section containing the profile body.</param>
            <param name="index">Index of the first byte of the profile body in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPProfileBody.Validate">
            <summary>
            Validate the profile body fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A profile body field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPProfileBody.LogMessage">
            <summary>
            Log the profile body fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPServiceContext">
            <summary>
            The class that describes a BIOP service context.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceContext.ContextID">
            <summary>
            Get the context ID.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceContext.DataLength">
            <summary>
            Get the context data length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceContext.ContextData">
            <summary>
            Get the context data.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceContext.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the service context.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The service context has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPServiceContext.#ctor">
            <summary>
            Initialize a new instance of the BIOPServiceContext class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPServiceContext.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the service context.
            </summary>
            <param name="byteData">The MPEG2 section containing the service context.</param>
            <param name="index">Index of the first byte of the service context in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPServiceContext.Validate">
            <summary>
            Validate the service context fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A service context field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPServiceContext.LogMessage">
            <summary>
            Log the service context fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPServiceGatewayMessage">
            <summary>
            The class that describes the BIOP Service Gateway message.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceGatewayMessage.ObjectInfoData">
            <summary>
            Get the object information data.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceGatewayMessage.ServiceContexts">
            <summary>
            Get the collection of service contexts.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceGatewayMessage.MessageBodyLength">
            <summary>
            Get the message body length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceGatewayMessage.Bindings">
            <summary>
            Get the collection of bindings.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPServiceGatewayMessage.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the service gateway message.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The service gateway message has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPServiceGatewayMessage.#ctor">
            <summary>
            Initialize a new instance of the BIOPServiceGatewayMessage class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPServiceGatewayMessage.Process(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse the service gateway message.
            </summary>
            <param name="byteData">The MPEG2 section containing the service gateway message.</param>
            <param name="index">Index of the first byte of the service gateway message in the MPEG2 section.</param>
            <param name="objectInfoLength">The length of the object information data.</param> 
        </member>
        <member name="M:DVBServices.BIOPServiceGatewayMessage.Validate">
            <summary>
            Validate the service gateway message fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A service gateway message field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPServiceGatewayMessage.LogMessage">
            <summary>
            Log the service gateway message fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPTapSelector">
            <summary>
            The class that describes a tap selector.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTapSelector.SelectorType">
            <summary>
            Get the selector type.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTapSelector.TransactionID">
            <summary>
            Get the transaction ID.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTapSelector.Timeout">
            <summary>
            Get the timeout.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTapSelector.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the tap selector.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The tap selector has not been processed.
            </exception>
        </member>
        <member name="F:DVBServices.BIOPTapSelector.TapSelectorLength">
            <summary>
            Get the length of a tap selector.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPTapSelector.#ctor">
            <summary>
            Initialize a new instance of the BIOPTapSelector class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPTapSelector.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the tap selector.
            </summary>
            <param name="byteData">The MPEG2 section containing the tap selector.</param>
            <param name="index">Index of the first byte of the tap selector in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPTapSelector.Validate">
            <summary>
            Validate the tap selector fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A tap selector field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPTapSelector.LogMessage">
            <summary>
            Log the tap selector fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBBouquetNameDescriptor">
            <summary>
            DVB Bouquet name descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBBouquetNameDescriptor.Name">
            <summary>
            Get the bouquet name.
            </summary>
        </member>
        <member name="P:DVBServices.DVBBouquetNameDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBBouquetNameDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBBouquetNameDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBBouquetNameDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBBouquetNameDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBBouquetNameDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBComponentDescriptor">
            <summary>
            DVB Component descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBComponentDescriptor.ComponentTypeVideo">
            <summary>
            Get the video component type.
            </summary>
        </member>
        <member name="P:DVBServices.DVBComponentDescriptor.ComponentTypeAudio">
            <summary>
            Get the audio component type.
            </summary>
        </member>
        <member name="P:DVBServices.DVBComponentDescriptor.ComponentTypeSubtitles">
            <summary>
            Get the subtitles component type.
            </summary>
        </member>
        <member name="P:DVBServices.DVBComponentDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBComponentDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBComponentDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBComponentDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBComponentDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBComponentDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBContentDescriptor">
            <summary>
            DVB Content descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBContentDescriptor.ContentTypes">
            <summary>
            Get the list of content types.
            </summary>
        </member>
        <member name="P:DVBServices.DVBContentDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBContentDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBContentDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBContentDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBContentDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBContentDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.BIOPTap">
            <summary>
            The class that describes a BIOP Tap.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTap.Identity">
            <summary>
            Get the identity of the tap.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTap.Use">
            <summary>
            Get the use of the tap.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTap.AssociationTag">
            <summary>
            Get the association tag.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTap.SelectorLength">
            <summary>
            Get the selector length.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTap.Selector">
            <summary>
            Get the selector.
            </summary>
        </member>
        <member name="P:DVBServices.BIOPTap.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the tap.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The tap has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPTap.#ctor">
            <summary>
            Initialize a new instance of the BIOPTap class.
            </summary>
        </member>
        <member name="M:DVBServices.BIOPTap.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the tap.
            </summary>
            <param name="byteData">The MPEG2 section containing the tap.</param>
            <param name="index">Index of the first byte of the tap in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.BIOPTap.Validate">
            <summary>
            Validate the tap fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A tap field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.BIOPTap.LogMessage">
            <summary>
            Log the tap fields.
            </summary>
        </member>
        <member name="T:DVBServices.CosNameComponent">
            <summary>
            The class that describes a Cos name component.
            </summary>
        </member>
        <member name="P:DVBServices.CosNameComponent.IdentityLength">
            <summary>
            Get the identity length.
            </summary>
        </member>
        <member name="P:DVBServices.CosNameComponent.Identity">
            <summary>
            Get the identity.
            </summary>
        </member>
        <member name="P:DVBServices.CosNameComponent.KindLength">
            <summary>
            Get the kind length.
            </summary>
        </member>
        <member name="P:DVBServices.CosNameComponent.Kind">
            <summary>
            Get the kind of component.
            </summary>
        </member>
        <member name="P:DVBServices.CosNameComponent.InitialContextLength">
            <summary>
            Get the initial context length.
            </summary>
        </member>
        <member name="P:DVBServices.CosNameComponent.InitialContext">
            <summary>
            Get the initial context.
            </summary>
        </member>
        <member name="P:DVBServices.CosNameComponent.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the name component.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The name component has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.CosNameComponent.#ctor">
            <summary>
            Initialize a new instance of the CosNameComponent class.
            </summary>
        </member>
        <member name="M:DVBServices.CosNameComponent.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the name component.
            </summary>
            <param name="byteData">The MPEG2 section containing the name component.</param>
            <param name="index">Index of the first byte of the name component in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.CosNameComponent.Validate">
            <summary>
            Validate the name component fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A name component field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.CosNameComponent.LogMessage">
            <summary>
            Log the name component fields.
            </summary>
        </member>
        <member name="T:DVBServices.CosNamingName">
            <summary>
            The class that describes a Cos naming name.
            </summary>
        </member>
        <member name="P:DVBServices.CosNamingName.NameComponents">
            <summary>
            Get the collection of name components.
            </summary>
        </member>
        <member name="P:DVBServices.CosNamingName.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the naming name.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The naming name has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.CosNamingName.#ctor">
            <summary>
            Initialize a new instance of the CosNamingName class.
            </summary>
        </member>
        <member name="M:DVBServices.CosNamingName.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the naming name.
            </summary>
            <param name="byteData">The MPEG2 section containing the naming name.</param>
            <param name="index">Index of the first byte of the naming name.</param>
        </member>
        <member name="M:DVBServices.CosNamingName.Validate">
            <summary>
            Validate the naming name fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A naming name field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.CosNamingName.LogMessage">
            <summary>
            Log the naming name fields.
            </summary>
        </member>
        <member name="T:DVBServices.DescriptorBase">
            <summary>
            The base descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.Table">
            <summary>
            Get the table ID containing the descriptor data (Dish/Bell descriptors only).
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.Tag">
            <summary>
            Get the tag of the record.
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.Length">
            <summary>
            Get the length of the descriptor data.
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.TotalLength">
            <summary>
            Get the total length of the descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.Data">
            <summary>
            Get the record data.
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.IsUndefined">
            <summary>
            Return true if the descriptor is undefined; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.IsEmpty">
            <summary>
            Return true if the descriptor is empty; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.MinimumDescriptorLength">
            <summary>
            Return the minimum descriptor length in bytes.
            </summary>
        </member>
        <member name="P:DVBServices.DescriptorBase.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="F:DVBServices.DescriptorBase.OpenTVChannelGroupDescriptorTag">
            <summary>
            OpenTV specific descriptors - only valid if collection type is OpenTV
            </summary>
        </member>
        <member name="M:DVBServices.DescriptorBase.Instance(System.Byte[],System.Int32,DVBServices.Scope)">
            <summary>
            Create an instance of the descriptor class.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">The index of the tag byte of the descriptor.</param>
            <param name="scope">The current scope.</param>
            <returns>A descriptor instance.</returns>
        </member>
        <member name="M:DVBServices.DescriptorBase.AtscInstance(System.Byte[],System.Int32)">
            <summary>
            Create an instance of the descriptor class for ATSC descriptors.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">The index of the tag byte of the descriptor.</param>
            <returns>A descriptor instance.</returns>
        </member>
        <member name="M:DVBServices.DescriptorBase.DishNetworkInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Create an instance of the descriptor class for Dish Network descriptors.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">The index of the tag byte of the descriptor.</param>
            <param name="table">The table ID containing this descriptor.</param>
            <returns>A descriptor instance.</returns>
        </member>
        <member name="M:DVBServices.DescriptorBase.BellTVInstance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Create an instance of the descriptor class for Bell TV descriptors.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">The index of the tag byte of the descriptor.</param>
            <param name="table">The table ID containing this descriptor.</param>
            <returns>A descriptor instance.</returns>
        </member>
        <member name="M:DVBServices.DescriptorBase.#ctor">
            <summary>
            Initialize a new instance of the DescriptorBase class.
            </summary>
        </member>
        <member name="M:DVBServices.DescriptorBase.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DescriptorBase.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DescriptorBase.SetGenericLogging(System.Boolean)">
            <summary>
            Enable or disable logging of generic descriptors.
            </summary>
            <param name="enabled">True to enable logging; false otherwise.</param>
        </member>
        <member name="M:DVBServices.DescriptorBase.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCCompatibilityDescriptor">
            <summary>
            The class that describes the DSMCC compatibility descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptor.DescriptorEntries">
            <summary>
            Get the collection of descriptor entries.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptor.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DSMCCCompatabilityDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the first byte of the descriptor in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptor.Validate">
            <summary>
            Validate the descriptor.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The descriptor information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCCompatibilityDescriptorEntry">
            <summary>
            The class that describes a DSMCC compatability descriptor entry.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorEntry.DescriptorType">
            <summary>
            Get the descriptor type.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorEntry.SpecifierType">
            <summary>
            Get the specifier type.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorEntry.SpecifierData">
            <summary>
            Get the specifier data.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorEntry.Model">
            <summary>
            Get the model number.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorEntry.Version">
            <summary>
            Get the version number.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorEntry.SubDescriptors">
            <summary>
            Get the collection of sub-descriptors.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptorEntry.#ctor">
            <summary>
            Initialize a new instance of the DSMCCCompatibilityDescriptorEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptorEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte of the entry in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptorEntry.Validate">
            <summary>
            Validate the entry.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The entry information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptorEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor">
            <summary>
            The class that describes the DSMCC compatibility descriptor sub-descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor.DescriptorType">
            <summary>
            Get the descriptor type.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor.AdditionalInfoLength">
            <summary>
            Get the length of the additional information.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor.AdditionalInfo">
            <summary>
            Get the additional information.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the sub-descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The sub-descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DSMCCCompatibilityDescriptorSubDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the sub-descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the sub-descriptor.</param>
            <param name="index">Index of the first byte of the sub-descriptor in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor.Validate">
            <summary>
            Validate the sub-descriptor.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The sub-descriptor information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCCompatibilityDescriptorSubDescriptor.LogMessage">
            <summary>
            Log the sub-descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCDownloadCancel">
            <summary>
            The class that describes a DSMCC download cancel message.
            </summary>
        </member>
        <member name="F:DVBServices.DSMCCDownloadCancel.MessageIDDownloadCancel">
            <summary>
            The message ID of a download cancel message.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadCancel.DownloadID">
            <summary>
            Get the download ID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadCancel.ModuleID">
            <summary>
            Get the module ID..
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadCancel.BlockNumber">
            <summary>
            Get the block number.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadCancel.DownloadCancelReason">
            <summary>
            Get the download cancel reason code.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadCancel.PrivateDataLength">
            <summary>
            Get the length of private data.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadCancel.PrivateData">
            <summary>
            Get the private data.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadCancel.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the message.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The message has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DSMCCDownloadCancel.#ctor(DVBServices.DSMCCHeader)">
            <summary>
            Initialize a new instance of the DSMCCDownloadCancel message.
            </summary>
            <param name="dsmccHeader">The DSMCC header that preceedes the message.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadCancel.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">Index of the first byte of the message following the header in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadCancel.Validate">
            <summary>
            Validate the message.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The message information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadCancel.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCDownloadDataBlock">
            <summary>
            The class that describes a DSMCC download data block.
            </summary>
        </member>
        <member name="F:DVBServices.DSMCCDownloadDataBlock.MessageIDDownloadDataBlock">
            <summary>
            The message ID of a download data block.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadDataBlock.ModuleID">
            <summary>
            Get the module ID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadDataBlock.ModuleVersion">
            <summary>
            Get the module version.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadDataBlock.BlockNumber">
            <summary>
            Get the block number.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadDataBlock.Data">
            <summary>
            Get the data block.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadDataBlock.DataSize">
            <summary>
            Get the size of the data block.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadDataBlock.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the message.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The message has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadDataBlock.#ctor(DVBServices.DSMCCHeader)">
            <summary>
            Initialize a new instance of the DSMCCDownloadDataBlock.
            </summary>
            <param name="dsmccHeader">The DSMCC header that preceedes the message.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadDataBlock.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">Index of the first byte of the message following the header in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadDataBlock.Validate">
            <summary>
            Validate the message.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The message information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadDataBlock.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCDownloadInfoIndication">
            <summary>
            The class that describes a DSMCC download info indication message.
            </summary>
        </member>
        <member name="F:DVBServices.DSMCCDownloadInfoIndication.MessageIDDownloadInfoIndication">
            <summary>
            The message ID of a download info indication message.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.DownloadID">
            <summary>
            Get the download ID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.BlockSize">
            <summary>
            Get the block size.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.WindowSize">
            <summary>
            Get the window size.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.AckPeriod">
            <summary>
            Get gthe ACK period.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.TCDownloadWindow">
            <summary>
            Get the download window.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.TCDownloadScenario">
            <summary>
            Get the download scenario.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.CompatibilityDescriptor">
            <summary>
            Get the compatibility descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.ModuleList">
            <summary>
            Get the collection of modules.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.PrivateDataLength">
            <summary>
            Get the length of the private data.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.PrivateData">
            <summary>
            Get the private data.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndication.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the message.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The message has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadInfoIndication.#ctor(DVBServices.DSMCCHeader)">
            <summary>
            Initialize a new instance of the DSMCCDownloadInfoIndication class.
            </summary>
            <param name="dsmccHeader">The DSMCC header that preceedes the message.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadInfoIndication.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">Index of the first byte of the message following the header in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadInfoIndication.Validate">
            <summary>
            Validate the message.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The message information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadInfoIndication.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCDownloadInfoIndicationModule">
            <summary>
            The class that describes a DSMCC donload info indication module.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndicationModule.ModuleID">
            <summary>
            Get the module ID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndicationModule.ModuleSize">
            <summary>
            Get the module size.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndicationModule.ModuleVersion">
            <summary>
            Get the module version.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndicationModule.ModuleInfoLength">
            <summary>
            Get the length of the module information.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndicationModule.BIOPModuleInformation">
            <summary>
            Get the module information.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndicationModule.OriginalSize">
            <summary>
            Get the original size of the module before compression.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadInfoIndicationModule.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the module.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The module has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadInfoIndicationModule.#ctor">
            <summary>
            Initialize a new instance of the DSMCCDownloadInfoIndicationModule class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCDownloadInfoIndicationModule.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the module.
            </summary>
            <param name="byteData">The MPEG2 section containing the module.</param>
            <param name="index">Index of the first byte of the module in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadInfoIndicationModule.Validate">
            <summary>
            Validate the module.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The module information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadInfoIndicationModule.LogMessage">
            <summary>
            Log the module fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCDownloadServerInitiate">
            <summary>
            The class the describes a DSMCC download servier initiate message.
            </summary>
        </member>
        <member name="F:DVBServices.DSMCCDownloadServerInitiate.MessageIDDownloadServerInitiate">
            <summary>
            The message ID of a download server initiate message.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadServerInitiate.TransactionID">
            <summary>
            Get or set the transaction ID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadServerInitiate.ServiceGatewayInfo">
            <summary>
            Get the service gateway information.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadServerInitiate.GroupInfoIndication">
            <summary>
            Get the group info indication structure.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCDownloadServerInitiate.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the message.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The message has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadServerInitiate.#ctor(DVBServices.DSMCCHeader)">
            <summary>
            Initialize a new instance of the DSMCCDownloadServerInitiate message.
            </summary>
            <param name="dsmccHeader">The DSMCC header that preceedes the message.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadServerInitiate.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">Index of the first byte of the message following the header in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCDownloadServerInitiate.Validate">
            <summary>
            Validate the message.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The message information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCDownloadServerInitiate.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCHeader">
            <summary>
            The class that describes a DSMCC message header.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.Mpeg2Header">
            <summary>
            Get the MPEG2 header for the message.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.ProtocolDiscriminator">
            <summary>
            Get the protocol discriminator.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.DSMCCType">
            <summary>
            Get the DSMCC type.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.MessageID">
            <summary>
            Get the message ID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.TransactionID">
            <summary>
            Get the transactionID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.AdaptionLength">
            <summary>
            Get the length of the adaption data.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.AdaptionData">
            <summary>
            Get the adaption data.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.MessageLength">
            <summary>
            Get the message length.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCHeader.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the header.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The header has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCHeader.#ctor">
            <summary>
            Initialize a new instance of the DSMCCHeader class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCHeader.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the header.
            </summary>
            <param name="byteData">The MPEG2 section containing the header.</param>
            <param name="mpeg2Header">Header of the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCHeader.Validate">
            <summary>
            Validate the header.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The header information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCHeader.LogMessage">
            <summary>
            Log the header fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCMessage">
            <summary>
            The base class for DSMCC messages.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCMessage.CreateInstance(DVBServices.DSMCCHeader,System.Byte[])">
            <summary>
            Create an instance of a DSMCC message.
            </summary>
            <param name="dsmccHeader">The header of the message.</param>
            <param name="byteData">The MPEG2 data block that contains the message.</param>
            <returns>An instance of the appropriate DSMCC message class.</returns>
        </member>
        <member name="P:DVBServices.DSMCCMessage.DSMCCHeader">
            <summary>
            Get the header of the message.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCMessage.#ctor(DVBServices.DSMCCHeader)">
            <summary>
            Initialize a new instance of the DSMCCMessage class.
            </summary>
            <param name="dsmccHeader">The header of the message.</param>
        </member>
        <member name="M:DVBServices.DSMCCMessage.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the message.
            </summary>
            <param name="byteData">The MPEG2 section containing the message.</param>
            <param name="index">Index of the first byte of the message following the header in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMCCMessage.Validate">
            <summary>
            Validate the message.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The message information is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMCCMessage.LogMessage">
            <summary>
            Log the message fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCModule">
            <summary>
            The class that describes a DSMCC module.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCModule.ModuleID">
            <summary>
            Get the module ID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCModule.Version">
            <summary>
            Get the version number of the module.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCModule.Blocks">
            <summary>
            Get the collection of data blocks that make up the module.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCModule.Data">
            <summary>
            Get the module data.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCModule.Complete">
            <summary>
            Returns true if the module has been completely loaded; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCModule.Compressed">
            <summary>
            Returns true if the module is compressed; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCModule.Objects">
            <summary>
            Get the collection of BIOP messages for the module.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCModule.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the DSMCCModule class.
            </summary>
            <param name="moduleID">The module ID.</param>
            <param name="version">The version number of the module.</param>
            <param name="size">The size of the module.</param>
            <param name="originalSize">The original size of the module.</param>
        </member>
        <member name="M:DVBServices.DSMCCModule.AddBlock(DVBServices.DSMCCDownloadDataBlock)">
            <summary>
            Add a download data block to the module.
            </summary>
            <param name="newBlock">The block to be added.</param>
            <returns>True if the block has been added; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.DSMCCModule.LogMessage">
            <summary>
            Log the fields in the module.
            </summary>
        </member>
        <member name="T:DVBServices.DSMCCController">
            <summary>
            The class that controls the acquisition and processing of the DSMCC protocol.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCController.AllDataProcessed">
            <summary>
            Return true if the DSMCC data is complete; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCController.#ctor">
            <summary>
            Initialize a new instance of the DSMCCController class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCController.Stop">
            <summary>
            Stop acquiring and processing DSMCC data.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process DSMCC data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.DSMCCController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process DSMCC data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.DSMCCController.ProcessBouquetSections">
            <summary>
            Process the bouquet data.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCController.GetDSMCCSections(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Build the DSMCC tables.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="worker">The background worker.</param>
        </member>
        <member name="M:DVBServices.DSMCCController.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCController.ProcessEITCarousel(System.Collections.ObjectModel.Collection{System.String},System.String)">
            <summary>
            Process an EIT carousel.
            </summary>
            <param name="carouselDirectories">The list of carousel directories.</param>
            <param name="fileSuffix">The filename suffix of the files to be included. Can be null.</param>
            <returns>A collection of tuples containing file name and file data or null if no data present.</returns>
        </member>
        <member name="T:DVBServices.DSMCCSection">
            <summary>
            The class that describes a DSMCC MPEG2 section.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCSection.DSMCCMessage">
            <summary>
            Get the DSMCCmessage for this section.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCSection.#ctor">
            <summary>
            Initialize a new instance of the DSMCCSection class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containg the DSMCC data.</param>
            <param name="mpeg2Header">The MPEG2 header for the section.</param>
        </member>
        <member name="T:DVBServices.DSMCCTransactionID">
            <summary>
            The class that describes a DSMCC transaction ID.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCTransactionID.UpdateFlag">
            <summary>
            Get the update flag.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCTransactionID.Identification">
            <summary>
            Get the transaction identification.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCTransactionID.Version">
            <summary>
            Get the version number.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCTransactionID.Assignment">
            <summary>
            Get the transaction ID assignment.
            </summary>
        </member>
        <member name="P:DVBServices.DSMCCTransactionID.Value">
            <summary>
            Get the entire transaction ID field.
            </summary>
        </member>
        <member name="M:DVBServices.DSMCCTransactionID.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the DSMCCTransactionID class.
            </summary>
            <param name="transactionID">The entire DSMCC transaction ID.</param>
        </member>
        <member name="M:DVBServices.DSMCCTransactionID.Validate">
            <summary>
            Validate the transaction ID.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DVBServices.DSMConnBinder">
            <summary>
            The class that describes a DSM connection binder.
            </summary>
        </member>
        <member name="P:DVBServices.DSMConnBinder.Taps">
            <summary>
            Get the collection of taps.
            </summary>
        </member>
        <member name="P:DVBServices.DSMConnBinder.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the connection binder.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The connection binder has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DSMConnBinder.#ctor">
            <summary>
            Initialize a new instance of the DSMConnBinder class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMConnBinder.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the connection binder.
            </summary>
            <param name="byteData">The MPEG2 section containing the connection binder.</param>
            <param name="index">Index of the first byte of the connection binder in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMConnBinder.Validate">
            <summary>
            Validate the connection binder fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A connection binder field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMConnBinder.LogMessage">
            <summary>
            Log the connection binder fields.
            </summary>
        </member>
        <member name="T:DVBServices.DSMServiceLocation">
            <summary>
            The class that describes a DSM service location.
            </summary>
        </member>
        <member name="P:DVBServices.DSMServiceLocation.ServiceDomainLength">
            <summary>
            Get the length of the service domain.
            </summary>
        </member>
        <member name="P:DVBServices.DSMServiceLocation.ServiceDomain">
            <summary>
            Get the service domain.
            </summary>
        </member>
        <member name="P:DVBServices.DSMServiceLocation.CosNamingName">
            <summary>
            Get the Cos naming name for the service location.
            </summary>
        </member>
        <member name="P:DVBServices.DSMServiceLocation.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the service location.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The service location has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DSMServiceLocation.#ctor">
            <summary>
            Initialize a new instance of the DSMServiceLocation class.
            </summary>
        </member>
        <member name="M:DVBServices.DSMServiceLocation.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the service location.
            </summary>
            <param name="byteData">The MPEG2 section containing the service location.</param>
            <param name="index">Index of the first byte of the service location in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.DSMServiceLocation.Validate">
            <summary>
            Validate the service location fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A service location field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DSMServiceLocation.LogMessage">
            <summary>
            Log the service location fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBCompressedModuleDescriptor">
            <summary>
            DVB Compressed Module descriptor class.
            </summary>
        </member>
        <member name="F:DVBServices.DVBCompressedModuleDescriptor.Tag">
            <summary>
            Get the tag value for the descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCompressedModuleDescriptor.CompressionMethod">
            <summary>
            Get the module compression method.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCompressedModuleDescriptor.OriginalSize">
            <summary>
            Get the original size of the module.
            </summary>
        </member>
        <member name="P:DVBServices.DVBCompressedModuleDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DVBCompressedModuleDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBCompressedModuleDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBCompressedModuleDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBCompressedModuleDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBCompressedModuleDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBLocalTimeOffsetDescriptor">
            <summary>
            DVB Local Time Offset descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLocalTimeOffsetDescriptor.TimeOffsetEntries">
            <summary>
            Get the collection of time offset entries.
            </summary>
        </member>
        <member name="P:DVBServices.DVBLocalTimeOffsetDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBLocalTimeOffsetDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBLocalTimeOffsetDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBLocalTimeOffsetDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The mpeg2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the mpeg2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBLocalTimeOffsetDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBLocalTimeOffsetDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBServiceDescriptor">
            <summary>
            DVB Service descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceDescriptor.ServiceType">
            <summary>
            Get the service type.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceDescriptor.ProviderName">
            <summary>
            Get the provider name.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceDescriptor.ServiceName">
            <summary>
            Get the service name.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBServiceDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBServiceDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBServiceDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBServiceDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBServiceDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBServiceListDescriptor">
            <summary>
            DVB Service List descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceListDescriptor.ServiceList">
            <summary>
            Get the collection of services.
            </summary>
        </member>
        <member name="P:DVBServices.DVBServiceListDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBServiceListDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBServiceListDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBServiceListDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBServiceListDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBServiceListDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.ServiceListEntry">
            <summary>
            The class that describes a service list entry.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceListEntry.ServiceID">
            <summary>
            Get the service identification.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceListEntry.ServiceType">
            <summary>
            Get the service type.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceListEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the ServiceListEntry class.
            </summary>
            <param name="serviceID">The service identification.</param>
            <param name="serviceType">The type of service (EN 300 468 table 81).</param>
        </member>
        <member name="M:DVBServices.ServiceListEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ServiceListEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.EITController">
            <summary>
            The class that controls the acquisition and processing of EIT data.
            </summary>
        </member>
        <member name="P:DVBServices.EITController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.EITController.AllDataProcessed">
            <summary>
            Return true if the EIT data is complete; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.EITController.#ctor">
            <summary>
            Initialize a new instance of the EITController class.
            </summary>
        </member>
        <member name="M:DVBServices.EITController.Stop">
            <summary>
            Stop acquiring and processing EIT data.
            </summary>
        </member>
        <member name="M:DVBServices.EITController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process EIT data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.EITController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process EIT data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to be collected.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.EITController.ProcessBouquetSections">
            <summary>
            Process the bouquet data.
            </summary>
        </member>
        <member name="M:DVBServices.EITController.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.EITEntry">
            <summary>
            The class that describes an EIT entry.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.StartTime">
            <summary>
            Get the event start time.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Duration">
            <summary>
            Get the event duration.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.RunningStatus">
            <summary>
            Get the running status of the event.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Scrambled">
            <summary>
            Return true if the event is scrambled; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.EventName">
            <summary>
            Get the event name.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.ShortDescription">
            <summary>
            Get the short description for the event.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.ExtendedDescription">
            <summary>
            Get the extended description for the event.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Description">
            <summary>
            Get the complete description.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.ComponentTypeVideo">
            <summary>
            Get the DVB standard (EN 300 468) component type for the video stream.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.ComponentTypeAudio">
            <summary>
            Get the DVB standard (EN 300 468) component type for the audio stream.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.ComponentTypeSubtitles">
            <summary>
            Get the DVB standard (EN 300 468) component type for the subtitle stream.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.ContentType">
            <summary>
            Get the DVB standard (EN 300 468) content type.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.ContentSubType">
            <summary>
            Get the DVB standard (EN 300 468) content subype.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.ParentalRating">
            <summary>
            Get the DVB standard (EN 300 468) parental rating.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Cast">
            <summary>
            Get the cast.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Producers">
            <summary>
            Get the producers.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Directors">
            <summary>
            Get the directors.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Writers">
            <summary>
            Get the writers.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Year">
            <summary>
            Get the production year.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.StarRating">
            <summary>
            Get the star rating.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.SeriesId">
            <summary>
            Get the series ID.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.SeasonId">
            <summary>
            Get the season ID.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.EpisodeId">
            <summary>
            Get the episode ID.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.SeasonNumber">
            <summary>
            Get the season number.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.EpisodeNumber">
            <summary>
            Get the episode number.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.EpisodeCount">
            <summary>
            Get the episode count.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.TVRating">
            <summary>
            Get the TV rating.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.PreviousPlayDate">
            <summary>
            Get the previous play date.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Country">
            <summary>
            Get the country of origin.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Subtitle">
            <summary>
            Get the subtitle.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.LanguageCode">
            <summary>
            Get the language code of the entry.
            </summary>
        </member>
        <member name="P:DVBServices.EITEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the EIT entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.EITEntry.#ctor">
            <summary>
            Initialize a new instance of the EITEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.EITEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the event identification byte in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.EITEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An entry field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.EITEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.EITSection">
            <summary>
            The class that describes an EIT section.
            </summary>
        </member>
        <member name="P:DVBServices.EITSection.EITEntries">
            <summary>
            Get the collection of EIT entries in the section.
            </summary>
        </member>
        <member name="P:DVBServices.EITSection.CategoryEntries">
            <summary>
            Get the collection of EIT category records.
            </summary>
        </member>
        <member name="P:DVBServices.EITSection.OriginalNetworkID">
            <summary>
            Get the original network identification (ONID).
            </summary>
        </member>
        <member name="P:DVBServices.EITSection.TransportStreamID">
            <summary>
            Get the transport stream identification (TSID).
            </summary>
        </member>
        <member name="P:DVBServices.EITSection.ServiceID">
            <summary>
            Get the service identification (SID).
            </summary>
        </member>
        <member name="P:DVBServices.EITSection.LastTableID">
            <summary>
            Get the identification of the last table for the EIT section.
            </summary>
        </member>
        <member name="P:DVBServices.EITSection.SegmentLastSectionNumber">
            <summary>
            Get the segment last section number for the EIT section.
            </summary>
        </member>
        <member name="M:DVBServices.EITSection.#ctor">
            <summary>
            Initialize a new instance of the EITSection class.
            </summary>
        </member>
        <member name="M:DVBServices.EITSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.EITSection.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.EITSection.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.EPGController">
            <summary>
            The class that controls the collection of EPG data.
            </summary>
        </member>
        <member name="P:DVBServices.EPGController.Instance">
            <summary>
            Get an instance of the EPGController class.
            </summary>
        </member>
        <member name="T:DVBServices.EPGController.ProcessCompleteHandler">
            <summary>
            The end of collection event.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="E:DVBServices.EPGController.ProcessComplete">
            <summary>
            The handler for the end of collection event.
            </summary>
        </member>
        <member name="P:DVBServices.EPGController.Running">
            <summary>
            Returns true if collection is in progress; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.EPGController.DataComplete">
            <summary>
            Return true if all data was collected; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.EPGController.CurrentCollector">
            <summary>
            Get the interface to the current collector.
            </summary>
        </member>
        <member name="M:DVBServices.EPGController.FinishRun">
            <summary>
            Carry out end of run processing.
            </summary>
            <returns>True if successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.EPGController.Run(DomainObjects.ISampleDataProvider,DomainObjects.TuningFrequency)">
            <summary>
            Start the collection process.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="tuningFrequency">The tuning frequency.</param>
        </member>
        <member name="M:DVBServices.EPGController.Run(DomainObjects.ISampleDataProvider,DomainObjects.TuningFrequency,DomainObjects.CollectionSpan)">
            <summary>
            Start the collection process.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="tuningFrequency">The tuning frequency.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
        </member>
        <member name="M:DVBServices.EPGController.Stop">
            <summary>
            Stop the collection process.
            </summary>
        </member>
        <member name="T:DVBServices.DVBExtendedEventDescriptor">
            <summary>
            DVB Extended Event descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.ItemDescriptions">
            <summary>
            Get the item descriptions.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Items">
            <summary>
            Get the items.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.DescriptorNumber">
            <summary>
            Get the descriptor number.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.LastDescriptorNumber">
            <summary>
            Get the last descriptor number.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Text">
            <summary>
            Get the non itemised text.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.LanguageCode">
            <summary>
            Get the language code.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Cast">
            <summary>
            Get the list of cast members.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Producers">
            <summary>
            Get the list of producers.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Directors">
            <summary>
            Get the list of directorrs.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Writers">
            <summary>
            Get the list of writers.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Year">
            <summary>
            Get the year of production.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.StarRating">
            <summary>
            Get the star rating.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.SeriesID">
            <summary>
            Get the series ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.SeasonID">
            <summary>
            Get the season ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.EpisodeID">
            <summary>
            Get the episode ID.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.SeasonNumber">
            <summary>
            Get the season number.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.EpisodeNumber">
            <summary>
            Get the episode number.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.EpisodeCount">
            <summary>
            Get the episode count.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.TVRating">
            <summary>
            Get the TV rating.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.PreviousPlayDate">
            <summary>
            Get the offset back to the previous play date.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Country">
            <summary>
            Get the country of origin.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Episode">
            <summary>
            Get the episode.
            </summary>
        </member>
        <member name="P:DVBServices.DVBExtendedEventDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.DVBExtendedEventDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBExtendedEventDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBExtendedEventDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBExtendedEventDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBExtendedEventDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.FrequencyScanner">
            <summary>
            The class the describes the frequency scanner that locates stations.
            </summary>
        </member>
        <member name="P:DVBServices.FrequencyScanner.SearchOtherStream">
            <summary>
            Get or set whether to include stations on the other transport stream.
            </summary>
        </member>
        <member name="M:DVBServices.FrequencyScanner.#ctor(DomainObjects.ISampleDataProvider)">
            <summary>
            Initialize a new instance of the FrequencyScanner class.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
        </member>
        <member name="M:DVBServices.FrequencyScanner.#ctor(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Initialize a new instance of the FrequencyScanner class.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">An optional background worker instance. Can be null.</param>
        </member>
        <member name="M:DVBServices.FrequencyScanner.#ctor(DomainObjects.ISampleDataProvider,System.Int32[])">
            <summary>
            Initialize a new instance of the FrequencyScanner.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="pids">A collection of PID's to be searched.</param>
        </member>
        <member name="M:DVBServices.FrequencyScanner.#ctor(DomainObjects.ISampleDataProvider,System.Int32[],System.Boolean)">
            <summary>
            Initialize a new instance of the FrequencyScanner.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="pids">A collection of PID's to be searched.</param>
            <param name="searchOtherTable">True to include the 'other' stations; false otherwise</param>
        </member>
        <member name="M:DVBServices.FrequencyScanner.#ctor(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,System.Boolean)">
            <summary>
            Initialize a new instance of the FrequencyScanner.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">An optional background worker instance. Can be null.</param>
            <param name="searchOtherTable">True to include the 'other' stations; false otherwise</param>
        </member>
        <member name="M:DVBServices.FrequencyScanner.#ctor(DomainObjects.ISampleDataProvider,System.Int32[],System.Boolean,System.ComponentModel.BackgroundWorker)">
            <summary>
            Initialize a new instance of the FrequencyScanner.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="pids">A collection of PID's to be searched.</param>
            <param name="searchOtherTable">True to include the 'other' stations; false otherwise</param>
            <param name="worker">An optional background worker instance. Can be null.</param>
        </member>
        <member name="M:DVBServices.FrequencyScanner.FindTVStations">
            <summary>
            Find TV stations.
            </summary>
            <returns>A collection of TV stations.</returns>
        </member>
        <member name="T:DVBServices.GroupInfoIndication">
            <summary>
            The class that describes the GroupInfoIndication structure.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndication.GroupEntries">
            <summary>
            Get the group entries.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndication.PrivateDataLength">
            <summary>
            Get the length of the private data.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndication.PrivateData">
            <summary>
            Get the private data.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndication.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the service gateway information.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The information has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.GroupInfoIndication.#ctor">
            <summary>
            Initialize a new instance of the GroupInfoIndication class.
            </summary>
        </member>
        <member name="M:DVBServices.GroupInfoIndication.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the group information.
            </summary>
            <param name="byteData">The MPEG2 section containing the group information.</param>
            <param name="index">Index of the byte in the MPEG2 section following the gateway information.</param>
        </member>
        <member name="M:DVBServices.GroupInfoIndication.Validate">
            <summary>
            Validate the group information fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An information field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.GroupInfoIndication.LogMessage">
            <summary>
            Log the gateway information fields.
            </summary>
        </member>
        <member name="T:DVBServices.GroupInfoIndicationEntry">
            <summary>
            The class that describes the GroupInfoIndicationEntry structure.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndicationEntry.GroupID">
            <summary>
            Get the group ID.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndicationEntry.GroupSize">
            <summary>
            Get the group size.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndicationEntry.CompatibilityDescriptor">
            <summary>
            Get the compability descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndicationEntry.GroupInfoLength">
            <summary>
            Get the length of the group info.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndicationEntry.GroupInfo">
            <summary>
            Get the group info.
            </summary>
        </member>
        <member name="P:DVBServices.GroupInfoIndicationEntry.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the group information.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The information has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.GroupInfoIndicationEntry.#ctor">
            <summary>
            Initialize a new instance of the GroupInfoIndication class.
            </summary>
        </member>
        <member name="M:DVBServices.GroupInfoIndicationEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the group information.
            </summary>
            <param name="byteData">The MPEG2 section containing the group information.</param>
            <param name="index">Index of the byte in the MPEG2 section following the gateway information.</param>
        </member>
        <member name="M:DVBServices.GroupInfoIndicationEntry.Validate">
            <summary>
            Validate the group information fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An information field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.GroupInfoIndicationEntry.LogMessage">
            <summary>
            Log the gateway information fields.
            </summary>
        </member>
        <member name="T:DVBServices.IOPIOR">
            <summary>
            The class that describes an IOP:IOR
            </summary>
        </member>
        <member name="P:DVBServices.IOPIOR.TaggedProfiles">
            <summary>
            Get the collection of BIOP profiles.
            </summary>
        </member>
        <member name="P:DVBServices.IOPIOR.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the IOP:IOR.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The IOP:IOR has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.IOPIOR.#ctor">
            <summary>
            Initialize a new instance of the IOPIOR class.
            </summary>
        </member>
        <member name="M:DVBServices.IOPIOR.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the IOP:IOR.
            </summary>
            <param name="byteData">The MPEG2 section containing the IOP:IOR.</param>
            <param name="index">Index of the first byte of the IOP:IOR in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.IOPIOR.Validate">
            <summary>
            Validate the IOP:IOR fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An IOP:IOR field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.IOPIOR.LogMessage">
            <summary>
            Log the IOP:IOR fields.
            </summary>
        </member>
        <member name="T:DVBServices.MHEG5Channel">
            <summary>
            The class that describes an MHEG5 chanel.
            </summary>
        </member>
        <member name="M:DVBServices.MHEG5Channel.#ctor">
            <summary>
            Initialize a new instance of the MHEG5Channel class.
            </summary>
        </member>
        <member name="T:DVBServices.FreeviewChannelInfoDescriptor">
            <summary>
            Freeview Channel Info descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.FreeviewChannelInfoDescriptor.ChannelInfoEntries">
            <summary>
            Get the collection of channel entries.
            </summary>
        </member>
        <member name="P:DVBServices.FreeviewChannelInfoDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.FreeviewChannelInfoDescriptor.#ctor">
            <summary>
            Initialize a new instance of the FreeviewChannelInfoDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeviewChannelInfoDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.FreeviewChannelInfoDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeviewChannelInfoDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.FreeviewChannelInfoEntry">
            <summary>
            The class that describes a Freeview channel info entry.
            </summary>
        </member>
        <member name="P:DVBServices.FreeviewChannelInfoEntry.ServiceID">
            <summary>
            Get the service ID.
            </summary>
        </member>
        <member name="P:DVBServices.FreeviewChannelInfoEntry.Flags">
            <summary>
            Get the channel flags.
            </summary>
        </member>
        <member name="P:DVBServices.FreeviewChannelInfoEntry.UserNumber">
            <summary>
            Get the user channel ID.
            </summary>
        </member>
        <member name="P:DVBServices.FreeviewChannelInfoEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="P:DVBServices.FreeviewChannelInfoEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="M:DVBServices.FreeviewChannelInfoEntry.#ctor">
            <summary>
            Initialize a new instance of the FreeviewChannelInfoEntry class.
            </summary>
        </member>
        <member name="M:DVBServices.FreeviewChannelInfoEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.FreeviewChannelInfoEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.FreeviewChannelInfoEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.MHEGParserParameters">
            <summary>
            The class that processes the MHEG parser format file.
            </summary>
            <remarks>
            This class cannot be instantiated. All methods are static.
            </remarks>
        </member>
        <member name="T:DVBServices.MHEGParserParameters.FieldName">
            <summary>
            The names of the fields extracted by the MHEG parser.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.RootCRID">
            <summary>
            The root CRID from the station header.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.ProgramCount">
            <summary>
            The number of programs from the station header.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.EventID">
            <summary>
            The ID of the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.EventName">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.StartTime">
            <summary>
            The start time of the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.EndTime">
            <summary>
            The end time of the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.ShortDescription">
            <summary>
            The short description of the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.ImageCount">
            <summary>
            The count of 'jpg' file names for the event. 
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.SeriesCRID">
            <summary>
            The CRID of the series containing the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.ProgramCRID">
            <summary>
            The CRID of the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.ParentalRating">
            <summary>
            The parental rating of the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.HighDefinition">
            <summary>
            The picture quality of the event.
            </summary>
        </member>
        <member name="F:DVBServices.MHEGParserParameters.FieldName.ClosedCaptions">
            <summary>
            The closed captions status of the event.
            </summary>
        </member>
        <member name="P:DVBServices.MHEGParserParameters.HeaderFields">
            <summary>
            Get the maximum number of fixed fields the parser should expect in the header of each EPG record.
            </summary>
        </member>
        <member name="P:DVBServices.MHEGParserParameters.DetailFields">
            <summary>
            Get the maximum number of fixed fields the parser should expect in the detail of each EPG record.
            </summary>
            <remarks>
            Note that this is a base number because there are a variable number of fields that
            can be received in an MHEG EPG record.
            </remarks>
        </member>
        <member name="M:DVBServices.MHEGParserParameters.Process(System.String)">
            <summary>
            Initialize a new instance of the MHEGParserParameters class with a specified parameter file name.
            </summary>
            <param name="fileName">The full name of the parameter file.</param>
            <returns>True if the contents of the parameter file are valid; false otherwise.</returns>
            <remarks>
            Note that at present errors in the parameter parameters cause the application to exit so a
            reply of false is not applicable.
            </remarks>
        </member>
        <member name="M:DVBServices.MHEGParserParameters.GetField(DVBServices.MHEGParserParameters.FieldName)">
            <summary>
            Get the number of a field.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <returns>The number of the field or -1 if the field name is undefined.</returns>
        </member>
        <member name="T:DVBServices.MHPCachingPriorityDescriptor">
            <summary>
            The class that describes an MHP caching priority descriptor.
            </summary>
        </member>
        <member name="F:DVBServices.MHPCachingPriorityDescriptor.Tag">
            <summary>
            The tag value for an MHP caching priority descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.MHPCachingPriorityDescriptor.Priority">
            <summary>
            Get the priority.
            </summary>
        </member>
        <member name="P:DVBServices.MHPCachingPriorityDescriptor.TransparencyLevel">
            <summary>
            Get the transparency level.
            </summary>
        </member>
        <member name="P:DVBServices.MHPCachingPriorityDescriptor.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.MHPCachingPriorityDescriptor.#ctor">
            <summary>
            Initialize a new instance of the MHPCachingPriorityDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.MHPCachingPriorityDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the first byte of the descriptor in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MHPCachingPriorityDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MHPCachingPriorityDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.MHPContentTypeDescriptor">
            <summary>
            The class that describes an MHP content type descriptor.
            </summary>
        </member>
        <member name="F:DVBServices.MHPContentTypeDescriptor.Tag">
            <summary>
            The tag value for an MHP content type descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.MHPContentTypeDescriptor.ContentLength">
            <summary>
            Get the content length.
            </summary>
        </member>
        <member name="P:DVBServices.MHPContentTypeDescriptor.ContentType">
            <summary>
            Get the content type.
            </summary>
        </member>
        <member name="P:DVBServices.MHPContentTypeDescriptor.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.MHPContentTypeDescriptor.#ctor">
            <summary>
            Initialize a new instance of the MHPContentTypeDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.MHPContentTypeDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the first byte of the descriptor in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MHPContentTypeDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MHPContentTypeDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.MHPLabelDescriptor">
            <summary>
            The class that describes an MHP label descriptor.
            </summary>
        </member>
        <member name="F:DVBServices.MHPLabelDescriptor.Tag">
            <summary>
            The tag ID for an MHP label descriptor.
            </summary>
        </member>
        <member name="P:DVBServices.MHPLabelDescriptor.LabelLength">
            <summary>
            Get the length of the label.
            </summary>
        </member>
        <member name="P:DVBServices.MHPLabelDescriptor.Label">
            <summary>
            Get the label.
            </summary>
        </member>
        <member name="P:DVBServices.MHPLabelDescriptor.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>
        </member>
        <member name="M:DVBServices.MHPLabelDescriptor.#ctor">
            <summary>
            Initialize a new instance of the MHPLableDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.MHPLabelDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the first byte of the descriptor in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.MHPLabelDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.MHPLabelDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="P:DVBServices.DVBParentalRatingDescriptor.ParentalRatings">
            <summary>
            Get the list of parental ratings.
            </summary>
        </member>
        <member name="P:DVBServices.DVBParentalRatingDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.DVBParentalRatingDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBParentalRatingDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBParentalRatingDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBParentalRatingDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBParentalRatingDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.IEPGCollector">
            <summary>
            The interface for an EPG collector.
            </summary>
        </member>
        <member name="P:DVBServices.IEPGCollector.CollectionType">
            <summary>
            Get the collection type for this collector.
            </summary>
        </member>
        <member name="P:DVBServices.IEPGCollector.AllDataProcessed">
            <summary>
            Return true if all data has been processed; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.IEPGCollector.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Collect all the EPG data.
            </summary>
            <param name="dataProvider">The object that provides the data samples.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>        
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.IEPGCollector.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Collect part of the EPG data.
            </summary>
            <param name="dataProvider">The object that provides the data samples.</param>
            <param name="worker">The BackgroundWorker instance running the collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param> 
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.IEPGCollector.Stop">
            <summary>
            Stop the collection.
            </summary>
        </member>
        <member name="M:DVBServices.IEPGCollector.FinishFrequency">
            <summary>
            Carry out the processing necessary at the end of processing a frequency.
            </summary>
        </member>
        <member name="M:DVBServices.IEPGCollector.FinishRun">
            <summary>
            Carry out the processing necessary when all frequencies have been processed.
            </summary>
        </member>
        <member name="T:DVBServices.IPluginController">
            <summary>
            The interface for a plugin controller
            </summary>
        </member>
        <member name="M:DVBServices.IPluginController.SetPid(System.Int32)">
            <summary>
            Set a PID to filter samples.
            </summary>
            <param name="pid">The required Pid.</param>
        </member>
        <member name="M:DVBServices.IPluginController.SetPids(System.Int32[])">
            <summary>
            Set a list of PID's to filter samples.
            </summary>
            <param name="pids">The list of required PID's.</param>
        </member>
        <member name="M:DVBServices.IPluginController.GetBufferSpaceUsed">
            <summary>
            Get the amount of buffer space used.
            </summary>
            <returns>The number of bytes used.</returns>
        </member>
        <member name="M:DVBServices.IPluginController.GetFrequency">
            <summary>
            Get the current tuning frequency.
            </summary>
            <returns>The tuning frequency.</returns>
        </member>
        <member name="T:DVBServices.Mpeg2BasicHeader">
            <summary>
            The class that describes a basic MPEG2 section header.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2BasicHeader.TableID">
            <summary>
            Get the table identification.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2BasicHeader.SectionLength">
            <summary>
            Get the section length.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2BasicHeader.PrivateIndicator">
            <summary>
            Return true if the section is private data; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2BasicHeader.SyntaxIndicator">
            <summary>
            Return true if the sysntax indicator is set; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2BasicHeader.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the header.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The header has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.Mpeg2BasicHeader.#ctor">
            <summary>
            Initialize a new instance of the Mpeg2BasicHeader class.
            </summary>
        </member>
        <member name="M:DVBServices.Mpeg2BasicHeader.Process(System.Byte[])">
            <summary>
            Parse the header.
            </summary>
            <param name="byteData">The MPEG2 section containing the header.</param>
        </member>
        <member name="M:DVBServices.Mpeg2BasicHeader.Validate">
            <summary>
            Validate the header fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A header field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.Mpeg2BasicHeader.LogMessage">
            <summary>
            Log the header fields.
            </summary>
        </member>
        <member name="T:DVBServices.Mpeg2ExtendedHeader">
            <summary>
            The class that describes an MPEG2 extended header.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2ExtendedHeader.TableIDExtension">
            <summary>
            Get the table identification extension.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2ExtendedHeader.CurrentNextIndicator">
            <summary>
            Return true if the MPEG2 section is current; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2ExtendedHeader.VersionNumber">
            <summary>
            Get the version number.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2ExtendedHeader.SectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2ExtendedHeader.LastSectionNumber">
            <summary>
            Get the last section number.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2ExtendedHeader.Current">
            <summary>
            Return true if the MPEG2 section is current; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.Mpeg2ExtendedHeader.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the header.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The header has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.Mpeg2ExtendedHeader.#ctor">
            <summary>
            Initialize a new instance of the Mpeg2ExtendedHeader class.
            </summary>
        </member>
        <member name="M:DVBServices.Mpeg2ExtendedHeader.Process(System.Byte[])">
            <summary>
            Parse the header.
            </summary>
            <param name="byteData">The MPEG2 section containing the header.</param>
        </member>
        <member name="M:DVBServices.Mpeg2ExtendedHeader.Validate">
            <summary>
            Validate the header fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A header field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.Mpeg2ExtendedHeader.LogMessage">
            <summary>
            Log the header fields.
            </summary>
        </member>
        <member name="T:DVBServices.NagraGuideController">
            <summary>
            The class that controls the acquisition and processing of NagraGuide data.
            </summary>
        </member>
        <member name="P:DVBServices.NagraGuideController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.NagraGuideController.AllDataProcessed">
            <summary>
            Return true if the EIT data is complete; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.NagraGuideController.#ctor">
            <summary>
            Initialize a new instance of the NagraGuideController class.
            </summary>
        </member>
        <member name="M:DVBServices.NagraGuideController.Stop">
            <summary>
            Stop acquiring and processing EIT data.
            </summary>
        </member>
        <member name="M:DVBServices.NagraGuideController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process NagraGuide data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.NagraGuideController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process NagraGuide data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.NagraGuideController.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVChannel">
            <summary>
            The class that defines an OpenTV channel.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannel.Type">
            <summary>
            Get or set the channel type.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannel.TitleData">
            <summary>
            Get the title data for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannel.SummaryData">
            <summary>
            Get the summary data for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannel.SuspectTimeTitleData">
            <summary>
            Get the suspect program times for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannel.CategoryEntries">
            <summary>
            Get the collection of OpenTV category records.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVChannel.#ctor">
            <summary>
            Initialize a new instance of the OpenTVChannel class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVChannel.AddTitleData(DVBServices.OpenTVTitleData)">
            <summary>
            Add title data to the channel.
            </summary>
            <param name="newTitleData">The title data to be added.</param>
        </member>
        <member name="M:DVBServices.OpenTVChannel.AddSummaryData(DVBServices.OpenTVSummaryData)">
            <summary>
            Add summary data to the channel.
            </summary>
            <param name="newSummaryData"></param>
        </member>
        <member name="M:DVBServices.OpenTVChannel.AddChannel(DVBServices.OpenTVChannel)">
            <summary>
            Add a channel to the collection.
            </summary>
            <param name="newChannel">The channel to be added.</param>
        </member>
        <member name="M:DVBServices.OpenTVChannel.ProcessChannelForEPG(DomainObjects.TVStation,DomainObjects.Logger,DomainObjects.Logger,DomainObjects.Logger,DomainObjects.Logger)">
            <summary>
            Create the EPG entries from the stored title and summary data.
            </summary>
            <param name="station">The station that the EPG records are for.</param>
            <param name="titleLogger">A Logger instance for the program titles.</param>
            <param name="descriptionLogger">A Logger instance for the program descriptions.</param>
            <param name="extendedDescriptionLogger">A Logger instance for the extended program descriptions.</param>
            <param name="undefinedRecordLogger">A Logger instance for the undefined records.</param>
        </member>
        <member name="M:DVBServices.OpenTVChannel.ChannelCountByBouquet(System.Int32)">
            <summary>
            Get the count of channels for a bouquet.
            </summary>
            <param name="bouquetID">The bouquet ID.</param>
            <returns>The number of channels defined for the bouquet.</returns>
        </member>
        <member name="T:DVBServices.OpenTVChannelGroupDescriptor">
            <summary>
            Open TV Channel Group descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelGroupDescriptor.Type">
            <summary>
            Get the type.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelGroupDescriptor.Flags">
            <summary>
            Get the flags.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelGroupDescriptor.Group">
            <summary>
            Get the group number.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelGroupDescriptor.Description">
            <summary>
            Get the description.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelGroupDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVChannelGroupDescriptor.#ctor">
            <summary>
            Initialize a new instance of the OpenTVChannelGroupDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVChannelGroupDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.OpenTVChannelGroupDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVChannelGroupDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVChannelInfoDescriptor">
            <summary>
            Open TV Channel Info descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoDescriptor.Region">
            <summary>
            Get the region number.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoDescriptor.ChannelInfoEntries">
            <summary>
            Get the collection of channel entries.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVChannelInfoDescriptor.#ctor">
            <summary>
            Initialize a new instance of the OpenTVChannelInfoDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVChannelInfoDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.OpenTVChannelInfoDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVChannelInfoDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVChannelInfoEntry">
            <summary>
            The class that describes an OpenTV channel info entry.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoEntry.ServiceID">
            <summary>
            Get the service ID for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoEntry.ChannelID">
            <summary>
            Get the channel ID of the channel.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoEntry.UserNumber">
            <summary>
            Get the user channel number for the channel.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoEntry.Type">
            <summary>
            Get the type of channel.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoEntry.Flags">
            <summary>
            Get the channel flags.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoEntry.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="P:DVBServices.OpenTVChannelInfoEntry.Length">
            <summary>
            Get the length of the entry.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVChannelInfoEntry.#ctor">
            <summary>
            Initialize a new instance of the OpenTVChannelInfoEntry.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVChannelInfoEntry.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.OpenTVChannelInfoEntry.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVChannelInfoEntry.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVController">
            <summary>
            The class that controls the acquisition and processing of Open TV data.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVController.AllDataProcessed">
            <summary>
            Return true if all data has been processed; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVController.#ctor">
            <summary>
            Initialize a new instance of the OpenTVController class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVController.Stop">
            <summary>
            Stop acquiring and processing data.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process OpenTV data.
            </summary>
            <param name="dataProvider">A sampe data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.OpenTVController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process OpenTV data.
            </summary>
            <param name="dataProvider">A sampe data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.OpenTVController.ProcessBouquetSections">
            <summary>
            Process the bouquet data.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVController.FinishFrequency">
            <summary>
            Carry out the processing after all data has been collected for a frequency.
            </summary>
        </member>
        <member name="T:DVBServices.SingleTreeDictionaryEntry">
            <summary>
            The class that describes a dictionary entry for a single tree Huffman scenario.
            </summary>
        </member>
        <member name="P:DVBServices.SingleTreeDictionaryEntry.OffsetStart">
            <summary>
            Get or set the flag for not starting at the first bit in the compressed string.
            </summary>
        </member>
        <member name="P:DVBServices.SingleTreeDictionaryEntry.Decode">
            <summary>
            Get the decode string.
            </summary>
        </member>
        <member name="M:DVBServices.SingleTreeDictionaryEntry.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the SingleTreeDictionaryEntry class.
            </summary>
            <param name="pattern">The Huffman bit pattern.</param>
            <param name="decode">The decode for the bit pattern.</param>
        </member>
        <member name="M:DVBServices.SingleTreeDictionaryEntry.Load(System.String)">
            <summary>
            Load the dictionary entries ino the first root.
            </summary>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.SingleTreeDictionaryEntry.Load(System.String,System.Int32)">
            <summary>
            Load the dictionary entries.
            </summary>
            <returns>True if the file has been loaded; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.SingleTreeDictionaryEntry.DecodeData(System.Byte[])">
            <summary>
            Decompress a compressed Huffman string using the first root table.
            </summary>
            <param name="byteData">The compressed byte data.</param>
            <returns>The decompressed string.</returns>
        </member>
        <member name="M:DVBServices.SingleTreeDictionaryEntry.DecodeData(System.Int32,System.Byte[])">
            <summary>
            Decompress a compressed Huffman string.
            </summary>
            <param name="rootNumber">The root table to use.</param>
            <param name="byteData">The compressed byte data.</param>
            <returns>The decompressed string.</returns>
        </member>
        <member name="T:DVBServices.OpenTVExtendedDescriptionRecord">
            <summary>
            The class that describes an OpenTV extended description record.
            </summary>
        </member>
        <member name="F:DVBServices.OpenTVExtendedDescriptionRecord.TagValue">
            <summary>
            Get the tag value for this record.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVExtendedDescriptionRecord.Description">
            <summary>
            Get the extended description.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVExtendedDescriptionRecord.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the record.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The record has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVExtendedDescriptionRecord.#ctor">
            <summary>
            Initialize a new instance of the OpenTVExtendedDescriptionRecord class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVExtendedDescriptionRecord.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the record.
            </summary>
            <param name="byteData">The MPEG2 section containing the record.</param>
            <param name="index">Index of the first byte of the record data in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.OpenTVExtendedDescriptionRecord.Validate">
            <summary>
            Validate the record data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A record data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVExtendedDescriptionRecord.LogMessage">
            <summary>
            Log the record data fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVHuffmanEntry">
            <summary>
            The class that describes a Huffman dictionary entry.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVHuffmanEntry.P0">
            <summary>
            Get or set the zero bit link.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVHuffmanEntry.P1">
            <summary>
            Get or set the one bit link.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVHuffmanEntry.Value">
            <summary>
            Get or set the entry value.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVHuffmanEntry.#ctor">
            <summary>
            Intialize a new instance of the OpenTVHuffmanEntry.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVRecordBase">
            <summary>
            The base OpenTV record class.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVRecordBase.Tag">
            <summary>
            Get the tag of the record.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVRecordBase.Length">
            <summary>
            Get the length of the record data.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVRecordBase.Data">
            <summary>
            Get the record data.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVRecordBase.TotalLength">
            <summary>
            Get the total length of the record.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVRecordBase.IsUndefined">
            <summary>
            Return true if the record is undefined; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVRecordBase.UnknownRecords">
            <summary>
            Return the collection of unknown records.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVRecordBase.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following this record.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVRecordBase.Instance(System.Byte[],System.Int32)">
            <summary>
            Create an instance of the record class.
            </summary>
            <param name="byteData">The MPEG2 section containing the record.</param>
            <param name="index">The index of the tag byte of the record.</param>
            <returns>A descriptor instance.</returns>
        </member>
        <member name="M:DVBServices.OpenTVRecordBase.#ctor">
            <summary>
            Initialize a new instance of the OpenTVRecordBase class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVRecordBase.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the record.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.OpenTVRecordBase.Validate">
            <summary>
            Validate the record fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A record field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVRecordBase.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVSeriesLinkRecord">
            <summary>
            The class that describes an OpenTV series link record.
            </summary>
        </member>
        <member name="F:DVBServices.OpenTVSeriesLinkRecord.TagValue">
            <summary>
            Get the tag value for this record.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSeriesLinkRecord.SeriesLink">
            <summary>
            Get the series link.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSeriesLinkRecord.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the record.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The record has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVSeriesLinkRecord.#ctor">
            <summary>
            Initialize a new instance of the OpenTVSeriesLinkRecord class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVSeriesLinkRecord.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the record.
            </summary>
            <param name="byteData">The MPEG2 section containing the record.</param>
            <param name="index">Index of the first byte of the record data in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.OpenTVSeriesLinkRecord.Validate">
            <summary>
            Validate the record data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A record data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVSeriesLinkRecord.LogMessage">
            <summary>
            Log the record data fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVShortDescriptionRecord">
            <summary>
            The class that describes an OpenTV short description record.
            </summary>
        </member>
        <member name="F:DVBServices.OpenTVShortDescriptionRecord.TagValue">
            <summary>
            Get the tag value for this record.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVShortDescriptionRecord.Description">
            <summary>
            Get the short description.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVShortDescriptionRecord.DescriptionBytes">
            <summary>
            Get the short description bytes.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVShortDescriptionRecord.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the record.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The record has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVShortDescriptionRecord.#ctor">
            <summary>
            Initialize a new instance of the OpenTVShortDescriptionRecord class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVShortDescriptionRecord.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the record.
            </summary>
            <param name="byteData">The MPEG2 section containing the record.</param>
            <param name="index">Index of the first byte of the record data in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.OpenTVShortDescriptionRecord.Validate">
            <summary>
            Validate the record data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A record data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVShortDescriptionRecord.LogMessage">
            <summary>
            Log the record data fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVSummaryData">
            <summary>
            The class that describes Open TV summary data.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryData.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryData.ShortDescription">
            <summary>
            Get the short description of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryData.ShortDescriptionBytes">
            <summary>
            Get the raw bytes of short description of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryData.ExtendedDescription">
            <summary>
            Get the extended description of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryData.SeriesLink">
            <summary>
            Get the series link of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryData.Records">
            <summary>
            Get the collection of records for this summary section.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryData.UndefinedRecords">
            <summary>
            Get the collection of undefined records for this summary section.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryData.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the summary data.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The summary data has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVSummaryData.#ctor">
            <summary>
            Initialize a new instance of the OpenTVSummaryData class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVSummaryData.Process(System.Byte[],System.Int32,System.DateTime)">
            <summary>
            Parse the summary data.
            </summary>
            <param name="byteData">The MPEG2 section containing the summary data.</param>
            <param name="index">Index of the first byte of the summary data in the MPEG2 section.</param>
            <param name="baseDate">The base date for the program events.</param>
        </member>
        <member name="M:DVBServices.OpenTVSummaryData.Validate">
            <summary>
            Validate the summary data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A summary data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVSummaryData.LogMessage">
            <summary>
            Log the summary data fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVSummaryHeader">
            <summary>
            The class that describes an Open TV summary header.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryHeader.ChannelID">
            <summary>
            Get the channel identification.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryHeader.BaseDate">
            <summary>
            Get the title date base.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryHeader.SummaryData">
            <summary>
            Get the data collection related to this summary.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummaryHeader.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the summary header.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The summary header has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVSummaryHeader.#ctor">
            <summary>
            Initialize a new instance of the OpenTVSummaryHeader class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVSummaryHeader.Process(System.Byte[],System.Int32,DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the summary header.
            </summary>
            <param name="byteData">The MPEG2 section containing the summary header.</param>
            <param name="index">Index of the first byte of the summary header in the MPEG2 section.</param>
            <param name="mpeg2Header">The MPEG2 header of the section.</param>
        </member>
        <member name="M:DVBServices.OpenTVSummaryHeader.Validate">
            <summary>
            Validate the summary header fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A summary header field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVSummaryHeader.LogMessage">
            <summary>
            Log the summary header fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVSummarySection">
            <summary>
            The class that describes an Open TV Summary section.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummarySection.OpenTVSummarySections">
            <summary>
            Get the collection of Open TV Title sections.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummarySection.SectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummarySection.LastSectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVSummarySection.SummaryHeader">
            <summary>
            Get the title header.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVSummarySection.#ctor">
            <summary>
            Initialize a new instance of the OpenTVSummarySection class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVSummarySection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.OpenTVSummarySection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVSummarySection.ProcessOpenTVSummaryTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the Open TV Summary table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>An Open TV Summary Section instance.</returns>
        </member>
        <member name="M:DVBServices.OpenTVSummarySection.AddSection(DVBServices.OpenTVSummarySection)">
            <summary>
            Add a section to the collection.
            </summary>
            <param name="newSection">The section to be added.</param>
        </member>
        <member name="T:DVBServices.OpenTVProgramCategory">
            <summary>
            The class that describes an OpenTV program category.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVProgramCategory.Categories">
            <summary>
            Get the collection of program categories.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVProgramCategory.UndefinedCategories">
            <summary>
            Get the collection of undefined categories.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVProgramCategory.FileName">
            <summary>
            Get the standard file name.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.#ctor">
            <summary>
            Initialize a new instance of the OpenTVProgramCategory class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.FindCategory(System.String)">
            <summary>
            Find a category.
            </summary>
            <param name="categoryTag">The category tag.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.FindCategory(System.Int32)">
            <summary>
            Find a category.
            </summary>
            <param name="category">The category.</param>
            <returns>A category instance or null if the category is undefined.</returns>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.AddCategory(System.Int32,System.String)">
            <summary>
            Add a category.
            </summary>
            <param name="category">The category.</param>
            <param name="description">The full category description.</param>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.Load(System.String)">
            <summary>
            Load the categories from the standard file.        
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.Load(System.String,System.String)">
            <summary>
            Load the categories from a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <param name="countryCode">The country code.</param>
            <returns>True if load was successful; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.Save(System.String)">
            <summary>
            Save the categories to a specified file.
            </summary>
            <param name="fileName">The specied filename.</param>
            <returns>Error message if it failed; null otherwise.</returns>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.AddUndefinedCategory(System.Int32,System.String)">
            <summary>
            Add an undefined category to the collection of undefined contents.
            </summary>
            <param name="category">The category.</param>
            <param name="sampleEvent">The description of a sample event.</param>
        </member>
        <member name="M:DVBServices.OpenTVProgramCategory.GetCategory(DVBServices.EventInformationTableEntry)">
            <summary>
            Get the category for an event.
            </summary>
            <param name="eventEntry">The event entry.</param>
            <returns>A category instance or null.</returns>
        </member>
        <member name="T:DVBServices.OpenTVTitleData">
            <summary>
            The class that describes Open TV title data.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.EventID">
            <summary>
            Get the event identification.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.StartTime">
            <summary>
            Get the start time of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.Duration">
            <summary>
            Get the duration of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.CategoryID">
            <summary>
            Get the theme identification of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.EventName">
            <summary>
            Get the name of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.EventNameBytes">
            <summary>
            Get the raw bytes of the event name.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.Flags">
            <summary>
            Get the flags field of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.Records">
            <summary>
            Get the collection of records for this title section.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.UndefinedRecords">
            <summary>
            Get the collection of undefined records for this title section.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.IsEmpty">
            <summary>
            Return true if the entry is empty; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.PID">
            <summary>
            Get the PID of the section containing the data.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.Table">
            <summary>
            Get the table ID of the section containing the data.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.TimeStamp">
            <summary>
            Get the timestamp when the data arrived.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleData.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the title data.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The title data has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVTitleData.#ctor">
            <summary>
            Initialize a new instance of the OpenTVTitleData class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVTitleData.Process(System.Byte[],System.Int32,System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Parse the title data.
            </summary>
            <param name="byteData">The MPEG2 section containing the title data.</param>
            <param name="index">Index of the first byte of the title data in the MPEG2 section.</param>
            <param name="baseDate">The base date for the programs.</param>
            <param name="channel">The channel for the data.</param>
            <param name="pid">The PID of the section.</param>
            <param name="table">The table ID of the section.</param> 
        </member>
        <member name="M:DVBServices.OpenTVTitleData.Validate">
            <summary>
            Validate the title data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A title data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVTitleData.LogMessage">
            <summary>
            Log the title data fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVTitleDataRecord">
            <summary>
            The class that describes an OpenTV title data record.
            </summary>
        </member>
        <member name="F:DVBServices.OpenTVTitleDataRecord.TagValue">
            <summary>
            Get the tag value for this record.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleDataRecord.StartTimeOffset">
            <summary>
            Get the start time of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleDataRecord.Duration">
            <summary>
            Get the duration of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleDataRecord.CategoryID">
            <summary>
            Get the theme identification of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleDataRecord.Flags">
            <summary>
            Get the flags field of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleDataRecord.EventName">
            <summary>
            Get the name of the event.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleDataRecord.DecodedEventName">
            <summary>
            Get the decompressed event name.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleDataRecord.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the record.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The record has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVTitleDataRecord.#ctor">
            <summary>
            Initialize a new instance of the OpenTVTitleDataRecord class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVTitleDataRecord.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the record.
            </summary>
            <param name="byteData">The MPEG2 section containing the record.</param>
            <param name="index">Index of the first byte of the record data in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.OpenTVTitleDataRecord.Validate">
            <summary>
            Validate the record data fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A record data field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVTitleDataRecord.LogMessage">
            <summary>
            Log the record data fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVTitleHeader">
            <summary>
            The class that describes an Open TV title header.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleHeader.ChannelID">
            <summary>
            Get the channel identification.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleHeader.BaseDate">
            <summary>
            Get the title date base.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleHeader.TitleData">
            <summary>
            Get the data collection related to this title.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleHeader.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the title header.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The title header has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.OpenTVTitleHeader.#ctor">
            <summary>
            Initialize a new instance of the OpenTVTitleHeader class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVTitleHeader.Process(System.Byte[],System.Int32,DVBServices.Mpeg2ExtendedHeader,System.Int32,System.Int32)">
            <summary>
            Parse the title header.
            </summary>
            <param name="byteData">The MPEG2 section containing the title header.</param>
            <param name="index">Index of the first byte of the title header in the MPEG2 section.</param>
            <param name="mpeg2Header">The MPEG2 header of the section.</param>
            <param name="pid">The PID of the section.</param>
            <param name="tid">The table ID of the section.</param>
        </member>
        <member name="M:DVBServices.OpenTVTitleHeader.Validate">
            <summary>
            Validate the title header fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A title header field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.OpenTVTitleHeader.LogMessage">
            <summary>
            Log the title header fields.
            </summary>
        </member>
        <member name="T:DVBServices.OpenTVTitleSection">
            <summary>
            The class that describes an Open TV Title section.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleSection.SectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleSection.LastSectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.OpenTVTitleSection.TitleHeader">
            <summary>
            Get the title header.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVTitleSection.#ctor">
            <summary>
            Initialize a new instance of the OpenTVTitleSection class.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVTitleSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader,System.Int32,System.Int32)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
            <param name="pid">The PID containing the section.</param>
            <param name="tid">The table ID containing the section.</param>
        </member>
        <member name="M:DVBServices.OpenTVTitleSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.OpenTVTitleSection.ProcessOpenTVTitleTable(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Process an MPEG2 section from the Open TV Title table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <param name="pid">The PID containing the section.</param>
            <param name="table">The table ID containing the section.</param>
            <returns>An Open TV Title Section instance or null if a section is not created.</returns>
        </member>
        <member name="T:DVBServices.ProgramAssociationSection">
            <summary>
            The class that describes the program association section.
            </summary>
        </member>
        <member name="P:DVBServices.ProgramAssociationSection.TransportStreamID">
            <summary>
            Get the transport stream identification (TSID).
            </summary>
        </member>
        <member name="P:DVBServices.ProgramAssociationSection.SectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="P:DVBServices.ProgramAssociationSection.LastSectionNumber">
            <summary>
            Get the last section number.
            </summary>
        </member>
        <member name="P:DVBServices.ProgramAssociationSection.ProgramInfos">
            <summary>
            Get the collection of program information objects for the transport stream ID.
            </summary>
        </member>
        <member name="M:DVBServices.ProgramAssociationSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.ProgramAssociationSection.Validate">
            <summary>
            Validate the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.ProgramAssociationSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.ProgramAssociationSection.ProcessProgramAssociationTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the program association table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A ProgramAssociationSection instance.</returns>
        </member>
        <member name="T:DVBServices.ProgramInfo">
            <summary>
            The class that describes the program information.
            </summary>
        </member>
        <member name="P:DVBServices.ProgramInfo.ProgramNumber">
            <summary>
            Get the program number.
            </summary>
        </member>
        <member name="P:DVBServices.ProgramInfo.ProgramID">
            <summary>
            Get the program identification (PID).
            </summary>
        </member>
        <member name="P:DVBServices.ProgramInfo.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the program information.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The program information has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ProgramInfo.#ctor">
            <summary>
            Initialize a new instance of the ProgramInfo class.
            </summary>
        </member>
        <member name="M:DVBServices.ProgramInfo.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the program information.
            </summary>
            <param name="byteData">The MPEG2 section containing the program information.</param>
            <param name="index">Index of the first byte of the program information in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.ProgramInfo.Validate">
            <summary>
            Validate the program information fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A program information field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ProgramInfo.LogMessage">
            <summary>
            Log the program information fields.
            </summary>
        </member>
        <member name="T:DVBServices.ProgramMapSection">
            <summary>
            The class that describes the program map section.
            </summary>
        </member>
        <member name="P:DVBServices.ProgramMapSection.ServiceID">
            <summary>
            Get the service identification (SID).
            </summary>
        </member>
        <member name="P:DVBServices.ProgramMapSection.Descriptors">
            <summary>
            Get the collection of descriptor objects for the service ID.
            </summary>
        </member>
        <member name="P:DVBServices.ProgramMapSection.StreamInfos">
            <summary>
            Get the collection of stream information objects for the service ID.
            </summary>
        </member>
        <member name="M:DVBServices.ProgramMapSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.ProgramMapSection.Validate">
            <summary>
            Validate the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.ProgramMapSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.ProgramMapSection.ProcessProgramMapTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the program map table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A ProgramMapSection instance.</returns>
        </member>
        <member name="T:DVBServices.OutputFileChannelDefinitions">
            <summary>
            The class that creates the Channel Definitions file.
            </summary>
        </member>
        <member name="M:DVBServices.OutputFileChannelDefinitions.Process">
            <summary>
            Create a souce section in the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DVBServices.OutputFileChannelDefinitions.Finish">
            <summary>
            Complete the file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DVBServices.ServiceDescription">
            <summary>
            The class that describes the service description.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.ServiceID">
            <summary>
            Get the service identification (SID).
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.EITSchedule">
            <summary>
            Returns true if the service provides EPG schedule information; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.EITPresentFollowing">
            <summary>
            Returns true if the service provides next/following EPG information; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.RunningStatus">
            <summary>
            Get the running status of the service.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.Scrambled">
            <summary>
            Return true if the service is encrypted; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.ServiceType">
            <summary>
            Get the service type.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.ProviderName">
            <summary>
            Get the provider name.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.ServiceName">
            <summary>
            Get the service name.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.ChannelNumber">
            <summary>
            Get the channel number.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.CableChannelNumber">
            <summary>
            Get the cable logical channel group number.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.IsDigitalTelevision">
            <summary>
            Return true if the service is a digital television service; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.IsDigitalRadio">
            <summary>
            Return true if the service is a digital radio service; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.IsHDTelevision">
            <summary>
            Return true if the service is an HD television service; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.EPGLink">
            <summary>
            Return the optional EPG link.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.HasEpgLinkage">
            <summary>
            Return true if a linkage descriptor is present for EPG; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.EpgLinkageOnid">
            <summary>
            Get the epg linkage original network ID.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.EpgLinkageTsid">
            <summary>
            Get the epg linkage transport stream ID.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.EpgLinkageSid">
            <summary>
            Get the epg linkage service ID.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.OpenTVChannelGroup">
            <summary>
            Get the OpenTV channel group number.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescription.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the service description.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The service description has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ServiceDescription.#ctor">
            <summary>
            Initialize a new instance of the ServiceDescription class.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceDescription.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the service description.
            </summary>
            <param name="byteData">The MPEG2 section containing the service description.</param>
            <param name="index">Index of the first byte of the service description in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.ServiceDescription.Validate">
            <summary>
            Validate the service description fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A service description field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ServiceDescription.LogMessage">
            <summary>
            Log the service description fields.
            </summary>
        </member>
        <member name="T:DVBServices.ServiceDescriptionSection">
            <summary>
            The class that describes a Service Description section.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescriptionSection.OriginalNetworkID">
            <summary>
            Get the original network identification (ONID).
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescriptionSection.TransportStreamID">
            <summary>
            Get the tansport stream identification (TSID).
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescriptionSection.ServiceDescriptions">
            <summary>
            Get the collection of service descriptions in the section.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceDescriptionSection.SectionNumber">
            <summary>
            Get the section number.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceDescriptionSection.#ctor">
            <summary>
            Initialize a new instance of the ServiceDescriptionSection class.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceDescriptionSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.ServiceDescriptionSection.Validate">
            <summary>
            Validate the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceDescriptionSection.LogMessage">
            <summary>
            Log the section fields.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceDescriptionSection.ProcessServiceDescriptionTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the service description table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A ServiceDescriptionSection instance.</returns>
        </member>
        <member name="T:DVBServices.ServiceGatewayInfo">
            <summary>
            The class that describes the Service Gateway information.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceGatewayInfo.IOPIOR">
            <summary>
            Get the IOP:IOR.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceGatewayInfo.Taps">
            <summary>
            Get the collection of taps.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceGatewayInfo.ServiceContexts">
            <summary>
            Get the collection of service contexts.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceGatewayInfo.UserInfoLength">
            <summary>
            Get the length of the user information.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceGatewayInfo.UserInfo">
            <summary>
            Get the user information.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceGatewayInfo.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the service gateway information.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The information has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ServiceGatewayInfo.#ctor">
            <summary>
            Initialize a new instance of the ServiceGatewayInfo class.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceGatewayInfo.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the gateway information.
            </summary>
            <param name="byteData">The MPEG2 section containing the gateway information.</param>
            <param name="index">Index of the byte in the MPEG2 section following the gateway information.</param>
        </member>
        <member name="M:DVBServices.ServiceGatewayInfo.Validate">
            <summary>
            Validate the gateway information fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            An information field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ServiceGatewayInfo.LogMessage">
            <summary>
            Log the gateway information fields.
            </summary>
        </member>
        <member name="T:DVBServices.DVBShortEventDescriptor">
            <summary>
            DVB Short Event descriptor class.
            </summary>
        </member>
        <member name="P:DVBServices.DVBShortEventDescriptor.EventName">
            <summary>
            Get the event name.
            </summary>
        </member>
        <member name="P:DVBServices.DVBShortEventDescriptor.ShortDescription">
            <summary>
            Get the short description.
            </summary>
        </member>
        <member name="P:DVBServices.DVBShortEventDescriptor.LanguageCode">
            <summary>
            Get the language code.
            </summary>
        </member>
        <member name="P:DVBServices.DVBShortEventDescriptor.Index">
            <summary>
            Get the index of the next byte in the EIT section following this descriptor.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The descriptor has not been processed.
            </exception>        
        </member>
        <member name="M:DVBServices.DVBShortEventDescriptor.#ctor">
            <summary>
            Initialize a new instance of the DVBShortEventDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.DVBShortEventDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the descriptor.</param>
            <param name="index">Index of the byte in the MPEG2 section following the descriptor length.</param>
        </member>
        <member name="M:DVBServices.DVBShortEventDescriptor.Validate">
            <summary>
            Validate the descriptor fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.DVBShortEventDescriptor.LogMessage">
            <summary>
            Log the descriptor fields.
            </summary>
        </member>
        <member name="T:DVBServices.StreamInfo">
            <summary>
            The class that describes the stream information.
            </summary>
        </member>
        <member name="P:DVBServices.StreamInfo.StreamType">
            <summary>
            Get the stream type.
            </summary>
        </member>
        <member name="P:DVBServices.StreamInfo.ElementaryPid">
            <summary>
            Get the elementary PID.
            </summary>
        </member>
        <member name="P:DVBServices.StreamInfo.Descriptors">
            <summary>
            Get the collection of descriptors.
            </summary>
        </member>
        <member name="P:DVBServices.StreamInfo.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the stream informationn.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream information has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.StreamInfo.#ctor">
            <summary>
            Initialize a new instance of the StreamInfo class.
            </summary>
        </member>
        <member name="M:DVBServices.StreamInfo.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the stream information.
            </summary>
            <param name="byteData">The MPEG2 section containing the stream information.</param>
            <param name="index">Index of the first byte of the stream information in the MPEG2 section.</param>
        </member>
        <member name="M:DVBServices.StreamInfo.Validate">
            <summary>
            Validate the stream information fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A stream information field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.StreamInfo.LogMessage">
            <summary>
            Log the stream Information fields.
            </summary>
        </member>
        <member name="T:DVBServices.TimeOffsetEntry">
            <summary>
            The class that describes a time offset entry.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.TimeOffsets">
            <summary>
            Get the collection of time offset entries.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.CurrentTimeOffset">
            <summary>
            Get or set the current time offset.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.FutureTimeOffset">
            <summary>
            Get or set the next time offset.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.TimeOfFutureTimeOffset">
            <summary>
            Get or set the time that the next time offset will come into force.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.CountryCode">
            <summary>
            Get or set the country code.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.Region">
            <summary>
            Get or set the region.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.TimeOffset">
            <summary>
            Get or set the time offset.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.ChangeTime">
            <summary>
            Get or set the time of the next change.
            </summary>
        </member>
        <member name="P:DVBServices.TimeOffsetEntry.NextTimeOffset">
            <summary>
            Get or set the next time offset.
            </summary>
        </member>
        <member name="M:DVBServices.TimeOffsetEntry.#ctor">
            <summary>
            Initialize a new instance of the TimeOffsetEntry.
            </summary>
        </member>
        <member name="M:DVBServices.TimeOffsetEntry.AddEntry(DVBServices.TimeOffsetEntry)">
            <summary>
            Add a time offset entry to the collection.
            </summary>
            <param name="newEntry">The entry to be added.</param>
        </member>
        <member name="M:DVBServices.TimeOffsetEntry.FindEntry(System.String,System.Int32)">
            <summary>
            Find a time offset entry.
            </summary>
            <param name="countryCode">The country code.</param>
            <param name="region">The region code.</param>
            <returns>A time offset entry or null if it cannot be located.</returns>
        </member>
        <member name="M:DVBServices.TimeOffsetEntry.GetAdjustedTime(System.DateTime)">
            <summary>
            Adjust a GMT time using the correct time offset.
            </summary>
            <param name="gmtStartTime">The GMT time.</param>
            <returns>The adjusted time.</returns>
        </member>
        <member name="M:DVBServices.TimeOffsetEntry.GetOffsetTime(System.DateTime)">
            <summary>
            Adjust a time using the run parameters time offset.
            </summary>
            <param name="time">The input time.</param>
            <returns>The adjusted time.</returns>
        </member>
        <member name="T:DVBServices.TimeOffsetSection">
            <summary>
            The class that describes a Time Offset section.
            </summary>
        </member>
        <member name="M:DVBServices.TimeOffsetSection.#ctor">
            <summary>
            Initialize a new instance of the TimeOffsetSection class.
            </summary>
        </member>
        <member name="M:DVBServices.TimeOffsetSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.TimeOffsetSection.ProcessTimeOffsetTable(System.Byte[])">
            <summary>
            Process an MPEG2 section from the time offset table.
            </summary>
            <param name="byteData">The MPEG2 section.</param>
            <returns>A TimeOffsetSection instance.</returns>
        </member>
        <member name="T:DVBServices.TransportStream">
            <summary>
            The class that describes a transport stream.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.TransportStreamID">
            <summary>
            Get the transport strema identification (TSID).
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.OriginalNetworkID">
            <summary>
            Get the original network identification (ONID).
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.Descriptors">
            <summary>
            Get the collection of descriptors describing this transport stream.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.TotalLength">
            <summary>
            Get the total length of the transport stream data.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.Frequency">
            <summary>
            Get the frequency.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.Fec">
            <summary>
            Get the inner FEC rate.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.Modulation">
            <summary>
            Get the modulation.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.ModulationSystem">
            <summary>
            Get the modulation system.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.OrbitalPosition">
            <summary>
            Get the orbital position.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.IsS2">
            <summary>
            Return true if the modulation system is S2; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.IsT2">
            <summary>
            Returns true if the transport stream is T2; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.Polarization">
            <summary>
            Get the polarization.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.RollOff">
            <summary>
            Get the S2 roll off.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.SymbolRate">
            <summary>
            Get the symbol rate.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.Bandwidth">
            <summary>
            Get the bandwidth.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.CableSymbolRate">
            <summary>
            Get the symbol rate for a cable transport stream.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.CableFec">
            <summary>
            Get the cable inner FEC rate.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.CableModulation">
            <summary>
            Get the cable modulation.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.ServiceList">
            <summary>
            Get the service list for this transport stream.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.IsSatellite">
            <summary>
            Returns true if the transport stream is satellite; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.IsTerrestrial">
            <summary>
            Returns true if the transport stream is terrestrial; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.IsCable">
            <summary>
            Returns true if the transport stream is cable; false otherwise.
            </summary>
        </member>
        <member name="P:DVBServices.TransportStream.Index">
            <summary>
            Get the index of the next byte in the MPEG2 section following the transport stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The transport stream has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.TransportStream.#ctor">
            <summary>
            Initialize a new instance of the TransportStream class.
            </summary>
        </member>
        <member name="M:DVBServices.TransportStream.Process(System.Byte[],System.Int32,DVBServices.Scope)">
            <summary>
            Parse the entry.
            </summary>
            <param name="byteData">The MPEG2 section containing the transport stream.</param>
            <param name="index">Index of the first byte of the transport stream in the MPEG2 section.</param>
            <param name="scope">The scope of the processing..</param>
        </member>
        <member name="M:DVBServices.TransportStream.Validate">
            <summary>
            Validate the transport stream fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A transport stream field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.TransportStream.LogMessage">
            <summary>
            Log the transport stream fields.
            </summary>
        </member>
        <member name="M:DVBServices.TransportStream.CheckForService(System.Int32)">
            <summary>
            Check if service exists.
            </summary>
            <param name="serviceId">The service to search for.</param>
            <returns>True if the service is present; false otherwise.</returns>
        </member>
        <member name="T:DVBServices.ServiceChannelDescriptor">
            <summary>
            The class that describes a Channel descriptor that occurs in the SDT.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceChannelDescriptor.ChannelNumber">
            <summary>
            Get the  channel number.
            </summary>
        </member>
        <member name="P:DVBServices.ServiceChannelDescriptor.Index">
            <summary>
            Get the index of the next byte in the section following this entry.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The entry has not been processed.
            </exception> 
        </member>
        <member name="M:DVBServices.ServiceChannelDescriptor.#ctor">
            <summary>
            Initialize a new instance of the ServiceChannelDescriptor class.
            </summary>
        </member>
        <member name="M:DVBServices.ServiceChannelDescriptor.Process(System.Byte[],System.Int32)">
            <summary>
            Parse the descriptor.
            </summary>
            <param name="byteData">The MPEG2 section containing the entry.</param>
            <param name="index">Index of the first byte in the MPEG2 section of the entry.</param>
        </member>
        <member name="M:DVBServices.ServiceChannelDescriptor.Validate">
            <summary>
            Validate the entry fields.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A descriptor field is not valid.
            </exception>
        </member>
        <member name="M:DVBServices.ServiceChannelDescriptor.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.SiehFernInfoChannelSection">
            <summary>
            The class that describes an SiehFern Info Channel section.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoChannelSection.Sections">
            <summary>
            Get the collection of Channel sections.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoChannelSection.SequenceNumber">
            <summary>
            Get the block sequence number.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoChannelSection.#ctor">
            <summary>
            Initialize a new instance of the SiehFernInfoChannelSection class.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoChannelSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.SiehFernInfoChannelSection.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoChannelSection.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.SiehFernInfoController">
            <summary>
            The class that controls the acquisition and processing of SiehFern Info data.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoController.CollectionType">
            <summary>
            Get the collection type supported by this collector.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoController.AllDataProcessed">
            <summary>
            Return true if the EIT data is complete; false otherwise.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoController.#ctor">
            <summary>
            Initialize a new instance of the SiehFernInfoController class.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoController.Stop">
            <summary>
            Stop acquiring and processing EIT data.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker)">
            <summary>
            Acquire and process Siehfern Info data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.SiehFernInfoController.Process(DomainObjects.ISampleDataProvider,System.ComponentModel.BackgroundWorker,DomainObjects.CollectionSpan)">
            <summary>
            Acquire and process Siehfern Info data.
            </summary>
            <param name="dataProvider">A sample data provider.</param>
            <param name="worker">The background worker that is running this collection.</param>
            <param name="collectionSpan">The amount of data to collect.</param>
            <returns>A CollectorReply code.</returns>
        </member>
        <member name="M:DVBServices.SiehFernInfoController.FinishFrequency">
            <summary>
            Create the EPG entries.
            </summary>
        </member>
        <member name="T:DVBServices.SiehFernInfoEPGSection">
            <summary>
            The class that describes an SiehFern Info EPG section.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoEPGSection.Sections">
            <summary>
            Get the collection of EPG entries in the section.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoEPGSection.Unknown">
            <summary>
            Get the unknown data.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoEPGSection.SequenceNumber">
            <summary>
            Get the block sequence number.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoEPGSection.SequenceCount">
            <summary>
            Get the maximum block sequence number.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoEPGSection.TableIdExtension">
            <summary>
            Get the maximum block sequence number.
            </summary>
        </member>
        <member name="P:DVBServices.SiehFernInfoEPGSection.Data">
            <summary>
            Get the EPG data.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoEPGSection.#ctor">
            <summary>
            Initialize a new instance of the SiehFernInfoEPGSection class.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoEPGSection.Process(System.Byte[],DVBServices.Mpeg2ExtendedHeader)">
            <summary>
            Parse the section.
            </summary>
            <param name="byteData">The MPEG2 section containing the section.</param>
            <param name="mpeg2Header">The MPEG2 header that preceedes the section.</param>
        </member>
        <member name="M:DVBServices.SiehFernInfoEPGSection.Validate">
            <summary>
            Validate the entry fields.
            </summary>
        </member>
        <member name="M:DVBServices.SiehFernInfoEPGSection.LogMessage">
            <summary>
            Log the entry fields.
            </summary>
        </member>
        <member name="T:DVBServices.Utils">
            <summary>
            General utility methods.
            </summary>
        </member>
        <member name="P:DVBServices.Utils.AssemblyVersion">
            <summary>
            Get the full assembly version number.
            </summary>
        </member>
        <member name="P:DVBServices.Utils.FormattingBytes">
            <summary>
            Get the control codes that were in the broadcast data.
            </summary>
        </member>
        <member name="P:DVBServices.Utils.EscapeCount">
            <summary>
            Get the number of escape sequences.
            </summary>
        </member>
        <member name="M:DVBServices.Utils.Convert2BytesToInt(System.Byte[],System.Int32)">
            <summary>
            Convert 2 bytes to an integer with the most significant byte first.
            </summary>
            <param name="byteData">The byte array containing the byes to convert.</param>
            <param name="index">The index of the first byte in the array.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.Convert2BytesToInt(System.Byte[],System.Int32,System.Byte)">
            <summary>
            Convert 2 bytes to an integer with the most significant byte first and a mask.
            </summary>
            <param name="byteData">The byte array containing the byes to convert.</param>
            <param name="index">The index of the first byte in the array.</param>
            <param name="mask">The mask for the most significant byte.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.Convert4BytesToInt(System.Byte[],System.Int32)">
            <summary>
            Convert 4 bytes to an integer with the most significant byte first.
            </summary>
            <param name="byteData">The byte array containing the byes to convert.</param>
            <param name="index">The index of the first byte in the array.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.Convert8BytesToLong(System.Byte[],System.Int32)">
            <summary>
            Convert 8 bytes to a long with the most significant byte first.
            </summary>
            <param name="byteData">The byte array containing the byes to convert.</param>
            <param name="index">The index of the first byte in the array.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.ConvertBCDToInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a BCD encoded string of bytes to an integer.
            </summary>
            <param name="byteData">The bytes to be converted.</param>
            <param name="index">Offset to the first byte.</param>
            <param name="count">The number of BCD nibbles to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.ConvertToHex(System.Int32)">
            <summary>
            Convert an integer value to a hex string.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.ConvertToHex(System.Byte[])">
            <summary>
            Convert a string of bytes to a hex string.
            </summary>
            <param name="inputChars">The string to be converted.</param>
            <returns>The string of hex characters.</returns>
        </member>
        <member name="M:DVBServices.Utils.ConvertToHex(System.Byte[],System.Int32)">
            <summary>
            Convert a string of bytes to a hex string.
            </summary>
            <param name="inputChars">The array holding the bytes to be converted.</param>
            <param name="length">The number of byte to be converted.</param>
            <returns>The string of hex characters.</returns>
        </member>
        <member name="M:DVBServices.Utils.ConvertToHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a string of bytes to a hex string.
            </summary>
            <param name="inputChars">The array holding the bytes to be converted.</param>
            <param name="offset">The the offset to the first byte to be converted.</param> 
            <param name="length">The number of byte to be converted.</param>
            <returns>The string of hex characters.</returns>
        </member>
        <member name="M:DVBServices.Utils.ConvertToBits(System.Byte[])">
            <summary>
            Convert a byte array to a string of 1 and 0;
            </summary>
            <param name="inputChars">The byte array.</param>
            <returns>The byte array with 1 bit represented by each character.</returns>
        </member>
        <member name="M:DVBServices.Utils.ConvertCharByteToInt(System.Byte[])">
            <summary>
            Convert an array of bytes to an integer value.
            </summary>
            <param name="inputBytes">The array of input bytes.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.ConvertCharByteToInt(System.Byte[],System.Byte)">
            <summary>
            Convert an array of bytes to an integer up to a terminating byte.
            </summary>
            <param name="inputBytes">The array of input bytes.</param>
            <param name="terminator">The terminating byte.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.Swap2BytesToInt(System.Byte[],System.Int32)">
            <summary>
            Convert 2 bytes to an integer value with the least significant byte first. 
            </summary>
            <param name="byteData">The array of bytes containg the byte to be converted.</param>
            <param name="index">The index of the first byte.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.Swap4BytesToInt(System.Byte[],System.Int32)">
            <summary>
            Convert 4 bytes to an integer value with the least significant byte first. 
            </summary>
            <param name="byteData">The array of bytes containg the byte to be converted.</param>
            <param name="index">The index of the first byte.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.Swap8BytesToLong(System.Byte[],System.Int32)">
            <summary>
            Convert 8 bytes to a long value with the least significant byte first. 
            </summary>
            <param name="byteData">The array of bytes containg the byte to be converted.</param>
            <param name="index">The index of the first byte.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetUnicodeString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert an array of Unicode bytes to a string.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="offset">The index of the first byte to be converted.</param>
            <param name="length">The number of bytes to be converted.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetAsciiString(System.Byte[])">
            <summary>
            Convert an array of bytes to a string.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetAsciiString(System.Byte[],System.Boolean)">
            <summary>
            Convert an array of bytes to a string conditionally replacing non-Ascii characters.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="replace">True to replace non-Ascii bytes with a space; false to ignore them.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetAsciiString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert an array of bytes to a string.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="offset">Offset to first byte.</param>
            <param name="length">Number of bytes.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a subset of an array of bytes to a string.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="offset">The index of the first byte to be converted.</param>
            <param name="length">The number of bytes to be converted.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetString(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert a subset of an array of bytes to a string.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="offset">The index of the first byte to be converted.</param>
            <param name="length">The number of bytes to be converted.</param>
            <param name="processFormat">The number of bytes to be converted.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetString(System.Byte[],System.Int32,System.Int32,DVBServices.ReplaceMode)">
            <summary>
            Convert a subset of an array of text bytes to a string.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="offset">The index of the first byte to be converted.</param>
            <param name="length">The number of bytes to be converted.</param>
            <param name="replaceMode">Action to be taken for non-Ascii bytes.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.CountControlBytes(System.Byte[])">
            <summary>
            Calculate the number of possible control bytes at the start of a text string.
            </summary>
            <param name="byteData">The string to check.</param>
            <returns>The count of control bytes.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetString(System.Byte[],System.Int32,System.Byte)">
            <summary>
            Convert an array of bytes up to a terminator to a string.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="offset">The index of the first byte to be converted.</param>
            <param name="terminator">The value of the terminator.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetString(System.Byte[],System.String)">
            <summary>
            Convert an array of bytes to a string given an encoding.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="encoding">The type of encoding.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get subset of bytes from an array.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="offset">The index of the first byte of the subset.</param>
            <param name="length">The length of the subset.</param>
            <returns>The subset of bytes.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetBytes(System.Byte[],System.Int32,System.Byte)">
            <summary>
            Get a subset of bytes from an array up to a terminator.
            </summary>
            <param name="byteData">The array of bytes.</param>
            <param name="offset">The index of the first byte of the subset.</param>
            <param name="terminator">The terminating value.</param>
            <returns>The subset of bytes.</returns>
        </member>
        <member name="M:DVBServices.Utils.CompareBytes(System.Byte[],System.Byte[])">
            <summary>
            Compare the bytes of 2 arrays for equality including length.
            </summary>
            <param name="array1">The first array.</param>
            <param name="array2">The second array.</param>
            <returns>Treu if the arrays are equal; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.Utils.CompareBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compare a subset of the bytes of 2 arrays for equality.
            </summary>
            <param name="array1">The first array.</param>
            <param name="array2">The second array.</param>
            <param name="length">The number of bytes to compare.</param>
            <returns>True if the arrays are equal; false otherwise.</returns>
        </member>
        <member name="M:DVBServices.Utils.Compact(System.String)">
            <summary>
            Remove redundant spaces in a string.
            </summary>
            <param name="inputString">The string to be scanned.</param>
            <returns>The compaced string.</returns>
        </member>
        <member name="M:DVBServices.Utils.SplitBytesToStrings(System.Byte[],System.Byte)">
            <summary>
            Split an array of bytes into an array of strings based on a terminating character.
            </summary>
            <param name="inputBytes">The array of input bytes.</param>
            <param name="splitter">The terminating byte for each substring.</param>
            <returns>The array of strings.</returns>
        </member>
        <member name="M:DVBServices.Utils.SplitBytes(System.Byte[],System.Byte)">
            <summary>
            Split an array of bytes into a collection of byte arrays based on a terminator.
            </summary>
            <param name="inputBytes">The array of bytes.</param>
            <param name="splitter">The terminating byte for each collection.</param>
            <returns>A collection of byte arrays.</returns>
        </member>
        <member name="M:DVBServices.Utils.RoundTime(System.DateTime)">
            <summary>
            Optionally round a date and time to the nearest 5 minutes.
            </summary>
            <param name="oldDateTime">The date and time to be rounded.</param>
            <returns>The adjusted date and time.</returns>
        </member>
        <member name="M:DVBServices.Utils.RoundTime(System.TimeSpan)">
            <summary>
            Optionally round a time to the nearest 5 minutes.
            </summary>
            <param name="oldTime">The time to be rounded.</param>
            <returns>The adjusted time.</returns>
        </member>
        <member name="M:DVBServices.Utils.GetNZLSeasonEpisodeNumbers(DomainObjects.EPGEntry)">
            <summary>
            Get New Zealand format season and episode numbers.
            </summary>
            <param name="epgEntry">The EPG entry to be updated.</param>
        </member>
    </members>
</doc>
